-- Welcome :)

function ExecEvent(state)
    ResetRequest()
    hkbFireEvent(state)
    return 
end

function ExecEventNoReset(state)
    hkbFireEvent(state)
    return 
end

function ExecEvents(...)
    local buff = {...}
    for local0 = 1, #buff, 1 do
        ExecEvent(buff[local0])
    end
    return 
end

function ResetRequest()
    act(9101) -- ResetInputQueue
    act("自動捕捉対象クリア")
    return 
end

function GetVariable(variable)
    return hkbGetVariable(variable)
end

function ExecEventHalfBlend(event_table, blend_type)
    if blend_type == ALLBODY then
        SetVariable("MoveSpeedLevelReal", 0)
        local lower_event = event_table[1]
        local upper_event = lower_event .. "_Upper"
        ExecEvents(lower_event, upper_event)
        for local0 = 2, #event_table, 1 do
            SetVariable("LowerDefaultState0" .. local0 - 2, event_table[local0])
            SetVariable("UpperDefaultState0" .. local0 - 2, event_table[local0])
        end
    elseif blend_type == LOWER then
        ExecEvent(event_table[1])
        for local1 = 2, #event_table, 1 do
            SetVariable("LowerDefaultState0" .. local1 - 2, event_table[local1])
        end
    elseif blend_type == UPPER then
        ExecEvent(event_table[1] .. "_Upper")
        for local1 = 2, #event_table, 1 do
            SetVariable("UpperDefaultState0" .. local1 - 2, event_table[local1])
        end
    end
    return 
end

function ExecEventHalfBlendNoReset(event_table, blend_type)
    if blend_type == ALLBODY then
        local lower_event = event_table[1]
        local upper_event = lower_event .. "_Upper"
        ExecEventNoReset(lower_event)
        ExecEventNoReset(upper_event)
        for local0 = 2, #event_table, 1 do
            SetVariable("LowerDefaultState0" .. local0 - 2, event_table[local0])
            SetVariable("UpperDefaultState0" .. local0 - 2, event_table[local0])
        end
    elseif blend_type == LOWER then
        ExecEventNoReset(event_table[1])
        for local1 = 2, #event_table, 1 do
            SetVariable("LowerDefaultState0" .. local1 - 2, event_table[local1])
        end
    elseif blend_type == UPPER then
        ExecEventNoReset(event_table[1] .. "_Upper")
        for local1 = 2, #event_table, 1 do
            SetVariable("UpperDefaultState0" .. local1 - 2, event_table[local1])
        end
    end
    return 
end

function ExecEventAllBody(event)
    SetVariable("MoveSpeedLevelReal", 0)
    ExecEvent(event)
    return 
end

function IsNodeActive(...)
    local buff = {...}
    for local0 = 1, #buff, 1 do
        if hkbIsNodeActive(buff[local0]) then
            return TRUE
        end
    end
    return FALSE
end

function ResetEventState()
    SetVariable("MoveSpeedLevelReal", 0)
    ResetRequest()
    return 
end

function Replanning()
    act("キャンセルタイミングでAIへのリプランニング要求")
    return 
end

function AddStamina(num)
    act(110) -- SetStaminaRecoveryDisabled
    act(1001, num) -- AddStamina
    return 
end

function SetMoveWeightIndex()
    SetVariable("MoveWeightIndex", GetWeightIndex(TRUE))
    return 
end

function SetBaseCategory()
    SetVariable("IndexBaseCategory", GetBaseCategory())
    return 
end

function SetStyleSpecialEffect()
    if c_Style == HAND_LEFT_BOTH then
        if env(1116, 139995) == FALSE then 
            act(2002, 139995) 
        end
    elseif env(1116, 139990) == FALSE then 
        act(2002, 139990) 
    end
    return 
end

function SetMoveType()
    if env(1116, 100130) == TRUE then 
        -- Moving Right
        SetVariable("MoveType", 1)
        SetVariable("DrawStanceLoopUpperBlend", 1)
    elseif env(1116, 100140) == TRUE then 
        -- Moving Right Diagonal
        SetVariable("MoveType", 2)
        SetVariable("DrawStanceLoopUpperBlend", 1)
    elseif env(1116, 100150) == TRUE then 
        -- Moving Left
        SetVariable("MoveType", 0)
        SetVariable("DrawStanceLoopUpperBlend", 1)
    elseif env(1116, 100160) == TRUE then 
        -- Moving Left Diagonal
        SetVariable("MoveType", 0)
        SetVariable("DrawStanceLoopUpperBlend", 1)
    else
        SetVariable("MoveType", 3)
        SetVariable("DrawStanceLoopUpperBlend", 1)
    end
    return 
end

function SetThrowDefBlendWeight()
    if env(1114, GetVariable("ThrowID") + 4) == FALSE then -- DoesAnimExist
        return 
    end
    local regist_num = env(342) -- GetThrowDefenseCount
    local dT = GetDeltaTime()
    local blend_weight = GetVariable("ThrowHoldBlendWeight")
    local is_holding = GetVariable("ThrowHolding")
    local no_regist_time = GetVariable("ThrowNoRegistTime")
    if 0 < regist_num then
        is_holding = true
    end
    if is_holding == true then
        if regist_num <= 0 then
            no_regist_time = no_regist_time + dT
        end
        if 0.699999988079071 < no_regist_time then
            is_holding = false
        else
            blend_weight = blend_weight + 2 * dT
            if 0.990000009536743 < blend_weight then
                blend_weight = 0.990000009536743
            end
            SetVariable("IsEnableTAEThrowHold", true)
        end
    else
        no_regist_time = 0
        blend_weight = blend_weight - 4 * dT
        if blend_weight < 0.00999999977648258 then
            blend_weight = 0.00999999977648258
            SetVariable("IsEnableTAEThrowHold", false)
        else
            SetVariable("IsEnableTAEThrowHold", true)
        end
    end
    SetVariable("ThrowHoldBlendWeight", blend_weight)
    SetVariable("ThrowHolding", is_holding)
    SetVariable("ThrowNoRegistTime", no_regist_time)
    return 
end

function SetTurnSpeed(turn_speed)
    act(2004, turn_speed)
    return 
end

function SetRollingTurnCondition(is_selftrans)
    local rolling_angle = "RollingAngleReal"
    if is_selftrans == TRUE then
        rolling_angle = "RollingAngleRealSelftrans"
    end
    if GetVariable("IsLockon") == true then
        local angle = GetVariable("TurnAngleReal")
        if 180 < angle then
            SetTurnSpeed(0)
        elseif 90 < angle then
            SetTurnSpeed(360)
        end
    elseif env(234) == TRUE then
        SetTurnSpeed(0)
        SetVariable("TurnAngleReal", 300)
    elseif 0.00100000004749745 < math.abs(GetVariable(rolling_angle)) then
        SetTurnSpeed(0)
    elseif 200 < GetVariable("TurnAngleReal") then
        SetTurnSpeed(0)
    end
    return 
end

function SetAIActionState()
    act(9103, 1)
    return 
end

function SetAttackHand(hand)
    act("武器パラメータ参照先", hand) -- WeaponParameterReferent
    return 
end

function SetInterruptType(num)
    act("AI通知攻撃タイプ", num) -- AINotifyAttackType
    return 
end

function SetArtsGeneratorTransitionIndex(gen_hand, is_from)
    if gen_hand == FALSE then
        SetVariable("ArtsTransition", 0)
        return 
    elseif IsNonGeneratorTransition() == TRUE then
        SetVariable("ArtsTransition", 0)
        return 
    end
    local hand = HAND_LEFT
    if gen_hand == GEN_TRANS_RIGHT then
        hand = HAND_RIGHT
    end
    local offset = 0
    
    -- Fist weapons
    if is_from == TRUE and env(225, HAND_LEFT) == WEAPON_CATEGORY_FIST then -- GetEquipWeaponCategory
        offset = 4
        hand = HAND_RIGHT
    end
    local changetype = GetHandChangeType(hand)
    
    -- Farron Greatsword
    if offset == 4 and env(345, HAND_RIGHT) == 161 then -- GetEquipWeaponSpecialCategoryNumber
        offset = 0
        changetype = WEAPON_CHANGE_REQUEST_LEFT_BACK
    end
    if changetype == WEAPON_CHANGE_REQUEST_LEFT_WAIST or changetype == WEAPON_CHANGE_REQUEST_RIGHT_WAIST then
        SetVariable("ArtsTransition", 1 + offset)
    elseif changetype == WEAPON_CHANGE_REQUEST_LEFT_BACK or changetype == WEAPON_CHANGE_REQUEST_RIGHT_BACK then
        SetVariable("ArtsTransition", 2 + offset)
    elseif changetype == WEAPON_CHANGE_REQUEST_LEFT_SHOULDER or changetype == WEAPON_CHANGE_REQUEST_RIGHT_SHOULDER then
        SetVariable("ArtsTransition", 3 + offset)
    elseif changetype == WEAPON_CHANGE_REQUEST_LEFT_SPEAR or changetype == WEAPON_CHANGE_REQUEST_RIGHT_SPEAR then
        SetVariable("ArtsTransition", 4 + offset)
    else
        SetVariable("ArtsTransition", 0)
    end
    return 
end

function GetDeltaTime()
    return env(333) / 1000
end

function GetConstVariable()
    c_HasActionRequest = IsActionRequest()
    local local0, local1 = GetSwordArtsInfo()
    c_SwordArtsHand = local1
    c_SwordArtsID = local0
    c_IsEnableSwordArts = IsEnableSwordArts()
    c_Style = env(207)
    return 
end

function GetMoveSpeed(stick_level)
    local speed = GetVariable("MoveSpeedLevelReal")
    local inc_val = ACCELERATION_WALK_SPEED_UP
    local dec_val = ACCELERATION_SPEED_DOWN
    if stick_level == 2 then
        inc_val = ACCELERATION_DASH_SPEED_UP
        dec_val = ACCELERATION_DASH_SPEED_DOWN
    end
    local ret = ConvergeValue(stick_level, speed, inc_val, dec_val)
    return ret
end

function GetWeightIndex(is_move)
    local move_id = env(257) -- GetMoveAnimParamID
    local move_weight = MOVE_WEIGHT_NORMAL
    local evasion_weight = EVASION_WEIGHT_INDEX_MEDIUM
    if move_id == WEIGHT_LIGHT or move_id == WEIGHT_LIGHT + 20 or move_id == WEIGHT_LIGHT + 40 or move_id == WEIGHT_LIGHT + 60 then
        move_weight = MOVE_WEIGHT_LIGHT
        evasion_weight = EVASION_WEIGHT_INDEX_LIGHT
    elseif move_id == WEIGHT_HEAVY or move_id == WEIGHT_HEAVY + 20 or move_id == WEIGHT_HEAVY + 40 or move_id == WEIGHT_HEAVY + 60 then
        move_weight = MOVE_WEIGHT_HEAVY
        evasion_weight = EVASION_WEIGHT_INDEX_HEAVY
    elseif move_id == WEIGHT_OVERWEIGHT or move_id == WEIGHT_OVERWEIGHT + 20 or move_id == WEIGHT_OVERWEIGHT + 40 or move_id == WEIGHT_OVERWEIGHT + 60 then
        move_weight = MOVE_WEIGHT_HEAVY
        evasion_weight = EVASION_WEIGHT_INDEX_OVERWEIGHT
    elseif move_id == WEIGHT_SUPERLIGHT or move_id == WEIGHT_SUPERLIGHT + 20 or move_id == WEIGHT_SUPERLIGHT + 40 or move_id == WEIGHT_SUPERLIGHT + 60 then
        move_weight = MOVE_WEIGHT_LIGHT
        evasion_weight = EVASION_WEIGHT_INDEX_SUPERLIGHT
    end
    if env(1116, 130110) == TRUE then 
        if move_weight < MOVE_WEIGHT_HEAVY then
            move_weight = MOVE_WEIGHT_HEAVY
        end
        if evasion_weight < EVASION_WEIGHT_INDEX_HEAVY then
            evasion_weight = EVASION_WEIGHT_INDEX_HEAVY
        end
    elseif env(305, CONDITION_TYPE_GRAVITY_MEDIUM) == TRUE then -- GetStateChangeType
        if move_weight < MOVE_WEIGHT_HEAVY then
            move_weight = MOVE_WEIGHT_HEAVY
        end
        if evasion_weight < EVASION_WEIGHT_INDEX_HEAVY then
            evasion_weight = EVASION_WEIGHT_INDEX_HEAVY
        end
    elseif env(305, CONDITION_TYPE_GRAVITY_WEAK) == TRUE and move_weight < MOVE_WEIGHT_HEAVY then -- GetStateChangeType
        move_weight = MOVE_WEIGHT_HEAVY
    end
    
    -- Carthus Bloodring Effect
    if env(1116, 112000) == TRUE then 
        if evasion_weight == EVASION_WEIGHT_INDEX_OVERWEIGHT then
            evasion_weight = EVASION_WEIGHT_INDEX_HEAVY
            move_weight = MOVE_WEIGHT_NORMAL
        elseif evasion_weight == EVASION_WEIGHT_INDEX_HEAVY then
            evasion_weight = EVASION_WEIGHT_INDEX_MEDIUM
            move_weight = MOVE_WEIGHT_LIGHT
        elseif evasion_weight == EVASION_WEIGHT_INDEX_MEDIUM then
            evasion_weight = EVASION_WEIGHT_INDEX_LIGHT
            move_weight = MOVE_WEIGHT_LIGHT
        elseif evasion_weight == EVASION_WEIGHT_INDEX_LIGHT then
            evasion_weight = EVASION_WEIGHT_INDEX_SUPERLIGHT
            move_weight = MOVE_WEIGHT_LIGHT
        end
    end
    
    local weight = evasion_weight
    if is_move == TRUE then
        weight = move_weight
    end
    return weight
end

function GetHalfBlendInfo()
    local blend_type = ALLBODY
    local lower_state = LOWER_IDLE
    if GetLocomotionState() == PLAYER_STATE_MOVE then
        blend_type = UPPER
        lower_state = LOWER_MOVE
    elseif IsLowerQuickTurn() == TRUE then
        if IsExitLowerQuickTurn() == TRUE then
            lower_state = LOWER_END_TURN
        else
            blend_type = UPPER
            lower_state = LOWER_TURN
        end
    end
    return blend_type, lower_state
end

function GetLocomotionState()
    local state = GetVariable("LowerDefaultState00")
    if state == MOVE_DEF0 or state == MOVECEREMONY_DEF0 then
        if env(1116, 100000) == TRUE then 
            -- Walking
            return PLAYER_STATE_MOVE
        elseif env(1116, 100001) == TRUE then 
            -- Running
            return PLAYER_STATE_MOVE
        elseif env(1116, 100002) == TRUE then 
            -- Sprinting
            return PLAYER_STATE_MOVE
        end
    end
    return PLAYER_STATE_IDLE
end

function GetBaseCategory()
    local basecategoryid = 0
    
    -- Scythe
    if kind_special == 50 then
        basecategoryid = 0
    else
        basecategoryid = env(358) -- GetStayAnimCategory
    end
    local index = 0
    if basecategoryid == 0 then
        index = 0
    elseif basecategoryid == 2 or basecategoryid == 12 then
        index = 1
    elseif basecategoryid == 3 or basecategoryid == 13 then
        index = 2
    end
    return index
end

function GetEquipType(hand, ...)
    local buff = {...}
    local kind = {}
    local num = 1
    if hand == HAND_BOTH then
        kind[1] = env(225, HAND_LEFT) -- GetEquipWeaponCategory
        kind[2] = env(225, HAND_RIGHT) -- GetEquipWeaponCategory
        num = 2
    else
        kind[1] = env(225, hand) -- GetEquipWeaponCategory
    end
    for local0 = 1, num, 1 do
        for local1 = 1, #buff, 1 do
            if kind[local0] == buff[local1] then
                return TRUE
            end
        end
    end
	return FALSE
end

function GetWeaponChangeType(hand)
    local left_offset = 0
    local pos = env(357, hand) -- GetWeaponStorageSpotType
    if hand == HAND_LEFT then
        left_offset = 4
    end
    if pos == 0 then
        return WEAPON_CHANGE_REQUEST_RIGHT_WAIST + left_offset
    elseif pos == 1 then
        return WEAPON_CHANGE_REQUEST_RIGHT_BACK + left_offset
    elseif pos == 2 then
        return WEAPON_CHANGE_REQUEST_RIGHT_SHOULDER + left_offset
    elseif pos == 3 then
        return WEAPON_CHANGE_REQUEST_RIGHT_SPEAR + left_offset
    else
        return WEAPON_CHANGE_REQUEST_INVALID
    end
end

function GetHandChangeType(hand)
    local left_offset = 0
    local pos = env(357, hand) -- GetWeaponStorageSpotType
    if hand == HAND_LEFT then
        left_offset = 4
    end
    if pos == 0 then
        return WEAPON_CHANGE_REQUEST_RIGHT_WAIST + left_offset
    elseif pos == 1 then
        return WEAPON_CHANGE_REQUEST_RIGHT_BACK + left_offset
    elseif pos == 2 then
        return WEAPON_CHANGE_REQUEST_RIGHT_SHOULDER + left_offset
    elseif pos == 3 then
        return WEAPON_CHANGE_REQUEST_RIGHT_SPEAR + left_offset
    else
        return WEAPON_CHANGE_REQUEST_INVALID
    end
end

function GetSwordArtsInfo()
    local style = c_Style
    local is_both = FALSE
    if HAND_LEFT_BOTH <= style then
        is_both = TRUE
    end
    local arts_id = 0
    local arts_hand = 0
    
    -- Setup weapon skill ID based on hand position of weapon.
    if is_both == TRUE then
        if style == HAND_RIGHT_BOTH then
            arts_hand = HAND_RIGHT
        elseif style == HAND_LEFT_BOTH then
            arts_hand = HAND_LEFT
        end
        arts_id = env(326, arts_hand) -- GetWeaponID
    else
        local weaponswordartid = env(326, HAND_LEFT) -- GetWeaponID
        if weaponswordartid == SWORDARTS_RIGHTARTS then
            arts_hand = HAND_RIGHT
            arts_id = env(326, HAND_RIGHT) -- GetWeaponID
        else
            arts_hand = HAND_LEFT
            arts_id = weaponswordartid
        end
        
        -- Exception for Fist weapons
        if env(225, HAND_LEFT) == WEAPON_CATEGORY_FIST then -- GetEquipWeaponCategory
            if arts_hand == HAND_LEFT then
                if arts_id ~= SWORDARTS_ONESHOTFULL then
                    arts_id = SWORDARTS_PARRY
                end
            elseif arts_id == SWORDARTS_RIGHTARTS then
                arts_id = SWORDARTS_PARRY
                arts_hand = HAND_LEFT
            end
        end
    end
    return arts_id, arts_hand
end

function GetSwordArtsRequest()
    local style = c_Style
    local is_both = FALSE
    local arts_id = c_SwordArtsID
    if HAND_LEFT_BOTH <= style then
        is_both = TRUE
    end
    if is_both == TRUE then
        local request = arts_id + 200
        return request
    elseif c_SwordArtsHand == HAND_RIGHT then
        local request = arts_id + 200
        return request
    else
        local request = arts_id + 100
        return request
    end
end

function GetAttackRequest(is_guard)
    local style = c_Style
    local is_both = FALSE
    local is_both_right = FALSE
    
    if HAND_LEFT_BOTH <= style then
        is_both = TRUE
    end
    if style == HAND_RIGHT_BOTH then
        is_both_right = TRUE
    end
    
    local hand = HAND_RIGHT
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    
    local is_arrow = GetEquipType(hand, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW)
    local is_crossbow = GetEquipType(hand, WEAPON_CATEGORY_CROSSBOW)
    local is_staff = GetEquipType(hand, WEAPON_CATEGORY_STAFF)
    
    if env(1106, ACTION_ARM_R1) == TRUE then -- ActionRequest
        if is_both == TRUE then
            if is_arrow == TRUE then
                act("弓矢スロット選択", 0) -- ChooseBowAndArrowSlot
                return ATTACK_REQUEST_ARROW_FIRE_RIGHT
            elseif is_crossbow == TRUE then
                act("弓矢スロット選択", 0) -- ChooseBowAndArrowSlot
                if style == HAND_LEFT_BOTH then
                    return ATTACK_REQUEST_BOTHLEFT_CROSSBOW
                else
                    return ATTACK_REQUEST_BOTHRIGHT_CROSSBOW
                end
            elseif is_staff == TRUE then
                return ATTACK_REQUEST_INVALID
            elseif env(1106, ACTION_ARM_LIGHT_KICK) == TRUE then -- ActionRequest
                return ATTACK_REQUEST_LIGHT_KICK
            else
                return ATTACK_REQUEST_BOTH_LIGHT
            end
        elseif is_guard == TRUE then
            local is_spear = GetEquipType(HAND_RIGHT, WEAPON_CATEGORY_SPEAR)
            local is_rapier = GetEquipType(HAND_RIGHT, WEAPON_CATEGORY_RAPIER)
            
            if is_spear == TRUE or is_rapier == TRUE then
                if 0 < env(1108, ACTION_ARM_L1) then -- ActionDuration
                    return ATTACK_REQUEST_ATTACK_WHILE_GUARD
                end
            elseif is_staff == TRUE then
                return ATTACK_REQUEST_INVALID
            elseif is_arrow == TRUE then
                return ATTACK_REQUEST_ARROW_BOTH_RIGHT
            elseif is_crossbow == TRUE then
                act("弓矢スロット選択", 0) -- ChooseBowAndArrowSlot
                return ATTACK_REQUEST_RIGHT_CROSSBOW
            end
        elseif is_staff == TRUE then
            return ATTACK_REQUEST_INVALID
        elseif is_arrow == TRUE then
            return ATTACK_REQUEST_ARROW_BOTH_RIGHT
        elseif is_crossbow == TRUE then
            act("弓矢スロット選択", 0) -- ChooseBowAndArrowSlot
            return ATTACK_REQUEST_RIGHT_CROSSBOW
        end
        if env(1106, ACTION_ARM_LIGHT_KICK) == TRUE then -- ActionRequest
            return ATTACK_REQUEST_LIGHT_KICK
        else
            return ATTACK_REQUEST_RIGHT_LIGHT
        end
    elseif env(1106, ACTION_ARM_R2) == TRUE then -- ActionRequest
        if is_arrow == TRUE then
            if is_both == TRUE then
                act("弓矢スロット選択", 1) -- ChooseBowAndArrowSlot
                return ATTACK_REQUEST_ARROW_FIRE_RIGHT2
            else
                return ATTACK_REQUEST_ARROW_BOTH_RIGHT
            end
        elseif is_crossbow == TRUE then
            if is_both == TRUE then
                if style == HAND_LEFT_BOTH then
                    act("弓矢スロット選択", 1) -- ChooseBowAndArrowSlot
                    return ATTACK_REQUEST_BOTHLEFT_CROSSBOW2
                else
                    act("弓矢スロット選択", 1) -- ChooseBowAndArrowSlot
                    return ATTACK_REQUEST_BOTHRIGHT_CROSSBOW2
                end
            else
                act("弓矢スロット選択", 1) -- ChooseBowAndArrowSlot
                return ATTACK_REQUEST_RIGHT_CROSSBOW2
            end
        elseif env(1106, ACTION_ARM_HEAVY_KICK) == TRUE then -- ActionRequest
            local check_weapon = GetEquipType(hand, WEAPON_CATEGORY_STAFF)
            if check_weapon == FALSE and env(1116, 100260) == FALSE then 
                return ATTACK_REQUEST_HEAVY_KICK
            end
        end
        local sp_kind = env(345, hand) -- GetEquipWeaponSpecialCategoryNumber
        
        -- Hybrid Spell Tool
        if sp_kind == 178 or sp_kind == 207 or sp_kind == 217 or sp_kind == 220 or sp_kind == 234 then
            return ATTACK_REQUEST_INVALID
        -- Demon's Scar
        elseif sp_kind == 257 and env(1116, 100580) == FALSE then 
            return ATTACK_REQUEST_INVALID
        elseif is_both == TRUE then
            return ATTACK_REQUEST_BOTH_HEAVY
        else
            return ATTACK_REQUEST_RIGHT_HEAVY
        end
    elseif env(1106, ACTION_ARM_L1) == TRUE then -- ActionRequest
        if env(234) == TRUE then -- IsPrecisionShoot
            return ATTACK_REQUEST_INVALID
        elseif is_both == TRUE then
            if is_arrow == TRUE or is_crossbow == TRUE then
                return ATTACK_REQUEST_INVALID
            end
        elseif GetEquipType(HAND_LEFT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW) == TRUE then
            return ATTACK_REQUEST_ARROW_BOTH_LEFT
        elseif GetEquipType(HAND_LEFT, WEAPON_CATEGORY_CROSSBOW) == TRUE then
            act("弓矢スロット選択", 0) -- ChooseBowAndArrowSlot
            return ATTACK_REQUEST_LEFT_CROSSBOW
        end
        if is_both == TRUE then
			local sp_kind = env(345, hand)
            if c_SwordArtsID ~= 32 or sp_kind == 604 then -- Valorheart - Lion Stance
                if IsDualBlade() == TRUE then
                    return ATTACK_REQUEST_BOTH_LEFT
                end
            else
                return ATTACK_REQUEST_INVALID
            end
        end
        if is_both == FALSE then
            local sp_kind = env(345, HAND_LEFT) -- GetEquipWeaponSpecialCategoryNumber
            
            -- Hybrid Spell Tool
            if sp_kind == 178 or sp_kind == 207 or sp_kind == 217 or sp_kind == 220 or sp_kind == 234 or sp_kind == 257 then
                return ATTACK_REQUEST_LEFT_HEAVY
            -- Curved Swords/Rapier
            elseif sp_kind == 99 or sp_kind == 101 or sp_kind == 137 or sp_kind == 151 or sp_kind == 164 or sp_kind == 218 then
                return ATTACK_REQUEST_LEFT_HEAVY_SP
            end
        end
        local is_shield_left = GetEquipType(HAND_LEFT, WEAPON_CATEGORY_SMALL_SHIELD, WEAPON_CATEGORY_LARGE_SHIELD, WEAPON_CATEGORY_TORCH)
        local is_shield_right = GetEquipType(HAND_RIGHT, WEAPON_CATEGORY_SMALL_SHIELD, WEAPON_CATEGORY_LARGE_SHIELD, WEAPON_CATEGORY_TORCH)
        if is_shield_left == TRUE then
            return ATTACK_REQUEST_INVALID
        elseif is_shield_right == TRUE and is_both_right == TRUE then
            return ATTACK_REQUEST_INVALID
        elseif IsEnableGuard() == TRUE then
            return ATTACK_REQUEST_INVALID
        elseif GetEquipType(HAND_LEFT, WEAPON_CATEGORY_STAFF) == TRUE then
            return ATTACK_REQUEST_INVALID
        elseif is_both == FALSE and env(225, HAND_LEFT) == 42 then -- GetEquipWeaponCategory
            return ATTACK_REQUEST_LEFT_HEAVY
        else
            return ATTACK_REQUEST_LEFT_LIGHT
        end
    elseif env(1106, ACTION_ARM_L2) == TRUE then -- ActionRequest
        if is_both == FALSE then
            if GetEquipType(HAND_LEFT, WEAPON_CATEGORY_CROSSBOW) == TRUE then
                act("弓矢スロット選択", 1) -- ChooseBowAndArrowSlot
                return ATTACK_REQUEST_LEFT_CROSSBOW2
            elseif GetEquipType(HAND_LEFT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW) == TRUE then
                return ATTACK_REQUEST_ARROW_BOTH_LEFT
            end
            local sp_kind = env(345, HAND_LEFT) -- GetEquipWeaponSpecialCategoryNumber
            
            -- Hybrid Spell Tool
            if sp_kind == 178 or sp_kind == 207 or sp_kind == 217 or sp_kind == 220 or sp_kind == 234 or sp_kind == 257 then
                return ATTACK_REQUEST_INVALID
            end
        end
        if c_IsEnableSwordArts == TRUE then
            local swordartrequest = GetSwordArtsRequest()
            if (swordartrequest == SWORDARTS_REQUEST_LEFT_CHARGESHOT or swordartrequest == SWORDARTS_REQUEST_RIGHT_CHAINSHOT or swordartrequest == SWORDARTS_REQUEST_LEFT_CHAINSHOT or swordartrequest == SWORDARTS_REQUEST_RIGHT_CHARGESHOT or swordartrequest == SWORDARTS_REQUEST_LEFT_STRONGSHOT or swordartrequest == SWORDARTS_REQUEST_RIGHT_STRONGSHOT or swordartrequest == SWORDARTS_REQUEST_LEFT_WIDESHOT or swordartrequest == SWORDARTS_REQUEST_RIGHT_WIDESHOT) and is_both == FALSE then
                local arts_hand = c_SwordArtsHand
                if arts_hand == HAND_RIGHT then
                    return ATTACK_REQUEST_ARROW_BOTH_RIGHT
                else
                    return ATTACK_REQUEST_ARROW_BOTH_LEFT
                end
            else
                return swordartrequest
            end
        elseif HAND_LEFT_BOTH <= style then
            return ATTACK_REQUEST_BOTH_HEAVY
        else
            return ATTACK_REQUEST_LEFT_HEAVY
        end
    else
        return ATTACK_REQUEST_INVALID
    end
end

function GetEvasionRequest()
    if env(1001) < STAMINA_MINIMUM then -- GetStamina
        return ATTACK_REQUEST_INVALID
    elseif env(1106, ACTION_ARM_JUMP) == TRUE then -- ActionRequest
        local speed = GetVariable("MoveSpeedLevelReal")
        if SPEED_ENABLE_JUMP < speed then
            return ATTACK_REQUEST_JUMP
        end
    end
    if env(1106, ACTION_ARM_ROLLING) == TRUE then -- ActionRequest
        return ATTACK_REQUEST_ROLLING
    elseif env(1106, ACTION_ARM_BACKSTEP) == TRUE then -- ActionRequest
        return ATTACK_REQUEST_BACKSTEP
    else
        return ATTACK_REQUEST_INVALID
    end
end

function GetLadderEventCommand(is_start)
    if env(1007) == FALSE then -- IsCOMPlayer
        return env(105, 0)
    end
    local req_up = env(1106, ACTION_ARM_LADDERUP) -- ActionRequest
    local req_down = env(1106, ACTION_ARM_LADDERDOWN) -- ActionRequest
    if is_start == TRUE then
        if req_up == TRUE then
            return LADDER_ACTION_START_BOTTOM
        elseif req_down == TRUE then
            return LADDER_ACTION_START_TOP
        end
    elseif req_up == TRUE then
        if env(304) == TRUE then -- IsReachTopOfLadder
            return LADDER_EVENT_COMMAND_END_TOP
        else
            return LADDER_EVENT_COMMAND_UP
        end
    elseif req_down == TRUE then
        if env(303) == TRUE then -- IsReachBottomOfLadder
            return LADDER_EVENT_COMMAND_END_BOTTOM
        else
            return LADDER_EVENT_COMMAND_DOWN
        end
    end
    return INVALID
end

function SetVariable(name, value)
    act(148, name, value) -- SetVariable
    return 
end

function SetHandChangeStyle(s, e)
    SetVariable("HandChangeStartIndex", s)
    SetVariable("HandChangeEndIndex", e)
    return 
end

function SetEvasionStaminaCost()
    local weight = env(257) -- GetMoveAnimParamID
    if weight == WEIGHT_LIGHT then
        c_StaminaCostRolling = -20
        c_StaminaCostBackStep = -20
        c_StaminaCostJump = -20
    elseif weight == WEIGHT_NORMAL then
        c_StaminaCostRolling = -25
        c_StaminaCostBackStep = -25
        c_StaminaCostJump = -25
    elseif weight == WEIGHT_HEAVY then
        c_StaminaCostRolling = -30
        c_StaminaCostBackStep = -30
        c_StaminaCostJump = -30
    elseif weight == WEIGHT_OVERWEIGHT then
        c_StaminaCostRolling = -40
        c_StaminaCostBackStep = -40
        c_StaminaCostJump = -40
    else
        c_StaminaCostRolling = -25
        c_StaminaCostBackStep = -25
        c_StaminaCostJump = -25
    end
    
    -- Rolling Stamina Growth
    if env(1116, 112114) == TRUE then
        c_StaminaCostRolling = c_StaminaCostRolling - 5
        c_StaminaCostBackStep = c_StaminaCostBackStep - 5
    end
    
    if env(1116, 112113) == TRUE then
        c_StaminaCostRolling = c_StaminaCostRolling - 5
        c_StaminaCostBackStep = c_StaminaCostBackStep - 5
        act(2002, 112114)
    end
    
    if env(1116, 112112) == TRUE then
        c_StaminaCostRolling = c_StaminaCostRolling - 5
        c_StaminaCostBackStep = c_StaminaCostBackStep - 5
        act(2002, 112113)
    end
    
    if env(1116, 112111) == TRUE then
        c_StaminaCostRolling = c_StaminaCostRolling - 5
        c_StaminaCostBackStep = c_StaminaCostBackStep - 5
        act(2002, 112112)
    end
    
    if env(1116, 112110) == TRUE then
        c_StaminaCostRolling = c_StaminaCostRolling - 5
        c_StaminaCostBackStep = c_StaminaCostBackStep - 5
        act(2002, 112111)
    end
    
    if env(1116, 112110) ~= TRUE then
        act(2002, 112110)
    end

    
    -- Carthus Bloodring Effect
    if env(1116, 112000) == TRUE then 
        c_StaminaCostRolling = c_StaminaCostRolling * 1.5
        c_StaminaCostBackStep = c_StaminaCostBackStep * 1.5
        c_StaminaCostJump = c_StaminaCostJump * 1.5
    end
    
    -- Carthus Milkring Effect
    if IsCarthusMilkRing() == TRUE then 
        if env(1116, 112010) == TRUE then
            c_StaminaCostRolling = c_StaminaCostRolling * 0.75
        elseif env(1116, 112011) == TRUE then
            c_StaminaCostRolling = c_StaminaCostRolling * 0.7
        elseif env(1116, 112012) == TRUE then
            c_StaminaCostRolling = c_StaminaCostRolling * 0.65
        elseif env(1116, 112013) == TRUE then
            c_StaminaCostRolling = c_StaminaCostRolling * 0.6
        elseif env(1116, 112014) == TRUE then
            c_StaminaCostRolling = c_StaminaCostRolling * 0.55
        elseif env(1116, 112015) == TRUE then
            c_StaminaCostRolling = c_StaminaCostRolling * 0.5
        end
    end
    
    -- Cursed Ring of Evasion Effect
    if env(1116, 112003) == TRUE then 
        c_StaminaCostRolling = c_StaminaCostRolling * 0.5
        c_StaminaCostBackStep = c_StaminaCostBackStep * 0.5
        c_StaminaCostJump = c_StaminaCostJump * 0.5
    end
    
    -- Curse of Gluttony
    if env(1116, 112070) == TRUE then 
        c_StaminaCostRolling = c_StaminaCostRolling * 2
        c_StaminaCostBackStep = c_StaminaCostBackStep * 2
        c_StaminaCostJump = c_StaminaCostJump * 2
    end
    
    return 
end

function SetSwordArtsCancelType()
    local sp_kind = env(345, HAND_LEFT) -- GetEquipWeaponSpecialCategoryNumber
    if IsEnableSwordArts() == TRUE then
        -- GetGeneralMSBParameter
        act(2011, env(121, c_SwordArtsHand)) -- GetWeaponCancelType
    else
        -- GetGeneralMSBParameter
        act(2011, 0)
    end
    return 
end

function SetGender()
    -- Reversal Ring
    if env(1116, 112074000) == TRUE then -- 
        if env(347) == TRUE then -- IsFemale
            c_IsFemale = FALSE
        else
            c_IsFemale = TRUE
        end
    elseif env(347) == TRUE then -- -- IsFemale
        c_IsFemale = TRUE
    else
        c_IsFemale = FALSE
    end
    return 
end

function SetSwordArtsPointInfo(button, is_point_consume)
    local hand = c_SwordArtsHand
    if is_point_consume == TRUE then
        act("アーツポイント使用予約", button, hand) -- ReserveArtsPointsUse
    end
    local sel = 0
    if env(344, button, hand) == FALSE then -- HasEnoughArtsPoints
        sel = 1
    elseif env(311, hand) == 0 then -- GetWeaponDurability
        sel = 1
    elseif env(262, hand) == TRUE then -- IsAbilityInsufficient
        sel = 1
    elseif c_SwordArtsID == SWORDARTS_MAGICBUFFPRAY and env(1116, 135000) == FALSE then 
        -- Pyromancer's Parting Flame
        sel = 1
    end
    local val = "IsEnoughArtPointsL2"
    if button == ACTION_ARM_R1 then
        if IsNodeActive("DrawStanceRightAttackLight_Selector") == TRUE then
            val = "IsEnoughArtPointsR1_2"
        elseif IsNodeActive("DrawStanceRightAttackLight2_Selector") == TRUE then
            val = "IsEnoughArtPointsR1_3"
        else
            val = "IsEnoughArtPointsR1"
        end
    elseif button == ACTION_ARM_R2 then
        if IsNodeActive("DrawStanceRightAttackHeavy_Selector") == TRUE or IsNodeActive("Charge_Upper_Selector") == TRUE then
            val = "IsEnoughArtPointsR2_2"
        elseif IsNodeActive("ChargeContinue_Selector") == TRUE then
            val = "IsEnoughArtPointsR2_3"
        else
            val = "IsEnoughArtPointsR2"
        end
    elseif button == ACTION_ARM_L2 then
        if IsNodeActive("MagicBuffRight_Upper_Selector") == TRUE or IsNodeActive("MagicBuffLeft_Upper_Selector") == TRUE then
            local sp_kind_L = env(345, HAND_LEFT) -- GetEquipWeaponSpecialCategoryNumber
            local sp_kind_R = env(345, HAND_RIGHT) -- GetEquipWeaponSpecialCategoryNumber
            local style = c_Style
            if sp_kind_L == 265 and sp_kind_R == 265 then -- Preacher's Right Arm
                DebugPrint(1, style)
                if style == HAND_BOTH or style == HAND_LEFT_BOTH or style == HAND_RIGHT_BOTH then
                    val = "IsEnoughArtPointsL2_2"
                else
                    val = "IsEnoughArtPointsL2_3"
                end
            else
                val = "IsEnoughArtPointsL2_2"
            end
        elseif IsNodeActive("MagicBuffRight2_Selector") == TRUE or IsNodeActive("MagicBuffLeft2_Selector") == TRUE then
            val = "IsEnoughArtPointsL2_3"
        elseif IsNodeActive("MagicBuffRight3_Selector") == TRUE or IsNodeActive("MagicBuffLeft3_Selector") == TRUE then
            val = "IsEnoughArtPoints_L2_2"
        end
    end
    SetVariable(val, sel)
    return 
end

function SetAttackQueue(r1, r2, l1, l2, b1, b2)
    g_r1 = r1
    g_r2 = r2
    g_l1 = l1
    g_l2 = l2
    g_b1 = b1
    g_b2 = b2
    return 
end

function ClearAttackQueue()
    g_r1 = "W_AttackRightLight1"
    g_r2 = "W_AttackRightHeavy1Start"
    g_l1 = "W_AttackLeftLight1"
    g_l2 = "W_AttackLeftHeavy1"
    g_b1 = "W_AttackBothLight1"
    g_b2 = "W_AttackBothHeavy1Start"
    return 
end

function UpdateOldMonkState()
    if env(1116, 9130) == FALSE then 
        if env(1116, 9139) == FALSE then 
            act(2002, 9139)
        end
    elseif env(1116, 9139) == TRUE then 
        act(2002, 9133)
    end
    return 
end

function UpdateAtkAutoAim()
    local aim_time = GetVariable("AtkAutoAimTime")
    local upper_limit = 0.165999993681908
    if GetVariable("AtkAutoAimFlag") == true and GetVariable("AtkAutoAimTime") < upper_limit and GetVariable("IsLockon") == false then
        act("自動捕捉対象設定") -- Update Lockon Target
    end
    if aim_time < upper_limit then
        SetVariable("AtkAutoAimTime", aim_time + GetDeltaTime())
    else
        SetVariable("AtkAutoAimFlag", false)
    end
    if 30 < math.abs(GetVariable("MoveAngle")) then
        act("自動捕捉対象クリア") -- Clear Lockon Target
    end
    return 
end

function IsEnableSwordArts()
    local style = c_Style
    local arts_id = c_SwordArtsID
    local sp_kind = env("装備武器特殊カテゴリ番号取得", HAND_LEFT) -- GetEquipWeaponSpecialCategoryNumber
    -- Hybrid Spell Tool
    if style ~= HAND_LEFT_BOTH and c_SwordArtsHand == 0 then
        if sp_kind == 178 or sp_kind == 207 or sp_kind == 217 or sp_kind == 220 or sp_kind == 234 or sp_kind == 257 then
            return FALSE
        elseif arts_id == SWORDARTS_PARRY or arts_id == SWORDARTS_SPIN or arts_id == SWORDARTS_STRONGBASH or arts_id == SWORDARTS_CHAINSHOT or arts_id == SWORDARTS_MAGICBUFF or arts_id == SWORDARTS_SAMAGIC or arts_id == SWORDARTS_CHARGESHOT or arts_id == SWORDARTS_ONESHOTFULL or arts_id == SWORDARTS_STRONGSHOT or arts_id == SWORDARTS_SAMAGICMEDIUM or arts_id == SWORDARTS_SAMAGICSTRONG or arts_id == SWORDARTS_WIDESHOT or arts_id == SWORDARTS_MAGICBUFFPRAY or arts_id == SWORDARTS_MAGICBUFFATTACK then
            return TRUE
        end
    elseif arts_id ~= SWORDARTS_RIGHTARTS and arts_id ~= SWORDARTS_INVALID then
        return TRUE
    end
    return FALSE
end

function IsAttackMagic(index)
    for local0 = 1, #AttackMagicIndex, 1 do
        if AttackMagicIndex[local0] == index then
            return TRUE
        end
    end
    return FALSE
end

function IsExistArrow()
    local style = c_Style
    local hand = HAND_RIGHT
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    return env(245, hand) -- IsOutOfAmmo
end

function IsExistBolt(hand)
    return env(245, hand) -- IsOutOfAmmo
end

function IsEnoughWeaponReleaseStatus(hand)
    return env("武器能力開放ステータス値到達か", hand) -- HasReachedStatsNeededForWeapon
end

function IsActionRequest()
    return env(1109) -- HasActionRequest
end

function IsLowerQuickTurn()
    if GetVariable("LowerDefaultState00") == QUICKTURN_DEF0 and env(1116, 100010) == TRUE then 
        -- Is Turning
        return TRUE
    else
        return FALSE
    end
end

function IsExitLowerQuickTurn()
    if env("アニメ終了か", 2) == TRUE or env(301, 1) == TRUE then -- IsAnimEnd, GetEventEzStateFlag
        return TRUE
    elseif GetVariable("IsLockon") == false then
        return TRUE
    else
        return FALSE
    end
end

function IsNonGeneratorTransition()
    local style = c_Style
    local sp_kind = env("装備武器特殊カテゴリ番号取得", c_SwordArtsHand) -- GetEquipWeaponSpecialCategoryNumber
    if env(1116, 100500) == TRUE then 
        return TRUE
    elseif sp_kind == 232 then
        -- Friede's Great Scythe
        if 0 < GetVariable("MoveSpeedLevel") and env(1116, 100490) == TRUE then 
            -- Non-generator Transition
            return FALSE
        else
            return TRUE
        end
    elseif sp_kind == 256 then
        -- Aquamarine Dagger
        return TRUE
    elseif style ~= HAND_RIGHT then
        SetVariable("ArtsTransition", 0)
        return TRUE
    end
    local kind_right = env(225, HAND_RIGHT) -- GetEquipWeaponCategory
    if c_SwordArtsID == SWORDARTS_DRAWSTANCE and kind_right == WEAPON_CATEGORY_SPEAR then
        return TRUE
    elseif IsDualBlade() == FALSE or sp_kind == 604 then -- Prevents Frostfall WA while 1-handed from putting away bare-hand into waist
        local kind_left = env(225, HAND_LEFT) -- GetEquipWeaponCategory
        if kind_left == WEAPON_CATEGORY_FIST then
            return TRUE
        end
    end
    return FALSE
end

function IsHoldMagic()
    local magic_type = env(227) -- GetMagicAnimType
    
    -- Allow Generic Hold
    if env(1007) == FALSE then -- Ignore if AI player
        if magic_type == 0 or magic_type == 5 or magic_type == 8 or magic_type == 9 or magic_type == 12 or magic_type == 18 or magic_type == 19 or magic_type == 22 or magic_type == 25 or magic_type == 31 or magic_type == 32 or magic_type == 33 or magic_type == 35 or magic_type == 36 or magic_type == 37 or magic_type == 39 or magic_type == 40 or magic_type == 41 or magic_type == 42 or magic_type == 43 or magic_type == 44 or magic_type == 47 then
            return TRUE
        end
    end
    
    -- Original
    if magic_type == MAGIC_REQUEST_FLAMETHROWER then
        SetVariable("IndexHoldMagicType", 0)
        return TRUE
    elseif magic_type == MAGIC_REQUEST_PRAYHOLD then
        SetVariable("IndexHoldMagicType", 1)
        return TRUE
    elseif magic_type == MAGIC_REQUEST_AOEPRAYHOLD then
        SetVariable("IndexHoldMagicType", 2)
        return TRUE
    elseif magic_type == MAGIC_REQUEST_SLASHHOLD then
        SetVariable("IndexHoldMagicType", 3)
        return TRUE
    elseif magic_type == MAGIC_REQUEST_BOW then
        SetVariable("IndexHoldMagicType", 4)
        return TRUE
    else
        return FALSE
    end
end

function IsQuickMagic()
    local magic_type = env(227) -- GetMagicAnimType
    if magic_type == MAGIC_REQUEST_QUICKENBULLET then
        SetVariable("IndexQuickMagicType", 0)
        return TRUE
    elseif magic_type == MAGIC_REQUEST_QUICKSLASH then
        SetVariable("IndexQuickMagicType", 1)
        return TRUE
    else
        return FALSE
    end
end

function IsComboMagic()
    local magic_type = env(227) -- GetMagicAnimType
    if magic_type == MAGIC_REQUEST_FAN then
        return TRUE
    else
        return FALSE
    end
end

function IsLoopMagic()
    local magic_type = env(227) -- GetMagicAnimType
    if magic_type == MAGIC_REQUEST_FLAMETHROWER then
        SetVariable("IndexLoopMagicType", 0)
        return TRUE
    else
        return FALSE
    end
end

function IsWeaponCanGuard()
    local style = c_Style
    local kind = 0
    local pos = 0
    if style == HAND_RIGHT or style == HAND_LEFT_BOTH then
        kind = env(225, HAND_LEFT) -- GetEquipWeaponCategory
        pos = 2
    else
        kind = env(225, HAND_RIGHT) -- GetEquipWeaponCategory
        pos = 3
    end
    
    for local0 = 1, #WeaponCategoryID, 1 do
        local local1 = WeaponCategoryID[local0]
        if local1[1] == kind then
            local1 = WeaponCategoryID[local0]
            local canguard = local1[pos]
            return canguard
        end
    end
    return 
end

function IsEnableGuard()
    local style = c_Style
    local hand = HAND_LEFT
    
    if style == HAND_RIGHT_BOTH then
        hand = HAND_RIGHT
    end
    
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand) -- GetEquipWeaponSpecialCategoryNumber
    
    if style == HAND_RIGHT then
        if GetEquipType(hand, WEAPON_CATEGORY_STAFF) == TRUE then
            return FALSE
        elseif sp_kind == 123 then
            -- Dark Hand
            return TRUE
        elseif sp_kind == 178 or sp_kind == 207 or sp_kind == 217 or sp_kind == 220 or sp_kind == 234 or sp_kind == 257 then
            -- Hybrid Spell Tool
            return FALSE
        elseif sp_kind == 99 or sp_kind == 101 or sp_kind == 137 or sp_kind == 151 or sp_kind == 164 or sp_kind == 218 then
            -- Curved Swords/Rapier
            return FALSE
        end
    end
    
    -- Other
    if sp_kind == 229 or sp_kind == 231 or sp_kind == 234 then
        -- Whips
        return TRUE
    elseif IsWeaponCanGuard() == FALSE then
        return FALSE
    elseif (c_SwordArtsID ~= 32 or sp_kind == 604) and HAND_LEFT_BOTH <= style and IsDualBlade() == TRUE then
        -- Valorheart
        return FALSE
    else
        return TRUE
    end
end

function IsDualBlade()
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        return env("双剣か", 0) -- IsTwinSwords
    else
        return env("双剣か", 1) -- IsTwinSwords
    end
end

function IsDualBladeSpecific(hand)
    local style = c_Style
    if hand == HAND_LEFT then
        return env("双剣か", 0)
    else
        return env("双剣か", 1)
    end
end

function IsWarcrySpAtk()
    local style = c_Style
    local offset = 0
    if style == HAND_LEFT_BOTH then
        offset = 50
    end
    local buff = {1062301, 1062311, 1070101, 1070111, 1070401, 1070411, 1070501, 1070511, 1080001, 1080011, 1080601, 1080611, 1081001, 1081011, 1083201, 1092401, 1092411, 1080701, 1080711, 1080801, 1080811, 1080101, 1080111, 1080901, 1080911, 1081101, 1081111, 1081201, 1081211, 1081301, 1081351}
    for local0 = 1, #buff, 1 do
        if env(1116, buff[local0] + offset) == TRUE then
            return TRUE
        end
    end
    
    return FALSE
end

function IsArtsSpAtk()
    local style = c_Style
    local offset = 0
    if style == HAND_LEFT_BOTH then
        offset = 50
    end
    local buff = {1083201, 1092401, 1092411}
    for local0 = 1, #buff, 1 do
        if env(1116, buff[local0] + offset) == TRUE then
            return TRUE
        end
    end
    return FALSE
end

function IsWepBrokenHeavyAtk()
    local hand = HAND_RIGHT
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    if env(311, hand) == 0 or env(262, hand) == TRUE then -- GetWeaponDurability, IsAbilityInsufficient
        local sp_kind = env("装備武器特殊カテゴリ番号取得", hand) -- GetEquipWeaponSpecialCategoryNumber
        if sp_kind == 158 or sp_kind == 738 or sp_kind == 739 or sp_kind == 740 or sp_kind == 741 then
            -- Moonlight Greatsword
            return TRUE
        elseif sp_kind == 162 then
            -- Profaned Greatsword
            return TRUE
        end
    end
    return FALSE
end

function IsWepBrokenParry(hand)
    if env(311, hand) == 0 or env(262, hand) == TRUE then -- GetWeaponDurability, IsAbilityInsufficient
        return TRUE
    else
        return FALSE
    end
end

function IsEnableJumpAtk()
    local style = c_Style
    local hand = HAND_RIGHT
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    if env(225, hand) == WEAPON_CATEGORY_STAFF then -- GetEquipWeaponCategory
        return FALSE
    else
        return TRUE
    end
end

function IsGuardbreakBlowDamage(damage_level)
    return FALSE
end

function IsLadderDamage(hand)
    local damage_flag = Flag_LadderDamage
    if damage_flag == LADDER_DAMAGE_SMALL then
        AddStamina(-30)
        if ExecLadderFall() == TRUE then
            return TRUE
        elseif hand == HAND_STATE_LEFT then
            ExecEvent("W_LadderDamageSmallLeft")
        else
            ExecEvent("W_LadderDamageSmallRight")
        end
    elseif damage_flag == LADDER_DAMAGE_LARGE then
        AddStamina(-40)
        if ExecLadderFall() == TRUE then
            return TRUE
        elseif hand == HAND_STATE_LEFT then
            ExecEvent("W_LadderDamageLargeLeft")
        else
            ExecEvent("W_LadderDamageLargeRight")
        end
    else
        Flag_LadderDamage = LADDER_DAMAGE_NONE
        return FALSE
    end
    Flag_LadderDamage = LADDER_DAMAGE_NONE
    return TRUE
end

function CalcDamageCount()
    if env(334, 8) == TRUE then -- GetBehaviorID
        SetVariable("UseChainRecover", 1)
        return 
    end
    local damagecount = GetVariable("DamageCount")
    SetVariable("DamageCount", damagecount + 1)
    SetVariable("UseChainRecover", 1)
end

function ResetDamageCount()
    SetVariable("DamageCount", 0)
    SetVariable("UseChainRecover", 0)
    return 
end

-----------------------------------------------
-- Guard 
-----------------------------------------------
function ExecGuard(event, blend_type)
    -- L1 pressed and L1 held for longer than 0 seconds
    if env(1106, ACTION_ARM_L1) == TRUE or env(1108, ACTION_ARM_L1) > 0 then
        -- Return if stamina is less or equal to 0
        if env(1001) <= 0 then
            return FALSE
        -- Proceed if weapon supports guarding
        elseif IsEnableGuard() == TRUE then
            local style = c_Style
            
            -- Handle weapon position
            local hand = HAND_LEFT
            
            if style == HAND_RIGHT_BOTH then
                hand = HAND_RIGHT
            end
            
            -- GetEquipWeaponCategory
            local kind = env(225, hand) 
            -- GetEquipWeaponSpecialCategoryNumber
            local sp_kind = env("装備武器特殊カテゴリ番号取得", hand) 
            -- GetGuardMotionCategory
            local guardindex = env(278, hand) 
            
            -- Handle Torch guarding
            if kind == WEAPON_CATEGORY_TORCH and style == HAND_RIGHT then
                guardindex = GUARD_STYLE_TORCH
            -- Handle Follower Torch guarding
            elseif sp_kind == 240 and style == HAND_RIGHT then
                guardindex = GUARD_STYLE_TORCH
            -- Weapon Hold Position - 2H is not 'Idle Hold - 2H Shield' and style is 2H
            elseif (style == HAND_RIGHT_BOTH or style == HAND_LEFT_BOTH) and env("待機アニメカテゴリ取得") ~= 15 then 
                guardindex = GUARD_STYLE_DEFAULT
            end
            
            SetVariable("IndexGuardStyle", guardindex)
            
            if blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
                blend_type = UPPER
            end
            
            --------------------
            -- Sidearms
            --------------------
            if IsSidearm() == TRUE and style ~= HAND_RIGHT_BOTH then
                l1 = "W_AttackLeftLight1"
                
                -- Bone Marrow Ash
                if env(1116, 112440) == TRUE then
                    act(2002, 112441)
                end

                -- Per Sidearm Effects
                if IsCannon() == TRUE then
                    if 80 > env(1001) then
                        l1 = "W_AttackLeftHeavy2"
                    end
                end
                
                if IsChurchCannon() == TRUE then
                    if 80 > env(1001) then
                        l1 = "W_AttackLeftHeavy2"
                    end
                end
                
                if IsHunterPistol() == TRUE then
                    if 30 > env(1001) then
                        l1 = "W_AttackLeftHeavy2"
                    end
                end
                
                if IsRepeatingPistol() == TRUE then
                    if 35 > env(1001) then
                        l1 = "W_AttackLeftHeavy2"
                    end
                end
                
                if IsEvelynn() == TRUE then
                    if 40 > env(1001) then
                        l1 = "W_AttackLeftHeavy2"
                    end
                end
                
                if IsBlunderbuss() == TRUE then
                    if 50 > env(1001) then
                        l1 = "W_AttackLeftHeavy2"
                    end
                end
                
                if IsRosamarinus() == TRUE then
                    if 15 > env(1001) then
                        l1 = "W_AttackLeftHeavy2"
                    end
                end
                
                if IsFistOfGratia() == TRUE then
                    if 60 > env(1001) then
                        l1 = "W_AttackLeftHeavy2"
                    end
                end
                
                -- Allow the AI to always fire
                if env(1007) == TRUE then -- IsCOMPlayer
                    l1 = "W_AttackLeftLight1"
                    
                    -- Boost AI damage with sidearms
                    act(2002, 112450)
                end
                
                -- FP Pause
                act(2002, 113002) 
                        
                ExecEventAllBody(l1)
                
                return FALSE
            end
            
            --------------------
            -- Bell of Grace
            --------------------
            if IsBellOfGrace() == TRUE then
                AddStamina(-10)
                ExecEventAllBody("W_Jump")
                
                return FALSE
            end
            
            --------------------
            -- Horsehoof Ring
            --------------------
            if env(1116, 112090) == TRUE then
                if style == HAND_RIGHT_BOTH then
                    ExecEventAllBody("W_AttackBothLightKick")
                else
                    ExecEventAllBody("W_AttackRightLightKick")
                end
                
                return FALSE
            end
            
            -- Play guard event
            ExecEventHalfBlend(event, blend_type)
            
            return TRUE
        end
    end
    
    return FALSE
end

-----------------------------------------------
-- Stop 
-----------------------------------------------
function ExecStop()
    -- Player is not still
    if 0 < GetVariable("MoveSpeedLevel") and env(1116, 100200) == FALSE then
        return FALSE
    end
    
    local stop_speed = GetVariable("MoveSpeedLevelReal")
    local movedirection = GetVariable("MoveDirection")
    SetVariable("ArtsTransition", 0)
    
    if 0 <= stop_speed and stop_speed <= 1 then
        if stop_speed <= 0.349999994039536 then
            ExecEventAllBody("W_Idle")
        elseif movedirection == 0 then
            ExecEventHalfBlend(Event_RunStopFront, ALLBODY)
        elseif movedirection == 1 then
            ExecEventHalfBlend(Event_RunStopBack, ALLBODY)
        elseif movedirection == 2 then
            ExecEventHalfBlend(Event_RunStopLeft, ALLBODY)
        elseif movedirection == 3 then
            ExecEventHalfBlend(Event_RunStopRight, ALLBODY)
        end
    elseif 1 < stop_speed then
        ExecEventHalfBlend(Event_DashStop, ALLBODY)
    else
        ExecEventAllBody("W_Idle")
    end
    
    return TRUE
end

-----------------------------------------------
-- Stop Blend
-----------------------------------------------
function ExecStopHalfBlend(event, to_idle)
    -- Player is not still
    if 0 < GetVariable("MoveSpeedLevel") and env(1116, 100200) == FALSE then
        return FALSE
    else
        SetVariable("LocomotionState", 0)
        
        if to_idle == TRUE then
            ExecEventNoReset("W_Idle")
            return TRUE
        else
            ExecEventHalfBlendNoReset(event, LOWER)
            return TRUE
        end
    end
end

-----------------------------------------------
-- Move Start
-----------------------------------------------
function MoveStart(blend_type, event, gen_hand)
    -- Player is not moving
    if GetVariable("MoveSpeedLevel") <= 0 then
        return FALSE
    -- Player is still
    elseif env(1116, 100200) == TRUE then
        return FALSE
    elseif blend_type ~= LOWER then
        if gen_hand == FALSE then
            SetVariable("ArtsTransition", 0)
        else
            SetArtsGeneratorTransitionIndex(gen_hand, TRUE)
        end
    end
    
    if GetLocomotionState() ~= PLAYER_STATE_MOVE then
        SetVariable("MoveSpeedLevelReal", 0)
        SpeedUpdate()
    end
    
    if blend_type == ALLBODY and event[2] == MOVE_DEF0 then
        local guard_event = Event_GuardStart
        
        if IsNodeActive("Rolling_CMSG", "RollingSelftrans_CMSG", "EStepDown_CMSG") == TRUE then
            guard_event = Event_GuardStartLong
        end
        
        if ExecGuard(guard_event, UPPER) == TRUE then
            blend_type = LOWER
        end
    end
    
    ExecEventHalfBlend(event, blend_type)
    
    return TRUE
end

-----------------------------------------------
-- Move Start Cancel
-----------------------------------------------
function MoveStartonCancelTiming(event, gen_hand)
    -- IsMoveCancelPossible
    if env(2000) == TRUE then 
        if GetLocomotionState() == PLAYER_STATE_MOVE then
            if MoveStart(UPPER, event, gen_hand) == TRUE then
                return TRUE
            end
        elseif MoveStart(ALLBODY, event, gen_hand) == TRUE then
            return TRUE
        end
    end
    
    return FALSE
end

-----------------------------------------------
-- Attack
-----------------------------------------------
function ExecAttack(r1, r2, l1, l2, b1, b2, is_guard, blend_type, artsr1, artsr2)
    if c_HasActionRequest == FALSE then
        return FALSE
    elseif env(1001) <= 0 then -- GetStamina
        return FALSE
    end
    
    local request = GetAttackRequest(is_guard)
    if request == ATTACK_REQUEST_INVALID then
        return FALSE
    end
    
    local style = c_Style
    local atk_hand = HAND_RIGHT
    local is_find_atk = TRUE
    local is_atk_auto_aim = TRUE
    
    -----------------------
    -- FP Pause
    -----------------------
    if env(1116, 112201) == FALSE then
        -- Regular attacks
        if request == ATTACK_REQUEST_RIGHT_LIGHT or request == ATTACK_REQUEST_LIGHT_KICK or request == ATTACK_REQUEST_RIGHT_HEAVY or request == ATTACK_REQUEST_HEAVY_KICK or request == ATTACK_REQUEST_LEFT_LIGHT or request == ATTACK_REQUEST_LEFT_HEAVY or request == ATTACK_REQUEST_LEFT_HEAVY_SP or request == ATTACK_REQUEST_BOTH_LIGHT or request == ATTACK_REQUEST_BOTH_LEFT or request == ATTACK_REQUEST_BOTH_HEAVY or request == ATTACK_REQUEST_ARROW_BOTH_RIGHT or request == ATTACK_REQUEST_ARROW_BOTH_LEFT then
            -- Ring of Londor
            if env(1116, 112200) == FALSE then
                act(2002, 113001)
            end
        -- All other attacks
        else
            act(2002, 113002) 
        end
    end
    
    -- Restraint: Kick
    if env(1116, 112925) == TRUE then
        if request == ATTACK_REQUEST_LIGHT_KICK or request == ATTACK_REQUEST_HEAVY_KICK then
            return ATTACK_REQUEST_INVALID
        end
    end
    
    -----------------------
    -- Shatter
    -----------------------
    local shatter_chance = 0
    local roll = math.random(0, 100)
    
    -- Old Man's Gambit
    if IsOldMansGambit() == TRUE then
        -- Add chance for current ring
        if env(1116, 112360) == TRUE then
            shatter_chance = shatter_chance + 5
        elseif env(1116, 112361) == TRUE then
            shatter_chance = shatter_chance + 6
        elseif env(1116, 112362) == TRUE then
            shatter_chance = shatter_chance + 7
        elseif env(1116, 112363) == TRUE then
            shatter_chance = shatter_chance + 8
        elseif env(1116, 112364) == TRUE then
            shatter_chance = shatter_chance + 9
        elseif env(1116, 112365) == TRUE then
            shatter_chance = shatter_chance + 10
        end
    end
    
    -- Shatter Window for Gower's Ring of Retribution
    if env(1116, 112506) == TRUE then
        -- Add chance for current ring
        if env(1116, 112500) == TRUE then
            shatter_chance = shatter_chance + 10
        elseif env(1116, 112501) == TRUE then
            shatter_chance = shatter_chance + 12
        elseif env(1116, 112502) == TRUE then
            shatter_chance = shatter_chance + 14
        elseif env(1116, 112503) == TRUE then
            shatter_chance = shatter_chance + 16
        elseif env(1116, 112504) == TRUE then
            shatter_chance = shatter_chance + 18
        elseif env(1116, 112505) == TRUE then
            shatter_chance = shatter_chance + 20
        end
    end
    
    -- Twin Princes Boon
    if env(1116, 112592) == TRUE then
        shatter_chance = shatter_chance + 2
    end
    
    -- Apply Shatter if lucky
    if roll < shatter_chance then
         act(2002, 113510)
    end
    
    -----------------------
    -- Sidearms
    -----------------------
    -- Sidearms
    local sidearm_sp_kind = env(345, HAND_LEFT)
    local sidearm_can_fire = false
    
    act(2006, 0) -- SetDamageMotionBlendRatio
    
    -- IsSpecialTransitionPossible
    if env(271) == TRUE then
        r1 = "W_AttackRightLight1"
        r2 = "W_AttackRightHeavy1Start"
        l1 = "W_AttackLeftLight1"
        l2 = "W_AttackLeftHeavy1"
        b1 = "W_AttackBothLight1"
        b2 = "W_AttackBothHeavy1Start"
    end
    
    -----------------------
    -- Rings
    -----------------------
    -- Ring of Blades
    if env(1116, 115000) == TRUE then
        act(2002, 115010)
    elseif env(1116, 115001) == TRUE then
        act(2002, 115011)
    elseif env(1116, 115002) == TRUE then
        act(2002, 115012)
    elseif env(1116, 115003) == TRUE then
        act(2002, 115013)
    elseif env(1116, 115004) == TRUE then
        act(2002, 115014)
    elseif env(1116, 115005) == TRUE then
        act(2002, 115015)
    end
    
    -- Sigil of Magic
    if env(1116, 115020) == TRUE then
        act(2002, 115030)
    elseif env(1116, 115021) == TRUE then
        act(2002, 115031)
    elseif env(1116, 115022) == TRUE then
        act(2002, 115032)
    elseif env(1116, 115023) == TRUE then
        act(2002, 115033)
    elseif env(1116, 115024) == TRUE then
        act(2002, 115034)
    elseif env(1116, 115025) == TRUE then
        act(2002, 115035)
    end
    
    -- Sigil of Flame
    if env(1116, 115040) == TRUE then
        act(2002, 115050)
    elseif env(1116, 115041) == TRUE then
        act(2002, 115051)
    elseif env(1116, 115042) == TRUE then
        act(2002, 115052)
    elseif env(1116, 115043) == TRUE then
        act(2002, 115053)
    elseif env(1116, 115044) == TRUE then
        act(2002, 115054)
    elseif env(1116, 115045) == TRUE then
        act(2002, 115055)
    end
    
    -- Sigil of Thunder
    if env(1116, 115060) == TRUE then
        act(2002, 115070)
    elseif env(1116, 115061) == TRUE then
        act(2002, 115071)
    elseif env(1116, 115062) == TRUE then
        act(2002, 115072)
    elseif env(1116, 115063) == TRUE then
        act(2002, 115073)
    elseif env(1116, 115064) == TRUE then
        act(2002, 115074)
    elseif env(1116, 115065) == TRUE then
        act(2002, 115075)
    end
    
    -- Sigil of Darkness
    if env(1116, 115080) == TRUE then
        act(2002, 115090)
    elseif env(1116, 115081) == TRUE then
        act(2002, 115091)
    elseif env(1116, 115082) == TRUE then
        act(2002, 115092)
    elseif env(1116, 115083) == TRUE then
        act(2002, 115093)
    elseif env(1116, 115084) == TRUE then
        act(2002, 115094)
    elseif env(1116, 115085) == TRUE then
        act(2002, 115095)
    end
    
    --------------------------------------------
    -- R1
    --------------------------------------------
    if request == ATTACK_REQUEST_RIGHT_LIGHT then
        if artsr1 == TRUE then
            SetSwordArtsPointInfo(ACTION_ARM_R1, TRUE)
        end
        if IsArtsSpAtk() == TRUE and r1 == "W_AttackRightLightStep" then
            r1 = "W_AttackRightLightStepSpecial"
        end
	    local hand = HAND_RIGHT
		if style == HAND_LEFT_BOTH then
				hand = HAND_LEFT
		end				
		local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)		
        if sp_kind == 752 or sp_kind == 754 then
            if r1 == "W_AttackRightLight1" then
                r1 = "W_AttackRightLight1Alt"
            elseif r1 == "W_AttackRightLightDash" then
                r1 = "W_AttackRightLightDashAlt"
			elseif r1 == "W_AttackRightLightStep" then
                r1 = "W_AttackRightLightStepAlt"
			end
        end        
        ExecEventAllBody(r1)
    --------------------------------------------
    -- R1 + Forward
    --------------------------------------------
    elseif request == ATTACK_REQUEST_LIGHT_KICK then
        if HAND_LEFT_BOTH <= style then
            ExecEventAllBody("W_AttackBothLightKick")
        else
            ExecEventAllBody("W_AttackRightLightKick")
        end
    --------------------------------------------
    -- R2
    --------------------------------------------
    elseif request == ATTACK_REQUEST_RIGHT_HEAVY then
        if artsr2 == TRUE then
            SetSwordArtsPointInfo(ACTION_ARM_R2, TRUE)
        end
        
        -- Set weapond hand position
	    local hand = HAND_RIGHT
		if style == HAND_LEFT_BOTH then
            hand = HAND_LEFT
		end
        
		local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)		
        
        if IsWarcrySpAtk() == TRUE or sp_kind == 738 or sp_kind == 739 or sp_kind == 740 or sp_kind == 741 or sp_kind == 600 or sp_kind == 717 or sp_kind == 744 or sp_kind == 745 then
            if r2 == "W_AttackRightHeavy1Start" then
                r2 = "W_AttackRightHeavySpecial1Start"
            elseif r2 == "W_AttackRightHeavy1SubStart" then
                r2 = "W_AttackRightHeavySpecial1SubStart"
            elseif r2 == "W_AttackRightHeavy2Start" then
                r2 = "W_AttackRightHeavySpecial2Start"
            end
        elseif IsWepBrokenHeavyAtk() == TRUE then
            if r2 == "W_AttackRightHeavy1Start" then
                r2 = "W_AttackRightHeavyWepBroken1Start"
            elseif r2 == "W_AttackRightHeavy1SubStart" then
                r2 = "W_AttackRightHeavyWepBroken1SubStart"
            elseif r2 == "W_AttackRightHeavy2Start" then
                r2 = "W_AttackRightHeavyWepBroken2Start"
            end
        end
		
		if sp_kind == 752 or sp_kind == 754 then
            if r2 == "W_AttackRightHeavy1Start" then
                r2 = "W_AttackRightHeavy1StartAlt"
            elseif r2 == "W_AttackRightHeavy1SubStart" then
                r2 = "W_AttackRightHeavy1SubStartAlt"
            elseif r2 == "W_AttackRightHeavy2Start" then
                r2 = "W_AttackRightHeavy2StartAlt"
            end		
        end
        ExecEventAllBody(r2)
    --------------------------------------------
    -- R2 + Forward
    --------------------------------------------
    elseif request == ATTACK_REQUEST_HEAVY_KICK then
        if HAND_LEFT_BOTH <= style then
            if IsArtsSpAtk() == TRUE then
                ExecEventAllBody("W_AttackBothHeavyKickSpecial")
            else
                ExecEventAllBody("W_AttackBothHeavyKick")
            end
        elseif IsArtsSpAtk() == TRUE then
            ExecEventAllBody("W_AttackRightHeavyKickSpecial")
        else
            ExecEventAllBody("W_AttackRightHeavyKick")
        end
    --------------------------------------------
    -- L1
    --------------------------------------------
    elseif request == ATTACK_REQUEST_LEFT_LIGHT then
        atk_hand = HAND_LEFT
        
        ExecEventAllBody(l1)
    --------------------------------------------
    -- L2
    --------------------------------------------
    elseif request == ATTACK_REQUEST_LEFT_HEAVY then
        atk_hand = HAND_LEFT
        
        ExecEventAllBody(l2)
    --------------------------------------------
    -- L2 (Special)
    --------------------------------------------
    elseif request == ATTACK_REQUEST_LEFT_HEAVY_SP then
        atk_hand = HAND_LEFT
        if l2 == "W_AttackLeftHeavy2" then
            l2 = "W_AttackLeftHeavySp2"
        elseif l2 == "W_AttackLeftHeavy3" then
            l2 = "W_AttackLeftHeavySp3"
        else
            l2 = "W_AttackLeftHeavySp1"
        end
        
        ExecEventAllBody(l2)
    --------------------------------------------
    -- 2H - R1
    --------------------------------------------
    elseif request == ATTACK_REQUEST_BOTH_LIGHT then
        if artsr1 == TRUE then
            SetSwordArtsPointInfo(ACTION_ARM_R1, TRUE)
        end
        if IsArtsSpAtk() == TRUE and b1 == "W_AttackBothLightStep" then
            b1 = "W_AttackBothLightStepSpecial"
        end
	    local hand = HAND_RIGHT
		if style == HAND_LEFT_BOTH then
				hand = HAND_LEFT
		end				
		local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)		
        if sp_kind == 752 or sp_kind == 754 or sp_kind == 751 then
            if b1 == "W_AttackBothLight1" then
                b1 = "W_AttackBothLight1Alt"
            elseif b1 == "W_AttackBothDash" then
                b1 = "W_AttackBothDashAlt"
			elseif b1 == "W_AttackBothLightStep" then
                b1 = "W_AttackBothLightStepAlt"
			end
        end     		
		       
        ExecEventAllBody(b1)
    --------------------------------------------
    -- 2H - L1
    --------------------------------------------
    elseif request == ATTACK_REQUEST_BOTH_LEFT then
        if r1 == "W_AttackRightLightDash" then
            l1 = "W_AttackBothLeftDash"
        elseif r1 == "W_AttackRightLightStep" then
            l1 = "W_AttackBothLeftStep"
        elseif l1 == "W_AttackLeftLight1" then
            l1 = "W_AttackBothLeft1"
        elseif l1 == "W_AttackLeftLight2" then
            l1 = "W_AttackBothLeft2"
        end

        ExecEventAllBody(l1)
    --------------------------------------------
    -- 2H - R2
    --------------------------------------------
    elseif request == ATTACK_REQUEST_BOTH_HEAVY then
        if artsr2 == TRUE then
            SetSwordArtsPointInfo(ACTION_ARM_R2, TRUE)
        end
        
	    local hand = HAND_RIGHT
		if style == HAND_LEFT_BOTH then
				hand = HAND_LEFT
		end
        
		local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)	
        
        if IsWarcrySpAtk() == TRUE or sp_kind == 738 or sp_kind == 739 or sp_kind == 740 or sp_kind == 741 or sp_kind == 600 or sp_kind == 717 or sp_kind == 718 or sp_kind == 743 or sp_kind == 745 or sp_kind == 747 or sp_kind == 711 then
            if b2 == "W_AttackBothHeavy1Start" then
                b2 = "W_AttackBothHeavySpecial1Start"
            elseif b2 == "W_AttackBothHeavy1SubStart" then
                b2 = "W_AttackBothHeavySpecial1SubStart"
            elseif b2 == "W_AttackBothHeavy2Start" then
                b2 = "W_AttackBothHeavySpecial2Start"
            end			
        elseif IsWepBrokenHeavyAtk() == TRUE then
            if b2 == "W_AttackBothHeavy1Start" then
                b2 = "W_AttackBothHeavyWepBroken1Start"
            elseif b2 == "W_AttackBothHeavy1SubStart" then
                b2 = "W_AttackBothHeavyWepBroken1SubStart"
            elseif b2 == "W_AttackBothHeavy2Start" then
                b2 = "W_AttackBothHeavyWepBroken2Start"
            end
        end
		
		if sp_kind == 752 or sp_kind == 754 or sp_kind == 750 or sp_kind == 751 then
            if b2 == "W_AttackBothHeavy1Start" then
                b2 = "W_AttackBothHeavy1StartAlt"
            elseif b2 == "W_AttackBothHeavy1SubStart" then
                b2 = "W_AttackBothHeavy1SubStartAlt"
            elseif b2 == "W_AttackBothHeavy2Start" then
                b2 = "W_AttackBothHeavy2StartAlt"
            end		
        end        
        ExecEventAllBody(b2)
    --------------------------------------------
    -- Bow - R1
    --------------------------------------------
    elseif request == ATTACK_REQUEST_ARROW_BOTH_RIGHT then
        if ExecHandChange(HAND_RIGHT, TRUE, blend_type) == TRUE then
            return TRUE
        else
            return FALSE
        end
    --------------------------------------------
    -- Bow - L1
    --------------------------------------------
    elseif request == ATTACK_REQUEST_ARROW_BOTH_LEFT then
        if ExecHandChange(HAND_LEFT, TRUE, blend_type) == TRUE then
            return TRUE
        else
            return FALSE
        end
    --------------------------------------------
    -- ?
    --------------------------------------------
    elseif request == ATTACK_REQUEST_LEFT_REVERSAL then
        ExecEventAllBody("W_AttackLeftReversal")
    --------------------------------------------
    -- L2 - Left Weapon (e.g. WA: Parry)
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_LEFT_PARRY then
        is_find_atk = FALSE
        atk_hand = HAND_LEFT
        
        SetBaseCategory()
        
        if IsWepBrokenParry(HAND_LEFT) == TRUE then
            ExecEventAllBody("W_ParryLeftStart_WepBreak")
        else
            ExecEventAllBody("W_ParryLeftStart")
        end
    --------------------------------------------
    -- L2 - Left Weapon  (e.g. WA: Steady Chant)
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_LEFT_MAGICBUFF then
        is_find_atk = FALSE
        is_atk_auto_aim = FALSE
        atk_hand = HAND_LEFT
        
        SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
        
        if blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
            blend_type = UPPER
        end
        
        ExecEventHalfBlend(Event_MagicBuffLeft, blend_type)
    --------------------------------------------
    -- L2 - Left Weapon  (e.g. WA: Tackle)
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_LEFT_CROSSBOWSTEPIN then
        return FALSE
    --------------------------------------------
    -- L2 - Left Weapon  (e.g. WA: One Shot)
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_LEFT_ONESHOTFULL then
        SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
        atk_hand = HAND_LEFT
        SetBaseCategory()
        ExecEventAllBody("W_OneShotFullLeftStart")
    --------------------------------------------
    -- L2 - Left Weapon  (e.g. WA: Gentle Prayer)
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_LEFT_MAGICBUFFPRAY then
        SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, FALSE)
        ExecEventHalfBlend(Event_MagicBuffLeft, ALLBODY)
    --------------------------------------------
    -- L2 - Left Weapon  (e.g. WA: Feasting Branch)
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_LEFT_MAGICBUFFATTACK then
        atk_hand = HAND_LEFT
        SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
        
        -- GetEquipWeaponSpecialCategoryNumber
        local sp_kind_left = env("装備武器特殊カテゴリ番号取得", HAND_LEFT) 
        -- GetEquipWeaponSpecialCategoryNumber
        local sp_kind_right = env("装備武器特殊カテゴリ番号取得", HAND_RIGHT) 
        local dual = FALSE
        local style = c_Style
        
         -- Preacher's Right Arm
        if sp_kind_left == 265 and sp_kind_right == 265 then
            dual = TRUE
        end
        
         -- Feasting Branch attacks
        if dual == TRUE and style == HAND_RIGHT then
            if IsNodeActive("MagicBuffLeft_Upper_Selector") == TRUE then
                ExecEventAllBody("W_MagicBuffRight3")
            elseif IsNodeActive("MagicBuffLeft2_Selector") == TRUE then
                ExecEventAllBody("W_MagicBuffRight2")
            elseif IsNodeActive("MagicBuffLeft3_Selector") == TRUE then
                ExecEventAllBody("W_MagicBuffRight3")
            elseif IsNodeActive("MagicBuffRight_Upper_Selector") == TRUE then
                ExecEventAllBody("W_MagicBuffLeft3")
            elseif IsNodeActive("MagicBuffRight2_Selector") == TRUE then
                ExecEventAllBody("W_MagicBuffLeft2")
            elseif IsNodeActive("MagicBuffRight3_Selector") == TRUE then
                ExecEventAllBody("W_MagicBuffLeft3")
            else
                ExecEventHalfBlend(Event_MagicBuffRight, ALLBODY)
            end
        elseif IsNodeActive("MagicBuffLeft_Upper_Selector") == TRUE then
            ExecEventAllBody("W_MagicBuffLeft2")
        elseif IsNodeActive("MagicBuffLeft2_Selector") == TRUE then
            ExecEventAllBody("W_MagicBuffLeft3")
        elseif IsNodeActive("MagicBuffLeft3_Selector") == TRUE then
            ExecEventAllBody("W_MagicBuffLeft2")
        else
            ExecEventHalfBlend(Event_MagicBuffLeft, ALLBODY)
        end
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: Stance)
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_STEPIN or request == SWORDARTS_REQUEST_LEFT_STEPIN then
        is_find_atk = FALSE
        SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
        
        if IsNodeActive("StepInRightStart_CMSG", "StepInRightUppercut", "StepInRightSlash") ~= TRUE then
            SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, FALSE)
        end
        
        AddStamina(-25)
        ExecEventHalfBlend(Event_StepInRightStart, ALLBODY)
    --------------------------------------------
    -- L2 - Right Weapon (e.g. WA: Parry)
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_PARRY then
        is_find_atk = FALSE
        local hand = HAND_RIGHT
        local style = c_Style
        
        if style == HAND_LEFT_BOTH then
            hand = HAND_LEFT
        end
        
        if IsWepBrokenParry(hand) == TRUE then
            ExecEventAllBody("W_ParryRightStart_WepBreak")
        else
            ExecEventAllBody("W_ParryRightStart")
        end
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: Spin Slash)
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_SPIN or request == SWORDARTS_REQUEST_LEFT_SPIN then
        is_find_atk = FALSE
        
        SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
        AddStamina(-35)
        SetVariable("SpinAngle", GetVariable("MoveAngle"))
        ExecEventAllBody("W_SpinRightStart")
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: )
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_STRONGBASH or request == SWORDARTS_REQUEST_LEFT_STRONGBASH then
        is_find_atk = FALSE
        ExecEventAllBody("W_StrongBashRightStart")
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: )
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_DOUBLEATTACK or request == SWORDARTS_REQUEST_LEFT_DOUBLEATTACK then
        ExecEventAllBody("W_DoubleAttackRightStart")
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: )
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_STAMPEDE or request == SWORDARTS_REQUEST_LEFT_STAMPEDE then
        ExecEventAllBody("W_StampedeRightStart")
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: )
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_SPECIALATTACK or request == SWORDARTS_REQUEST_LEFT_SPECIALATTACK then
        ExecEventAllBody("W_SpecialAttackRightStart")
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: )
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_ATTACKSPIN or request == SWORDARTS_REQUEST_LEFT_ATTACKSPIN then
        SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
        
        if IsNodeActive("AttackSpinStart_CMSG", "AttackSpinLight_CMSG", "AttackSpinHeavy_CMSG") ~= TRUE then
            SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, FALSE)
        end
        
		local hand = HAND_RIGHT
        local style = c_Style
        
        if style == HAND_LEFT_BOTH then
            hand = HAND_LEFT
        end
        
        -- Frostfall
		if env(345, hand) == 604 then
			ExecEventHalfBlend(Event_AttackSpinStart, UPPER)
			return
		else
			ExecEventHalfBlend(Event_AttackSpinStart, ALLBODY)
		end
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: Warcry)
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_WARCRY or request == SWORDARTS_REQUEST_LEFT_WARCRY then
        is_find_atk = FALSE
        is_atk_auto_aim = FALSE
        SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)

        -- Writhing Hammer: Low FP
        if env(345, HAND_RIGHT) == 280 and env(2016) < 50 then 
            ExecEventAllBody("W_EndureRightHeavy")
            return FALSE
        -- Quarterstaff: Low FP
        elseif env(345, HAND_RIGHT) == 294 and env(2016) < 85 then 
            ExecEventAllBody("W_EndureRightHeavy")
            return FALSE
		else
            ExecEventAllBody("W_Warcry")
        end
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: Charge)
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_CHARGE or request == SWORDARTS_REQUEST_LEFT_CHARGE then
        SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
        ExecEventHalfBlend(Event_Charge, ALLBODY)
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: Perserverence)
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_ENDURE or request == SWORDARTS_REQUEST_LEFT_ENDURE then
        is_find_atk = FALSE
        SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
        ExecEventHalfBlend(Event_Endure, ALLBODY)
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, FALSE)
    --------------------------------------------
    -- L2 - Right Weapon (e.g. WA: Steady Chant)
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_MAGICBUFF then
        SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
        if blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
            blend_type = UPPER
        end
        ExecEventHalfBlend(Event_MagicBuffRight, blend_type)
    --------------------------------------------
    -- L2 - Right Weapon (e.g. WA: Feasting Branch)
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_MAGICBUFFATTACK then
        SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
        
        local sp_kind_left = env("装備武器特殊カテゴリ番号取得", HAND_LEFT)
        local sp_kind_right = env("装備武器特殊カテゴリ番号取得", HAND_RIGHT)
        local dual = FALSE
        local style = c_Style
        
        -- Preacher's Right Arm
        if sp_kind_left == 265 and sp_kind_right == 265 then
            dual = TRUE
        end
        
        -- Feasting Branch attacks
        if dual == TRUE and style == HAND_RIGHT then
            if IsNodeActive("MagicBuffRight_Upper_Selector") == TRUE then
                ExecEventAllBody("W_MagicBuffLeft3")
            elseif IsNodeActive("MagicBuffRight2_Selector") == TRUE then
                ExecEventAllBody("W_MagicBuffLeft2")
            elseif IsNodeActive("MagicBuffRight3_Selector") == TRUE then
                ExecEventAllBody("W_MagicBuffLeft3")
            elseif IsNodeActive("MagicBuffLeft_Upper_Selector") == TRUE then
                ExecEventAllBody("W_MagicBuffRight3")
            elseif IsNodeActive("MagicBuffLeft2_Selector") == TRUE then
                ExecEventAllBody("W_MagicBuffRight2")
            elseif IsNodeActive("MagicBuffLeft3_Selector") == TRUE then
                ExecEventAllBody("W_MagicBuffRight3")
            else
                ExecEventHalfBlend(Event_MagicBuffRight, ALLBODY)
            end
        elseif IsNodeActive("MagicBuffRight_Upper_Selector") == TRUE then
            ExecEventAllBody("W_MagicBuffRight2")
        elseif IsNodeActive("MagicBuffRight2_Selector") == TRUE then
            ExecEventAllBody("W_MagicBuffRight3")
        elseif IsNodeActive("MagicBuffRight3_Selector") == TRUE then
            ExecEventAllBody("W_MagicBuffRight2")
        else
            ExecEventHalfBlend(Event_MagicBuffRight, ALLBODY)
        end
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: )
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_LEFT_DAGGERSTANCE or request == SWORDARTS_REQUEST_RIGHT_DAGGERSTANCE then
        if IsNodeActive("AttackRight_Script") == TRUE or IsNodeActive("AttackBoth_Script") == TRUE then
            if GetLocomotionState() == PLAYER_STATE_IDLE then
                SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
                
                local rightarmlocation = RightArmLocation()
                
                if rightarmlocation == 0 then
                    ExecEventAllBody("W_DrawStanceRightComboStartRight")
                else
                    ExecEventAllBody("W_DrawStanceRightComboStartLeft")
                end
            else
                return FALSE
            end
        elseif 1.5 < GetVariable("MoveSpeedLevel") then
            SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
            local rightarmlocation = RightArmLocation()
            ExecEventAllBody("W_DrawStanceStartDash")
        elseif IsNodeActive("Rolling_CMSG") == TRUE and env(301, 0) == TRUE then -- GetEventEzStateFlag
            SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
            local rightarmlocation = RightArmLocation()
            ExecEventAllBody("W_DrawStanceStartRolling")
        else
            return FALSE
        end
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: )
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_SAMAGIC or request == SWORDARTS_REQUEST_LEFT_SAMAGIC then
        return FALSE
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: )
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_LEFT_DRAWSTANCE or request == SWORDARTS_REQUEST_RIGHT_DRAWSTANCE then
        return FALSE
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: )
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_LEFT_CHAINSHOT or request == SWORDARTS_REQUEST_RIGHT_CHAINSHOT then
        return FALSE
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: )
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_LEFT_WIDESHOT or request == SWORDARTS_REQUEST_RIGHT_WIDESHOT then
        return FALSE
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: )
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_LEFT_STRONGSHOT or request == SWORDARTS_REQUEST_RIGHT_STRONGSHOT then
        return FALSE
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: )
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_SAMAGICMEDIUM or request == SWORDARTS_REQUEST_LEFT_SAMAGICMEDIUM then
        return FALSE
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: )
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_SAMAGICSTRONG or request == SWORDARTS_REQUEST_LEFT_SAMAGICSTRONG then
        return FALSE
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: Quickstep)
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_CIRCLESTEP or request == SWORDARTS_REQUEST_LEFT_CIRCLESTEP then
        is_find_atk = FALSE
        is_atk_auto_aim = FALSE
        local angle = GetVariable("MoveAngle")
        
        if GetWeightIndex(FALSE) == EVASION_WEIGHT_INDEX_OVERWEIGHT then
            local event = "W_RollingOverweightFront"
            
            if 135 < math.abs(angle) then
                event = "W_RollingOverweightBack"
            elseif 45 < angle then
                event = "W_RollingOverweightRight"
            elseif angle < -45 then
                event = "W_RollingOverweightLeft"
            end
            
            ExecEventAllBody(event)
        else
            local front, back, left, right = false
            if 135 < math.abs(angle) then
                back = true
            elseif 45 < angle then
                right = true
            elseif angle < -45 then
                left = true
            else
                front = true
            end
            SetVariable("EnableTAE_CircleStepFront", front)
            SetVariable("EnableTAE_CircleStepBack", back)
            SetVariable("EnableTAE_CircleStepLeft", left)
            SetVariable("EnableTAE_CircleStepRight", right)
            SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
            
            if IsNodeActive("CircleStepStart_Blend") == TRUE then
                if angle >= 0 then
                    SetVariable("CircleStepDirectionSelftrans", 1)
                else
                    SetVariable("CircleStepDirectionSelftrans", 0)
                end
                
                SetVariable("CircleStepAngleSelftrans", angle)
                ExecEventAllBody("W_CircleStepStartSelftrans")
            else
                if angle >= 0 then
                    SetVariable("CircleStepDirection", 1)
                else
                    SetVariable("CircleStepDirection", 0)
                end
                
                SetVariable("CircleStepAngle", angle)
                ExecEventAllBody("W_CircleStepStart")
            end
        end
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: )
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_CHARGESHOT or request == SWORDARTS_REQUEST_LEFT_CHARGESHOT then
        is_find_atk = FALSE
        is_atk_auto_aim = FALSE
        ExecEventHalfBlend(Event_ChargeShotRightStart, ALLBODY)
    --------------------------------------------
    -- L2 - Right Weapon (e.g. WA: )
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_CROSSBOWSTEPIN then
        is_find_atk = FALSE
        SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, FALSE)
        ExecEventHalfBlend(Event_CrossbowStepInRightStart, ALLBODY)
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: Neck Swipe)
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_HEADHUNT or request == SWORDARTS_REQUEST_LEFT_HEADHUNT then
        SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, FALSE)
        ExecEventHalfBlend(Event_HeadHunt, ALLBODY)
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: )
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_ONESHOT or request == SWORDARTS_REQUEST_LEFT_ONESHOT then
        SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, FALSE)
        ExecEventHalfBlend(Event_OneShot, ALLBODY)
    --------------------------------------------
    -- L2 - Right Weapon (e.g. WA: )
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_ONESHOTFULL then
        SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
        
        if style == HAND_RIGHT then
            ExecEventAllBody("W_OneShotFullRightStart")
        else
            ExecEventAllBody("W_OneShotFullBothStart")
        end
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: )
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_ONESHOT_NOGENTRANS or request == SWORDARTS_REQUEST_LEFT_ONESHOT_NOGENTRANS then
        SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
        ExecEventAllBody("W_OneShotNoGenTransStart")
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: Storm King)
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_STORMSTANCE or request == SWORDARTS_REQUEST_LEFT_STORMSTANCE then
        return FALSE
    --------------------------------------------
    -- L2 - Right Weapon (e.g. WA: Gentle Prayer)
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_MAGICBUFFPRAY then
        SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, FALSE)
        ExecEventHalfBlend(Event_MagicBuffRight, ALLBODY)
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: )
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_FOURWAYATTACK or request == SWORDARTS_REQUEST_LEFT_FOURWAYATTACK then
        local angle = GetVariable("MoveAngle")
        if GetWeightIndex(FALSE) == EVASION_WEIGHT_INDEX_OVERWEIGHT then
            local event = "W_RollingOverweightFront"
            if 135 < math.abs(angle) then
                event = "W_RollingOverweightBack"
            elseif 45 < angle then
                event = "W_RollingOverweightRight"
            elseif angle < -45 then
                event = "W_RollingOverweightLeft"
            end
            ExecEventAllBody(event)
        else
            local front, back, left, right = false
            if 135 < math.abs(angle) then
                back = true
            elseif 45 < angle then
                right = true
            elseif angle < -45 then
                left = true
            else
                front = true
            end
            SetVariable("EnableTAE_FourWayAttackStartFront", front)
            SetVariable("EnableTAE_FourWayAttackStartBack", back)
            SetVariable("EnableTAE_FourWayAttackStartLeft", left)
            SetVariable("EnableTAE_FourWayAttackStartRight", right)
            SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
            if IsNodeActive("FourWayAttackStart_CMSG") == FALSE then
                if 0 <= angle then
                    SetVariable("FourWayAttackStartDirection", 1)
                else
                    SetVariable("FourWayAttackStartDirection", 0)
                end
                SetVariable("FourWayAttackStartAngle", angle)
                ExecEventAllBody("W_FourWayAttackStart")
            else
                if 0 <= angle then
                    SetVariable("FourWayAttackStartDirection_SelfTrans", 1)
                else
                    SetVariable("FourWayAttackStartDirection_SelfTrans", 0)
                end
                SetVariable("FourWayAttackStartAngle_SelfTrans", angle)
                ExecEventAllBody("W_FourWayAttackStart_SelfTrans")
            end
        end
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: )
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_RIGHT_FOURWAYDRAWSTANCE or request == SWORDARTS_REQUEST_LEFT_FOURWAYDRAWSTANCE then
        is_find_atk = FALSE
        is_atk_auto_aim = FALSE
        if GetVariable("MoveSpeedLevel") < 0.509999990463257 then
            if IsNodeActive("DrawStanceRightEnd_Upper_CMSG", "DrawStanceRightAttackLight_CMSG", "DrawStanceRightAttackLight2_CMSG", "DrawStanceRightAttackLight3_CMSG", "DrawStanceRightAttackHeavy_CMSG") ~= TRUE then
                SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, FALSE)
            end
            if blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
                blend_type = UPPER
            end
            
            -- Friede's Great Scythe
            if env(1116, 100490) == TRUE then
                ExecEventHalfBlend(Event_DrawStanceRightLoop, blend_type)
            else
                ExecEventHalfBlend(Event_DrawStanceRightStart, blend_type)
            end
        else
            local angle = GetVariable("MoveAngle")
            local front, back, left, right = false
            if 135 < math.abs(angle) then
                back = true
            elseif 45 < angle then
                right = true
            elseif angle < -45 then
                left = true
            else
                front = true
            end
            SetVariable("EnableTAE_FourWayDrawStanceStartFront", front)
            SetVariable("EnableTAE_FourWayDrawStanceStartBack", back)
            SetVariable("EnableTAE_FourWayDrawStanceStartLeft", left)
            SetVariable("EnableTAE_FourWayDrawStanceStartRight", right)
            SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
            if 0 <= angle then
                SetVariable("FourWayDrawStanceStartDirection", 1)
            else
                SetVariable("FourWayDrawStanceStartDirection", 0)
            end
            SetVariable("FourWayDrawStanceStartAngle", angle)
            ExecEventAllBody("W_FourWayDrawStanceRightStart")
            act(1001, -10) -- GetStamina
        end
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: )
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_LEFT_GATLINGSTANCE or request == SWORDARTS_REQUEST_RIGHT_GATLINGSTANCE then
        return FALSE
    --------------------------------------------
    -- L2 - Right/Left Weapon (e.g. WA: )
    --------------------------------------------
    elseif request == SWORDARTS_REQUEST_LEFT_RANDOMONESHOT or request == SWORDARTS_REQUEST_RIGHT_RANDOMONESHOT then
        SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
        ExecEventAllBody("W_RandomOneShot1")
    --------------------------------------------
    -- R1 - Right/Left Weapon (e.g. Bow)
    --------------------------------------------
    elseif request == ATTACK_REQUEST_ARROW_FIRE_RIGHT or request == ATTACK_REQUEST_ARROW_FIRE_RIGHT2 then
        is_find_atk = FALSE
        is_atk_auto_aim = FALSE
        
        local arrow_hand = HAND_RIGHT
        if style == HAND_LEFT_BOTH then
            arrow_hand = HAND_LEFT
        end
        
        -- GetEquipWeaponSpecialCategoryNumber
        local sp_kind = env("装備武器特殊カテゴリ番号取得", arrow_hand) 
        
        if IsExistArrow() == TRUE then
            ExecEventAllBody("W_NoArrow")
        -- Short Bow/Composite Bow/White Birch Bow
        elseif sp_kind == 81 or sp_kind == 249 then
            if IsEnoughWeaponReleaseStatus(arrow_hand) == TRUE then
                if r1 == "W_AttackRightLightStep" then
                    is_find_atk = TRUE
                    ExecEventAllBody("W_AttackArrowRightFireStep")
                elseif r1 == "W_AttackRightLightDash" then
                    is_find_atk = TRUE
                    ExecEventAllBody("W_AttackArrowRightFireDash")
                else
                    -- Greatbow
                    if env(225, arrow_hand) == WEAPON_CATEGORY_LARGE_ARROW then
                        blend_type = ALLBODY
                    elseif blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
                        blend_type = UPPER
                    end
                    ExecEventHalfBlend(Event_AttackArrowRightStart, blend_type)
                end
            else
                -- Greatbow
                if env(225, arrow_hand) == WEAPON_CATEGORY_LARGE_ARROW then
                    blend_type = ALLBODY
                elseif blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
                    blend_type = UPPER
                end
                ExecEventHalfBlend(Event_AttackArrowRightStart, blend_type)
            end
        else
            -- Greatbow
            if env(225, arrow_hand) == WEAPON_CATEGORY_LARGE_ARROW then
                blend_type = ALLBODY
            elseif blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
                blend_type = UPPER
            end
            ExecEventHalfBlend(Event_AttackArrowRightStart, blend_type)
        end
    --------------------------------------------
    -- R1 - Right Weapon (e.g. Crossbow)
    --------------------------------------------
    elseif request == ATTACK_REQUEST_RIGHT_CROSSBOW or request == ATTACK_REQUEST_RIGHT_CROSSBOW2 then
        is_find_atk = FALSE
        is_atk_auto_aim = FALSE
        if blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
            blend_type = UPPER
        end
        if IsExistBolt(HAND_RIGHT) == TRUE then
            ExecEventHalfBlend(Event_AttackCrossbowRightEmpty, blend_type)
        elseif env("ボルト装填状態取得", 1) == TRUE then -- GetBoltLoadingState
            ExecEventHalfBlend(Event_AttackCrossbowRightStart, blend_type)
        else
            ExecEventHalfBlend(Event_AttackCrossbowRightReload, blend_type)
        end
    --------------------------------------------
    -- L1 - Left Weapon (e.g. Crossbow)
    --------------------------------------------
    elseif request == ATTACK_REQUEST_LEFT_CROSSBOW or request == ATTACK_REQUEST_LEFT_CROSSBOW2 then
        is_find_atk = FALSE
        is_atk_auto_aim = FALSE
        atk_hand = HAND_LEFT
        if blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
            blend_type = UPPER
        end
        if IsExistBolt(HAND_LEFT) == TRUE then
            ExecEventHalfBlend(Event_AttackCrossbowLeftEmpty, blend_type)
        elseif env("ボルト装填状態取得", 0) == TRUE then -- GetBoltLoadingState
            ExecEventHalfBlend(Event_AttackCrossbowLeftStart, blend_type)
        else
            ExecEventHalfBlend(Event_AttackCrossbowLeftReload, blend_type)
        end
    --------------------------------------------
    -- R1 - Right/Left Weapon (e.g. Crossbow)
    --------------------------------------------
    elseif request == ATTACK_REQUEST_BOTHRIGHT_CROSSBOW or request == ATTACK_REQUEST_BOTHRIGHT_CROSSBOW2 then
        is_find_atk = FALSE
        is_atk_auto_aim = FALSE
        if blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
            blend_type = UPPER
        end
        if IsExistBolt(HAND_RIGHT) == TRUE then
            ExecEventHalfBlend(Event_AttackCrossbowBothRightEmpty, blend_type)
        elseif env("ボルト装填状態取得", 1) == TRUE then -- GetBoltLoadingState
            ExecEventHalfBlend(Event_AttackCrossbowBothRightStart, blend_type)
        else
            ExecEventHalfBlend(Event_AttackCrossbowBothRightReload, blend_type)
        end
    --------------------------------------------
    -- L1 - Right/Left Weapon (e.g. Crossbow)
    --------------------------------------------
    elseif request == ATTACK_REQUEST_BOTHLEFT_CROSSBOW or request == ATTACK_REQUEST_BOTHLEFT_CROSSBOW2 then
        is_find_atk = FALSE
        is_atk_auto_aim = FALSE
        if blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
            blend_type = UPPER
        end
        if IsExistBolt(HAND_LEFT) == TRUE then
            ExecEventHalfBlend(Event_AttackCrossbowBothLeftEmpty, blend_type)
        elseif env("ボルト装填状態取得", 0) == TRUE then -- GetBoltLoadingState
            ExecEventHalfBlend(Event_AttackCrossbowBothLeftStart, blend_type)
        else
            ExecEventHalfBlend(Event_AttackCrossbowBothLeftReload, blend_type)
        end
    --------------------------------------------
    -- R1 - Right/Left Weapon (e.g. Spear with Shield Up)
    --------------------------------------------
    elseif request == ATTACK_REQUEST_ATTACK_WHILE_GUARD then
        local index = env(278, HAND_LEFT) -- GetGuardMotionCategory
        if GetVariable("IndexGuardStyle") == GUARD_STYLE_TORCH then
            index = 3
        end
        SetVariable("IndexAttackWhileGuard", index)
        ExecEventAllBody("W_AttackRightWhileGuard")
    else
        return FALSE
    end
    
    if is_find_atk == TRUE then
        SetInterruptType(INTERRUPT_FINDATTACK)
    end
    
    if is_atk_auto_aim == TRUE then
        SetVariable("AtkAutoAimFlag", true)
        if GetVariable("IsLockon") == false then
            act("自動捕捉対象設定") -- Update Lockon Target
        end
    end
    
    SetVariable("AtkAutoAimTime", 0)
    
    if style == HAND_RIGHT_BOTH then
        atk_hand = HAND_RIGHT
    elseif style == HAND_LEFT_BOTH then
        atk_hand = HAND_LEFT
    end
    
    SetAttackHand(atk_hand)
    SetAIActionState()
    
    return TRUE
end

-----------------------------------------------
-- Sword Arts Stance
-----------------------------------------------
function ExecSwordArtsStance(blend_type)
    if c_IsEnableSwordArts == FALSE then
        return FALSE
    end
    
    local style = c_Style
    local arts_id = c_SwordArtsID
    
    -- Return if L2 is held for 0 seconds
    if env(1108, ACTION_ARM_L2) <= 0 then
        return FALSE
    elseif arts_id == SWORDARTS_DAGGERSTANCE then
        if IsNodeActive("AttackRight_Script") == TRUE or IsNodeActive("AttackBoth_Script") == TRUE then
            if GetLocomotionState() == PLAYER_STATE_IDLE then
                return FALSE
            end
        elseif 1.5 < GetVariable("MoveSpeedLevel") then
            return FALSE
        elseif IsNodeActive("Rolling_CMSG") == TRUE then
            return FALSE
        end
    end
    
    -- Splitleaf Greatsword
    if env("装備武器特殊カテゴリ番号取得", c_SwordArtsHand) == 248 and env(1001) <= 0 then
        return FALSE
    elseif arts_id == SWORDARTS_DRAWSTANCE or arts_id == SWORDARTS_DAGGERSTANCE then
        if IsNodeActive("DrawStanceRightEnd_Upper_CMSG", "DrawStanceRightAttackLight_CMSG", "DrawStanceRightAttackHeavy_CMSG") ~= TRUE then
            SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, FALSE)
        end
        if blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
            blend_type = UPPER
        end
        
        -- Friede's Great Scythe
        if env(1116, 100490) == TRUE then
            ExecEventHalfBlend(Event_DrawStanceRightLoop, blend_type)
        else
            ExecEventHalfBlend(Event_DrawStanceRightStart, blend_type)
        end
    -- WA: Storm King
    elseif arts_id == SWORDARTS_STORMSTANCE then
        if IsNodeActive("StormStanceEnd_Upper_CMSG", "StormStanceFullEnd_Upper_CMSG", "StormStanceLight_CMSG", "StormStanceFullLight_CMSG", "StormStanceHeavy_CMSG", "StormStanceFullHeavy_CMSG") ~= TRUE and IsNodeActive("StormStanceChange_Upper_CMSG") == FALSE then
            SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, FALSE)
        end
        
        if blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
            blend_type = UPPER
        end
        
        local stormstancefull = FALSE
        
        if c_SwordArtsHand == HAND_LEFT then
            -- Storm King WA - Ready to Fire
            if env(1116, 100911) == TRUE then
                stormstancefull = TRUE
            end
        -- Storm King WA - Charging
        elseif env(1116, 100910) == TRUE then
            stormstancefull = TRUE
        end
        
        if stormstancefull == FALSE then
            ExecEventHalfBlend(Event_StormStanceStart, blend_type)
        else
            ExecEventHalfBlend(Event_StormStanceFullStart, blend_type)
        end
    elseif arts_id == SWORDARTS_CHAINSHOT or arts_id == SWORDARTS_WIDESHOT or arts_id == SWORDARTS_STRONGSHOT then
        if blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
            blend_type = UPPER
        end
        if HAND_LEFT_BOTH <= style then
            SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
            ExecEventHalfBlend(Event_ChainShotRightStart, blend_type)
        else
            return FALSE
        end
    elseif arts_id == SWORDARTS_FOURWAYDRAWSTANCE then
        if arts_id == SWORDARTS_FOURWAYDRAWSTANCE then
            if env(1108, ACTION_ARM_L2) <= 0 then
                return FALSE
            elseif IsNodeActive("DrawStanceRightEnd_Upper_CMSG", "DrawStanceRightAttackLight_CMSG", "DrawStanceRightAttackLight2_CMSG", "DrawStanceRightAttackLight3_CMSG", "DrawStanceRightAttackHeavy_CMSG") ~= TRUE then
                SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, FALSE)
            end
            
            if blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
                blend_type = UPPER
            end
            
            -- Friede's Great Scythe
            if env(1116, 100490) == TRUE then
                ExecEventHalfBlend(Event_DrawStanceRightLoop, blend_type)
            else
                ExecEventHalfBlend(Event_DrawStanceRightStart, blend_type)
            end
        else
            local angle = GetVariable("MoveAngle")
            local front, back, left, right = false
            if 135 < math.abs(angle) then
                back = true
            elseif 45 < angle then
                right = true
            elseif angle < -45 then
                left = true
            else
                front = true
            end
            SetVariable("EnableTAE_FourWayDrawStanceStartFront", front)
            SetVariable("EnableTAE_FourWayDrawStanceStartBack", back)
            SetVariable("EnableTAE_FourWayDrawStanceStartLeft", left)
            SetVariable("EnableTAE_FourWayDrawStanceStartRight", right)
            SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
            if 0 <= angle then
                SetVariable("FourWayDrawStanceStartDirection", 1)
            else
                SetVariable("FourWayDrawStanceStartDirection", 0)
            end
            SetVariable("FourWayDrawStanceStartAngle", angle)
            ExecEventAllBody("W_FourWayDrawStanceRightStart")
            act(1001, -10) -- AddStamina
        end
    elseif arts_id == SWORDARTS_GATLINGSTANCE then
        if IsNodeActive("GatlingStanceRightEnd_Upper_CMSG") ~= TRUE then
            SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, FALSE)
        end
        
        if blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
            blend_type = UPPER
        end
        
        -- Friede's Great Scythe
        if env(1116, 100490) == TRUE then
            ExecEventHalfBlend(Event_GatlingStanceRightLoop, blend_type)
        else
            ExecEventHalfBlend(Event_GatlingStanceRightStart, blend_type)
        end
    else
        return FALSE
    end
    
    if style == HAND_LEFT_BOTH then
        SetAttackHand(HAND_LEFT)
    else
        SetAttackHand(HAND_RIGHT)
    end
    
    SetAIActionState()
    return TRUE
end

-----------------------------------------------
-- Swords Arts Stance Cancel
-----------------------------------------------
function ExecSwordArtsStanceOnCancelTiming(blend_type)
    if env("剣戟キャンセル可能か") == TRUE and ExecSwordArtsStance(blend_type) == TRUE then -- IsWeaponCancelPossible
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Magic
-----------------------------------------------
function ExecMagic(quick_type, blend_type)
    if c_HasActionRequest == FALSE then
        return FALSE
    -- Return if stamina is less than 0
    elseif env(1001) <= 0 then
        return FALSE
    end
    
    local style = c_Style
    local magic_hand = HAND_RIGHT
    local is_samagic = FALSE
    
    -- Magic Cast: Right
    if env(1106, ACTION_ARM_MAGIC_R) == TRUE then
        if style == HAND_LEFT_BOTH then
            if GetEquipType(HAND_LEFT, WEAPON_CATEGORY_STAFF) == FALSE then
                return FALSE
            end
            SetAttackHand(HAND_LEFT)
        else
            if GetEquipType(HAND_RIGHT, WEAPON_CATEGORY_STAFF) == FALSE then
                return FALSE
            end
            SetAttackHand(HAND_RIGHT)
        end
    -- Magic Cast: Left
    elseif env(1106, ACTION_ARM_MAGIC_L) == TRUE then
        if style == HAND_RIGHT_BOTH or style == HAND_LEFT_BOTH then
            return FALSE
        elseif GetEquipType(HAND_LEFT, WEAPON_CATEGORY_STAFF) == FALSE then
            return FALSE
        end
        SetAttackHand(HAND_LEFT)
        magic_hand = HAND_LEFT
    -- R2
    elseif env(1106, ACTION_ARM_R2) == TRUE then
        if env(1106, ACTION_ARM_HEAVY_KICK) == TRUE then
            return FALSE
        elseif style == HAND_LEFT_BOTH then
            local sp_kind = env("装備武器特殊カテゴリ番号取得", HAND_LEFT)
            
            -- Hybrid Spell Tool
            if sp_kind ~= 178 and sp_kind ~= 207 and sp_kind ~= 217 and sp_kind ~= 220 and sp_kind ~= 234 and sp_kind ~= 257 then
                return FALSE
            -- Demon's Scar
            elseif sp_kind == 257 and env(1116, 100580) == TRUE then
                return FALSE
            end
            
            SetAttackHand(HAND_LEFT)
        else
            local sp_kind = env("装備武器特殊カテゴリ番号取得", HAND_RIGHT)
            
            -- Hybrid Spell Tool
            if sp_kind ~= 178 and sp_kind ~= 207 and sp_kind ~= 217 and sp_kind ~= 220 and sp_kind ~= 234 and sp_kind ~= 257 then
                return FALSE
            -- Demon's Scar
            elseif sp_kind == 257 and env(1116, 100580) == TRUE then
                return FALSE
            end
            
            SetAttackHand(HAND_RIGHT)
        end
    -- L2
    elseif env(1106, ACTION_ARM_L2) == TRUE then
        if c_SwordArtsID == SWORDARTS_SAMAGIC or c_SwordArtsID == SWORDARTS_SAMAGICMEDIUM or c_SwordArtsID == SWORDARTS_SAMAGICSTRONG then
            is_samagic = TRUE
            if style == HAND_RIGHT_BOTH then
                SetAttackHand(HAND_RIGHT)
            elseif style == HAND_LEFT_BOTH then
                SetAttackHand(HAND_LEFT)
            elseif c_SwordArtsHand == HAND_RIGHT then
                SetAttackHand(HAND_RIGHT)
            else
                SetAttackHand(HAND_LEFT)
                magic_hand = HAND_LEFT
            end
        elseif style == HAND_RIGHT then
            local sp_kind = env("装備武器特殊カテゴリ番号取得", HAND_LEFT)
            
            -- Hybrid Spell Tool
            if sp_kind ~= 178 and sp_kind ~= 207 and sp_kind ~= 217 and sp_kind ~= 220 and sp_kind ~= 234 and sp_kind ~= 257 then
                return FALSE
            end
            
            SetAttackHand(HAND_LEFT)
            magic_hand = HAND_LEFT
        else
            return FALSE
        end
    else
        return FALSE
    end
    
    if blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
        blend_type = UPPER
    end
    
    local magic_type = env(227)
    local magic_index = MAGIC_REQUEST_NOTHING
    local is_atk_auto_aim = FALSE
    
    -- IsMagicUseable
    if env(232) == FALSE then 
        if magic_hand == HAND_LEFT then
            ExecEventHalfBlend(Event_MagicInvalidLeft, blend_type)
        else
            ExecEventHalfBlend(Event_MagicInvalidRight, blend_type)
        end
        
        act(118, TRUE) -- SetIsMagicInUse
        SetAIActionState()
        return TRUE
    elseif magic_type == 0 then
        magic_index = MAGIC_REQUEST_ENBULLET
    elseif magic_type == 1 then
        if c_Style == HAND_LEFT_BOTH then
            ExecEventHalfBlend(Event_MagicInvalidRight, blend_type)
            act(118, TRUE) -- SetIsMagicInUse
            SetAIActionState()
            return TRUE
        end
        magic_index = MAGIC_REQUEST_WEAPON_ENCHANT
    elseif magic_type == 2 then
        magic_index = MAGIC_REQUEST_SELF_ENCHANT
    elseif magic_type == 3 then
        magic_index = MAGIC_REQUEST_PRAY
    elseif magic_type == 4 then
        magic_index = MAGIC_REQUEST_PRAY_BRO
    elseif magic_type == 5 then
        magic_index = MAGIC_REQUEST_FLAME_RADIATION
    elseif magic_type == 6 then
        magic_index = MAGIC_REQUEST_SELF_FLAME_ENCHANT
    elseif magic_type == 7 then
        magic_index = MAGIC_REQUEST_DRAIN
    elseif magic_type == 8 then
        magic_index = MAGIC_REQUEST_FLAME_NEAR
    elseif magic_type == 9 then
        magic_index = MAGIC_REQUEST_CLOUD
    elseif magic_type == 10 then
        magic_index = MAGIC_REQUEST_SPARK
    elseif magic_type == 11 then
        magic_index = MAGIC_REQUEST_CHARM
    elseif magic_type == 12 then
        magic_index = MAGIC_REQUEST_IMPACT
    elseif magic_type == 13 then
        magic_index = MAGIC_REQUEST_CHAMELEON
    elseif magic_type == 14 then
        magic_index = MAGIC_REQUEST_TRANSFORM
    elseif magic_type == 15 then
        if c_Style == HAND_LEFT_BOTH then
            ExecEventHalfBlend(Event_MagicInvalidRight, blend_type)
            act(118, TRUE) -- SetIsMagicInUse
            SetAIActionState()
            return TRUE
        end
        magic_index = MAGIC_REQUEST_WEAPON_ENCHANT2
    elseif magic_type == 16 then
        magic_index = MMAGIC_REQUEST_SUMMON
    elseif magic_type == 17 then
        magic_index = MAGIC_REQUEST_SHIELD_ENCHANT
    elseif magic_type == 18 then
        magic_index = MAGIC_REQUEST_FORCE
    elseif magic_type == 19 then
        magic_index = MAGIC_REQUEST_THUNDER
    elseif magic_type == 20 then
        magic_index = MAGIC_REQUEST_ENVIRONMENT
    elseif magic_type == 21 then
        magic_index = MAGIC_REQUEST_BREATH
    elseif magic_type == 22 then
        magic_index = MAGIC_REQUEST_ENBULLET2
    elseif magic_type == 23 then
        magic_index = MAGIC_REQUEST_FLAMETHROWER
    elseif magic_type == 24 then
        magic_index = MAGIC_REQUEST_WHIP
        is_atk_auto_aim = TRUE
    elseif magic_type == 25 then
        magic_index = MAGIC_REQUEST_SLASH
        is_atk_auto_aim = TRUE
    elseif magic_type == 26 then
        magic_index = MAGIC_REQUEST_PRAYHOLD
    elseif magic_type == 27 then
        magic_index = MAGIC_REQUEST_STANDINGPRAYHOLD
    elseif magic_type == 28 then
        magic_index = MAGIC_REQUEST_AOEPRAYHOLD
    elseif magic_type == 29 then
        magic_index = MAGIC_REQUEST_QUICKENBULLET
    elseif magic_type == 30 then
        magic_index = MAGIC_REQUEST_QUICKSLASH
        is_atk_auto_aim = TRUE
    elseif magic_type == 31 then
        magic_index = MAGIC_REQUEST_BEAM_CANNON
    elseif magic_type == 32 then
        magic_index = MAGIC_REQUEST_FLAME_BACKHAND
    elseif magic_type == 33 then
        magic_index = MAGIC_REQUEST_FLAME_GRAB
        is_atk_auto_aim = TRUE
    elseif magic_type == 34 then
        magic_index = MAGIC_REQUEST_CRUSH
        is_atk_auto_aim = TRUE
    elseif magic_type == 35 then
        magic_index = MAGIC_REQUEST_MIRACLE_RADIATION
    elseif magic_type == 36 then
        magic_index = MAGIC_REQUEST_LIGHTNING_ROD
    elseif magic_type == 37 then
        magic_index = MAGIC_REQUEST_CHOP
        is_atk_auto_aim = TRUE
    elseif magic_type == 38 then
        magic_index = MAGIC_REQUEST_TRAP
    elseif magic_type == 39 then
        magic_index = MAGIC_REQUEST_WRATH
    elseif magic_type == 40 then
        magic_index = MAGIC_REQUEST_MACHINEGUN
    elseif magic_type == 41 then
        magic_index = MAGIC_REQUEST_STRONGENBULLET
    elseif magic_type == 42 then
        magic_index = MAGIC_REQUEST_FAST_SPARK
    elseif magic_type == 43 then
        magic_index = MAGIC_REQUEST_FAST_FLAME_RADIATION
    elseif magic_type == 44 then
        magic_index = MAGIC_REQUEST_SCYTHE
        is_atk_auto_aim = TRUE
    elseif magic_type == 45 then
        magic_index = MAGIC_REQUEST_HOLY_SPARK
    elseif magic_type == 46 then
        magic_index = MAGIC_REQUEST_SLASHHOLD
    elseif magic_type == 47 then
        magic_index = MAGIC_REQUEST_BIT
    elseif magic_type == 48 then
        magic_index = MAGIC_REQUEST_CHAKRAM
    elseif magic_type == 49 then
        magic_index = MAGIC_REQUEST_BOW
    elseif magic_type == 50 then
        magic_index = MAGIC_REQUEST_FAN
    elseif magic_type == 51 then
        magic_index = 51
    else
        if magic_hand == HAND_LEFT then
            ExecEventHalfBlend(Event_MagicInvalidLeft, blend_type)
        else
            ExecEventHalfBlend(Event_MagicInvalidRight, blend_type)
        end
        act(118, TRUE) -- SetIsMagicInUse
        SetAIActionState()
        return TRUE
    end

    -- Insanity Catalyst - WA Effect
    if env(1116, 112004) == TRUE then
        act(2002, 112005) -- Apply HP loss on cast
    end
    
    -- IsMagicUseMenuOpened
    if env(116) == TRUE then 
        return FALSE
    -- IsMagicUseMenuOpening
    elseif env(114) == TRUE then 
        ResetRequest()
        act(124) -- OpenMenuWhenUsingMagic
        return TRUE
    end
    
    SetVariable("IndexMagicType", magic_index)
    
    -- Handle magic cast while moving (e.g. Farron Dart, Farron Flashsword)
    if IsQuickMagic() == TRUE then
        if magic_hand == HAND_RIGHT then
            if quick_type == QUICKTYPE_NORMAL then
                ExecEventHalfBlend(Event_MagicLaunchRight, blend_type)
            elseif quick_type == QUICKTYPE_DASH then
                ExecEventHalfBlend(Event_QuickMagicFireRightDash, blend_type)
            elseif quick_type == QUICKTYPE_ROLLING then
                ExecEventHalfBlend(Event_QuickMagicFireRightStep, blend_type)
            elseif quick_type == QUICKTYPE_ATTACK then
                if ForwardLeg() == 1 then
                    ExecEventHalfBlend(Event_QuickMagicFireRightAttackRight, blend_type)
                else
                    ExecEventHalfBlend(Event_QuickMagicFireRightAttackLeft, blend_type)
                end
            elseif quick_type == QUICKTYPE_COMBO then
                if ForwardLeg() == 1 then
                    ExecEventHalfBlend(Event_QuickMagicFireRightAttackRight2, blend_type)
                else
                    ExecEventHalfBlend(Event_QuickMagicFireRightAttackLeft2, blend_type)
                end
            end
        elseif quick_type == QUICKTYPE_NORMAL then
            ExecEventHalfBlend(Event_MagicLaunchLeft, blend_type)
        elseif quick_type == QUICKTYPE_DASH then
            ExecEventHalfBlend(Event_QuickMagicFireLeftDash, blend_type)
        elseif quick_type == QUICKTYPE_ROLLING then
            ExecEventHalfBlend(Event_QuickMagicFireLeftStep, blend_type)
        elseif quick_type == QUICKTYPE_ATTACK then
            if ForwardLeg() == 1 then
                ExecEventHalfBlend(Event_QuickMagicFireLeftAttackRight, blend_type)
            else
                ExecEventHalfBlend(Event_QuickMagicFireLeftAttackLeft, blend_type)
            end
        elseif quick_type == QUICKTYPE_COMBO then
            if ForwardLeg() == 1 then
                ExecEventHalfBlend(Event_QuickMagicFireLeftAttackRight2, blend_type)
            else
                ExecEventHalfBlend(Event_QuickMagicFireLeftAttackLeft2, blend_type)
            end
        end
    -- Handle magic cast combos (e.g. Flame Fan)
    elseif IsComboMagic() == TRUE then
        if magic_hand == HAND_RIGHT then
            if env(1116, 100620) == TRUE then 
                ExecEventHalfBlend(Event_MagicFireRight2, blend_type)
            elseif env(1116, 100650) == TRUE then 
                ExecEventHalfBlend(Event_MagicLaunchRight, blend_type)
            elseif env(1116, 100630) == TRUE then 
                ExecEventHalfBlend(Event_MagicFireRight3, blend_type)
            elseif env(1116, 100660) == TRUE then 
                ExecEventHalfBlend(Event_MagicLaunchRight, blend_type)
            elseif env(1116, 100640) == TRUE then 
                ExecEventHalfBlend(Event_MagicFireRight2, blend_type)
            elseif env(1116, 100670) == TRUE then 
                ExecEventHalfBlend(Event_MagicLaunchRight, blend_type)
            else
                ExecEventHalfBlend(Event_MagicLaunchRight, blend_type)
            end
        elseif env(1116, 100620) == TRUE then 
            ExecEventHalfBlend(Event_MagicLaunchLeft, blend_type)
        elseif env(1116, 100650) == TRUE then 
            ExecEventHalfBlend(Event_MagicFireLeft2, blend_type)
        elseif env(1116, 100630) == TRUE then 
            ExecEventHalfBlend(Event_MagicLaunchLeft, blend_type)
        elseif env(1116, 100660) == TRUE then 
            ExecEventHalfBlend(Event_MagicFireLeft3, blend_type)
        elseif env(1116, 100640) == TRUE then 
            ExecEventHalfBlend(Event_MagicLaunchLeft, blend_type)
        elseif env(1116, 100670) == TRUE then 
            ExecEventHalfBlend(Event_MagicFireLeft2, blend_type)
        else
            ExecEventHalfBlend(Event_MagicLaunchLeft, blend_type)
        end
    -- Handle magic via SA cast
    elseif is_samagic == TRUE then
        ExecEventNoReset("W_SAMagicStart")
        SetVariable("SAMagicBlendRate", 1)
        SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)
        if c_SwordArtsID == SWORDARTS_SAMAGIC then
            if env("アーツポイント足りるか", ACTION_ARM_L2, c_SwordArtsHand) == TRUE then -- HasEnoughArtsPoints
                act(2002, 120800) 
                act(2002, 120801) 
            else
                act(2002, 120810) 
                act(2002, 120811) 
            end
        elseif c_SwordArtsID == SWORDARTS_SAMAGICMEDIUM then
            if env("アーツポイント足りるか", ACTION_ARM_L2, c_SwordArtsHand) == TRUE then
                act(2002, 120820) 
                act(2002, 120821) 
            else
                act(2002, 120830) 
                act(2002, 120831) 
            end
        elseif env("アーツポイント足りるか", ACTION_ARM_L2, c_SwordArtsHand) == TRUE then
            act(2002, 120840) 
            act(2002, 120841) 
        else
            act(2002, 120850) 
            act(2002, 120851) 
        end
        if magic_hand == HAND_RIGHT then
            ExecEventHalfBlend(Event_MagicLaunchRightSA, blend_type)
        else
            ExecEventHalfBlend(Event_MagicLaunchLeftSA, blend_type)
        end
    elseif magic_hand == HAND_RIGHT then
        ExecEventHalfBlend(Event_MagicLaunchRight, blend_type)
    else
        ExecEventHalfBlend(Event_MagicLaunchLeft, blend_type)
    end
    
    if IsAttackMagic(magic_index) == TRUE then
        SetInterruptType(INTERRUPT_FINDATTACK)
    end
    
    if is_atk_auto_aim == TRUE then
        SetVariable("AtkAutoAimFlag", true)
        if GetVariable("IsLockon") == false then
            act("自動捕捉対象設定") -- Update Lockon Target
        end
    end
    
    SetVariable("AtkAutoAimTime", 0)
    act(118, TRUE) -- SetIsMagicInUse
    SetAIActionState()
    return TRUE
end

-----------------------------------------------
-- Gesture
-- 1    Praise the Sun
-- 2    Point Up
-- 3    Point Down
-- 4    Dignified Bow
-- 5    Point Forward
-- 6    Welcome
-- 7    Prostration
-- 8    Proper Bow
-- 9    Prayer
-- 10   Bow
-- 11   Wave
-- 12   ?
-- 13   Jump for Joy
-- 14   Hurrah
-- 15   My Thanks
-- 16   Rejoice
-- 17   Rest
-- 18   Toast
-- 19   Duel Bow
-- 20   Roar
-- 21   Shrug
-- 22   Curl Up
-- 23   Stretch Out
-- 24   Call Over
-- 25   Collapse
-- 26   ?
-- 27   Patches Squat
-- 28   Clap
-- 29   Path of the Dragon
-- 30   Legion Etiquette
-- 31   Darkmoon Loyalty
-- 32   Sleep
-- 33   Sitting Toast
-- 34   Silent Ally
-- 35   Dismissive Point
-- 36   Look Skyward
-- 37   Well! What is it!
-- 38   Praise the Heavens
-- 39   Retch
-- 40   Confused
-----------------------------------------------
function ExecGesture()
    if c_HasActionRequest == FALSE then
        return FALSE
    elseif env(1106, ACTION_ARM_GESTURE) == FALSE then
        return FALSE
    end
    
    local request = env(1104)
    
    if request == INVALID then
        return FALSE
    end
    
    local isloop = FALSE
    
    -- Prostration
    if request == 7 then
        SetVariable("IndexGestureLoop", 0)
        isloop = TRUE
    -- Prayer
    elseif request == 9 then
        SetVariable("IndexGestureLoop", 1)
        isloop = TRUE
    -- Rest
    elseif request == 17 then
        SetVariable("IndexGestureLoop", 2)
        isloop = TRUE
    -- Curl Up
    elseif request == 22 then
        SetVariable("IndexGestureLoop", 3)
        isloop = TRUE
    -- Stretch Out
    elseif request == 23 then
        SetVariable("IndexGestureLoop", 4)
        isloop = TRUE
    -- Collapse
    elseif request == 25 then
        SetVariable("IndexGestureLoop", 5)
        isloop = TRUE
    -- Patches Squat
    elseif request == 27 then
        SetVariable("IndexGestureLoop", 6)
        isloop = TRUE
    -- Path of the Dragon
    elseif request == 29 then
        SetVariable("IndexGestureLoop", 7)
        isloop = TRUE
    -- Darkmoon Loyalty
    elseif request == 31 then
        SetVariable("IndexGestureLoop", 8)
        isloop = TRUE
    -- Sleep
    elseif request == 32 then
        SetVariable("IndexGestureLoop", 9)
        isloop = TRUE
    -- Sitting Toast
    elseif request == 33 then
        SetVariable("IndexGestureLoop", 10)
        isloop = TRUE
    -- Silent Ally
    elseif request == 34 then
        SetVariable("IndexGestureLoop", 11)
        isloop = TRUE
    end
    
    if isloop == TRUE then
        SetAIActionState()
        if GetVariable("LocomotionState") == PLAYER_STATE_MOVE then
            ExecEventHalfBlend(Event_GestureLoopStart, UPPER)
            return TRUE
        else
            ExecEventHalfBlend(Event_GestureLoopStart, ALLBODY)
            return TRUE
        end
    else
        SetVariable("IndexGesture", request)
        SetAIActionState()
        if GetVariable("LocomotionState") == PLAYER_STATE_MOVE then
            ExecEventHalfBlend(Event_GestureStart, UPPER)
            return TRUE
        else
            ExecEventHalfBlend(Event_GestureStart, ALLBODY)
            return TRUE
        end
    end
end

-----------------------------------------------
-- Item
-----------------------------------------------
function ExecItem(quick_type, blend_type)
    if c_HasActionRequest == FALSE then
        return FALSE
    -- Not using item
    elseif env(1106, ACTION_ARM_USE_ITEM) == FALSE then
        return FALSE
    -- IsItemUseMenuOpened
    elseif env(115) == TRUE then 
        return FALSE
    -- IsItemUseMenuOpening and IsItemUseable
    elseif env(113) == TRUE and env(233) == TRUE then 
        ResetRequest()
        act(123) -- OpenMenuWhenUsingItem
        return TRUE
    end
    
    local item_type = env(231) -- GetItemAnimType
    
    ----------------------
    -- FP Pause
    ----------------------
    act(2002, 113001)
    
    if item_type == ITEM_THROW_KNIFE or item_type == ITEM_THROW_BOTTLE or item_type == ITEM_QUICK_THROW_KNIFE or item_type == ITEM_QUICK_THROW_BOTTLE then
        act(2002, 113002) -- Longer pause for the throwables
    end
    
    if IsNodeActive("ItemDrinking_Upper_CMSG") == TRUE then
        if item_type ~= ITEM_DRINK then
            return FALSE
        end
    elseif IsNodeActive("ItemDrinkingMP_Upper_CMSG") == TRUE then
        if item_type ~= ITEM_DRINK_MP then
            return FALSE
        end
    elseif IsNodeActive("ItemDrinkingSake_Upper_CMSG") == TRUE and item_type ~= ITEM_DRINK_SAKE then
        return FALSE
    end
    if item_type == ITEM_RECOVER then
        if blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
            blend_type = UPPER
        end
        ExecEventHalfBlend(Event_ItemRecover, blend_type)
    elseif item_type == ITEM_WEAPON_ENCHANT then
        if blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
            blend_type = UPPER
        end
        ExecEventHalfBlend(Event_ItemWeaponEnchant, blend_type)
    elseif item_type == ITEM_THROW_KNIFE then
        if env(1001) <= 0 then -- GetStamina
            ResetRequest()
            return FALSE
        end
        AddStamina(-7)
        if blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
            blend_type = UPPER
        end
        ExecEventHalfBlend(Event_ItemThrowKnife, blend_type)
    elseif item_type == ITEM_THROW_BOTTLE then
        if env(1001) <= 0 then -- GetStamina
            ResetRequest()
            return FALSE
        end
        AddStamina(-7)
        if blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
            blend_type = UPPER
        end
        ExecEventHalfBlend(Event_ItemThrowBottle, blend_type)
    elseif item_type == ITEM_MEGANE then
        if env(305, 15) == TRUE then -- GetStateChangeType
            ExecEventHalfBlend(Event_ItemMeganeEnd, ALLBODY)
        else
            ExecEventHalfBlend(Event_ItemMeganeStart, ALLBODY)
        end
    elseif item_type == ITEM_REPAIR then
        ExecEventHalfBlend(Event_ItemWeaponRepair, blend_type)
    elseif item_type == ITEM_PRAY then
        ExecEventHalfBlend(Event_ItemPray, blend_type)
    elseif item_type == ITEM_TRAP then
        ExecEventHalfBlend(Event_ItemTrap, blend_type)
    elseif item_type == ITEM_MESSAGE then
        ExecEventHalfBlend(Event_ItemMessage, ALLBODY)
    elseif item_type == ITEM_SOUL then
        ExecEventHalfBlend(Event_ItemSoul, blend_type)
    elseif item_type == ITEM_DRINK then
        if blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
            blend_type = UPPER
        end
        if env(305, CONDITION_TYPE_NO_EST) == TRUE then -- GetStateChangeType
            ExecEventHalfBlend(Event_ItemDrinkNothing, blend_type)
        elseif IsNodeActive("ItemDrinking_Upper_CMSG") == TRUE then
            SetInterruptType(INTERRUPT_USEITEM)
            ExecEventHalfBlend(Event_ItemDrinking, blend_type)
        else
            SetInterruptType(INTERRUPT_USEITEM)
            ExecEventHalfBlend(Event_ItemDrinkStart, blend_type)
        end
    elseif item_type == ITEM_DRAGONHEAD then
        if env(305, CONDITION_TYPE_DRAGONHEAD) == TRUE or env(305, CONDITION_TYPE_DRAGONFULL) == TRUE then -- GetStateChangeType
            if env(1001) <= 0 then -- GetStamina
                ResetRequest()
                return FALSE
            end
            ExecEventHalfBlend(Event_DragonHeadStartAfter, blend_type)
        else
            ExecEventHalfBlend(Event_DragonHeadStartBefore, blend_type)
        end
    elseif item_type == ITEM_DRAGONFULL then
        if env(305, CONDITION_TYPE_DRAGONFULL) == TRUE then -- GetStateChangeType
            if env(1001) < 0 then -- GetStamina
                ResetRequest()
                return FALSE
            end
            AddStamina(-80)
            ExecEventHalfBlend(Event_DragonFullStartAfter, blend_type)
        else
            ExecEventHalfBlend(Event_DragonFullStartBefore, blend_type)
        end
    elseif item_type == ITEM_SHOCK_WAVE then
        ExecEventHalfBlend(Event_ItemShockWeaveStart, blend_type)
    elseif item_type == ITEM_QUICK_WEAPON_ENCHANT then
        if quick_type == QUICKTYPE_NORMAL then
            ExecEventHalfBlend(Event_QuickItemEnchantNormal, blend_type)
        elseif quick_type == QUICKTYPE_DASH then
            ExecEventHalfBlend(Event_QuickItemEnchantDash, blend_type)
        elseif quick_type == QUICKTYPE_ROLLING then
            ExecEventHalfBlend(Event_QuickItemEnchantStep, ALLBODY)
        elseif quick_type == QUICKTYPE_ATTACK then
            if ForwardLeg() == 1 then
                ExecEventHalfBlend(Event_QuickItemEnchantAttackRight, ALLBODY)
            else
                ExecEventHalfBlend(Event_QuickItemEnchantAttackLeft, ALLBODY)
            end
        else
            return FALSE
        end
    elseif item_type == ITEM_QUICK_THROW_KNIFE then
        if env(1001) <= 0 then -- GetStamina
            ResetRequest()
            return FALSE
        end
        AddStamina(-7)
        if quick_type == QUICKTYPE_NORMAL then
            ExecEventHalfBlend(Event_QuickItemThrowKnifeNormal, ALLBODY)
        elseif quick_type == QUICKTYPE_DASH then
            ExecEventHalfBlend(Event_QuickItemThrowKnifeDash, ALLBODY)
        elseif quick_type == QUICKTYPE_ROLLING then
            ExecEventHalfBlend(Event_QuickItemThrowKnifeStep, ALLBODY)
        elseif quick_type == QUICKTYPE_ATTACK then
            if ForwardLeg() == 1 then
                ExecEventHalfBlend(Event_QuickItemThrowKnifeAttackRight, ALLBODY)
            else
                ExecEventHalfBlend(Event_QuickItemThrowKnifeAttackLeft, ALLBODY)
            end
        elseif quick_type == QUICKTYPE_COMBO then
            if ForwardLeg() == 1 then
                ExecEventHalfBlend(Event_QuickItemThrowKnifeAttackRight2, ALLBODY)
            else
                ExecEventHalfBlend(Event_QuickItemThrowKnifeAttackLeft2, ALLBODY)
            end
        else
            return FALSE
        end
    elseif item_type == ITEM_QUICK_THROW_BOTTLE then
        return FALSE
    elseif item_type == ITEM_DRINK_MP then
        if blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
            blend_type = UPPER
        end
        if env(305, CONDITION_TYPE_NO_EST) == TRUE then -- GetStateChangeType
            ExecEventHalfBlend(Event_ItemDrinkNothingMP, blend_type)
        elseif IsNodeActive("ItemDrinkingMP_Upper_CMSG") == TRUE then
            SetInterruptType(INTERRUPT_USEITEM)
            ExecEventHalfBlend(Event_ItemDrinkingMP, blend_type)
        else
            SetInterruptType(INTERRUPT_USEITEM)
            ExecEventHalfBlend(Event_ItemDrinkStartMP, blend_type)
        end
    elseif item_type == ITEM_BACK_BOTTLE then
        ExecEventHalfBlend(Event_ItemBackBottle, blend_type)
    elseif item_type == ITEM_DRINK_SAKE then
        if blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
            blend_type = UPPER
        end
        if IsNodeActive("ItemDrinkingSake_Upper_CMSG") == TRUE then
            ExecEventHalfBlend(Event_ItemDrinkingSake, blend_type)
        else
            ExecEventHalfBlend(Event_ItemDrinkStartSake, blend_type)
        end
    elseif item_type == ITEM_CHAMELEON then
        ExecEventHalfBlend(Event_ItemChameleon, blend_type)
    -- Dragon Head V2
    elseif item_type == ITEM_DRAGONHEADLVL2 then
        if env(305, CONDITION_TYPE_DRAGONHEAD) == FALSE or env(305, CONDITION_TYPE_DRAGONFULL) == FALSE then -- GetStateChangeType
            if env(1001) <= 0 then -- GetStamina
                ResetRequest()
                return FALSE
            end
            ExecEventHalfBlend(Event_DragonHeadStartAfterLVL2, blend_type)
        else
            ExecEventHalfBlend(Event_DragonHeadStartBefore, blend_type)
        end
    -- Dragon Torso V2
    elseif item_type == ITEM_DRAGONFULLLVL2 then
        if env(305, CONDITION_TYPE_DRAGONFULL) == FALSE then -- GetStateChangeType
            if env(1001) < 0 then -- GetStamina
                ResetRequest()
                return FALSE
            end
            AddStamina(-100)
            ExecEventHalfBlend(Event_DragonFullStartAfterLVL2, blend_type)
        else
            ExecEventHalfBlend(Event_DragonFullStartBefore, blend_type)
        end
    elseif item_type == ITEM_OLDMONK then
        ExecEventHalfBlend(Event_ItemOldMonk, blend_type)
    elseif item_type == ITEM_QUICK_THROW_HOMINGKNIFE then
        if env(1001) <= 0 then -- GetStamina
            ResetRequest()
            return FALSE
        end
        AddStamina(-10)
        if quick_type == QUICKTYPE_NORMAL then
            ExecEventHalfBlend(Event_QuickItemThrowKnifeNormal, ALLBODY)
        elseif quick_type == QUICKTYPE_DASH then
            ExecEventHalfBlend(Event_QuickItemThrowKnifeDash, ALLBODY)
        elseif quick_type == QUICKTYPE_ROLLING then
            ExecEventHalfBlend(Event_QuickItemThrowKnifeStep, ALLBODY)
        elseif quick_type == QUICKTYPE_ATTACK then
            if ForwardLeg() == 1 then
                ExecEventHalfBlend(Event_QuickItemThrowKnifeAttackRight, ALLBODY)
            else
                ExecEventHalfBlend(Event_QuickItemThrowKnifeAttackLeft, ALLBODY)
            end
        elseif quick_type == QUICKTYPE_COMBO then
            if ForwardLeg() == 1 then
                ExecEventHalfBlend(Event_QuickItemThrowKnifeAttackRight2, ALLBODY)
            else
                ExecEventHalfBlend(Event_QuickItemThrowKnifeAttackLeft2, ALLBODY)
            end
        else
            return FALSE
        end
    elseif item_type == ITEM_NO_DRINK then
        if env(1007) == TRUE and env(1116, 5110) == FALSE then -- IsCOMPlayer 
            act(2002, 5110)
        end
        if blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
            blend_type = UPPER
        end
        ExecEventHalfBlend(Event_ItemDrinkEmpty, blend_type)
    -- Draconic Fire
    elseif item_type == 27 then
        if env(305, CONDITION_TYPE_DRAGONHEAD) == FALSE or env(305, CONDITION_TYPE_DRAGONFULL) == FALSE then -- GetStateChangeType
            if env(1001) <= 0 then -- GetStamina
                ResetRequest()
                return FALSE
            end
            ExecEventHalfBlend(Event_DragonHeadStartAfterLVL2, blend_type)
        else
            ExecEventHalfBlend(Event_DragonHeadStartBefore, blend_type)
        end
    -- Draconic Might
    elseif item_type == 28 then
        if env(305, CONDITION_TYPE_DRAGONFULL) == FALSE then -- GetStateChangeType
            if env(1001) < 0 then -- GetStamina
                ResetRequest()
                return FALSE
            end
            AddStamina(-100)
            ExecEventHalfBlend(Event_DragonFullStartAfterLVL2, blend_type)
        else
            ExecEventHalfBlend(Event_DragonFullStartBefore, blend_type)
        end
    elseif item_type == ITEM_INVALID then
        if env(1007) == TRUE and env(1116, 5111) == FALSE then
            act(2002, 5111) 
        end
        if blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
            blend_type = UPPER
        end
        ExecEventHalfBlend(Event_ItemInvalid, blend_type)
    else
        return FALSE
    end
    
    act("アイテムアニメ中か設定") -- Set item animation in progress
    g_ItemFirstFrame = 1
    SetAIActionState()
    return TRUE
end

-----------------------------------------------
-- Ladder Item
-----------------------------------------------
function ExecLadderItem(hand)
    if c_HasActionRequest == FALSE then
        return FALSE
    elseif env(1106, ACTION_ARM_USE_ITEM) == FALSE then -- ActionRequest
        return FALSE
    elseif env(115) == TRUE then -- IsItemUseMenuOpened
        return FALSE
    elseif env(113) == TRUE and env(233) == TRUE then -- IsItemUseMenuOpening and IsItemUseable
        ResetRequest()
        act(123) -- OpenMenuWhenUsingItem
        return TRUE
    end
    local item_type = env(231) -- GetItemAnimType
    
    -- FP Pause
    act(2002, 113001)
    
    local event = "W_ItemLadderInvalid"
    local event_hand = "Left"
    if hand == HAND_STATE_RIGHT then
        event_hand = "Right"
    end
    if IsNodeActive("ItemLadderDrinkingRight_CMSG", "ItemLadderDrinkingLeft_CMSG") == TRUE then
        if item_type ~= ITEM_DRINK then
            return FALSE
        end
    elseif IsNodeActive("ItemLadderDrinkingMPRight_CMSG", "ItemLadderDrinkingMPLeft_CMSG") == TRUE then
        if item_type ~= ITEM_DRINK_MP then
            return FALSE
        end
    elseif IsNodeActive("ItemLadderDrinkingSakeRight_CMSG", "ItemLadderDrinkingSakeLeft_CMSG") == TRUE and item_type ~= ITEM_DRINK_SAKE then
        return FALSE
    end
    if item_type == ITEM_RECOVER then
        event = "W_ItemLadderRecover"
    elseif item_type == ITEM_SOUL then
        event = "W_ItemLadderSoul"
    elseif item_type == ITEM_DRINK then
        if env(305, CONDITION_TYPE_NO_EST) == TRUE then -- GetStateChangeType
            event = "W_ItemLadderDrinkNothing"
        elseif IsNodeActive("ItemLadderDrinkingRight_CMSG") == TRUE then
            event = "W_ItemLadderDrinking"
            event_hand = "Right"
        elseif IsNodeActive("ItemLadderDrinkingLeft_CMSG") == TRUE then
            event = "W_ItemLadderDrinking"
            event_hand = "Left"
        else
            event = "W_ItemLadderDrinkStart"
        end
    elseif item_type == ITEM_DRINK_MP then
        if env(305, CONDITION_TYPE_NO_EST) == TRUE then -- GetStateChangeType
            event = "W_ItemLadderDrinkNothingMP"
        elseif IsNodeActive("ItemLadderDrinkingMPRight_CMSG") == TRUE then
            event = "W_ItemLadderDrinkingMP"
            event_hand = "Right"
        elseif IsNodeActive("ItemLadderDrinkingMPLeft_CMSG") == TRUE then
            event = "W_ItemLadderDrinkingMP"
            event_hand = "Left"
        else
            event = "W_ItemLadderDrinkStartMP"
        end
    elseif item_type == ITEM_DRINK_SAKE then
        if IsNodeActive("ItemLadderDrinkingSakeRight_CMSG") == TRUE then
            event = "W_ItemLadderDrinkingSake"
            event_hand = "Right"
        elseif IsNodeActive("ItemLadderDrinkingSakeLeft_CMSG") == TRUE then
            event = "W_ItemLadderDrinkingSake"
            event_hand = "Left"
        else
            event = "W_ItemLadderDrinkStartSake"
        end
    elseif item_type == ITEM_NO_DRINK then
        event = "W_ItemLadderDrinkEmpty"
    end
    act("アイテムアニメ中か設定") -- Set item animation in progress
    ExecEvent(event .. event_hand)
    return TRUE
end

-----------------------------------------------
-- Weapon Change
-----------------------------------------------
function ExecWeaponChange(blend_type)
    if c_HasActionRequest == FALSE then
        return FALSE
    end
    
    local kind = WEAPON_CHANGE_REQUEST_INVALID
    
    if env(1106, ACTION_ARM_CHANGE_WEAPON_R) == TRUE then -- ActionRequest
        kind = GetWeaponChangeType(HAND_RIGHT)
    elseif env(1106, ACTION_ARM_CHANGE_WEAPON_L) == TRUE then -- ActionRequest
        kind = GetWeaponChangeType(HAND_LEFT)
    else
        return FALSE
    end
    
    if kind == WEAPON_CHANGE_REQUEST_INVALID then
        return FALSE
    end
    
    SetVariable("WeaponChangeType", kind)
    
    if blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
        blend_type = UPPER
    end
    
    ExecEventHalfBlend(Event_WeaponChangeStart, blend_type)
    SetAIActionState()
    return TRUE
end

-----------------------------------------------
-- Hand Change
-----------------------------------------------
function ExecHandChange(hand, is_force, blend_type)
    if is_force == FALSE then
        if c_HasActionRequest == FALSE then
            return FALSE
        elseif env(1106, ACTION_ARM_CHANGE_STYLE) ~= TRUE then
            if env(1106, ACTION_ARM_CHANGE_STYLE_LEFT) == TRUE then
                hand = HAND_LEFT
            else
                return FALSE
            end
        end
    end
    
    local style = c_Style
    local pos = nil
    
    if style == HAND_RIGHT then
        if hand == HAND_RIGHT then
             -- IsTwoHandPossible
            if env(335, HAND_RIGHT) == FALSE then
                return FALSE
            end
            
			local sp_kind = env("装備武器特殊カテゴリ番号取得", HAND_RIGHT)
            
            pos = GetHandChangeType(HAND_LEFT)
            if pos == WEAPON_CHANGE_REQUEST_LEFT_WAIST then
				local kind = env(225, HAND_LEFT) -- GetEquipWeaponCategory
                
                -- Frostfall 1H to 2H with empty offhand
				if sp_kind == 604 and env(1116, 100732) == TRUE then 
					ExecEventHalfBlend(Event_AttackCrossbowRightEmpty, blend_type)
					return FALSE
				end
                
                -- Frostfall 1H to 2H
				if sp_kind == 604 then
					ExecEventHalfBlend(Event_AttackCrossbowRightStart, blend_type)
					return FALSE
				end
                
                if IsDualBladeSpecific(HAND_RIGHT) == TRUE and sp_kind ~= 294 then
                    -- Onikiri and Ubadachi
                    if sp_kind == 144 and kind == WEAPON_CATEGORY_FIST then
                        SetHandChangeStyle(LEFT_TO_BACK, LEFT_FROM_BACK)
                    else
                        SetHandChangeStyle(LEFT_TO_WAIST, LEFT_FROM_WAIST)
                    end
                else
                    SetHandChangeStyle(LEFT_TO_WAIST, BOTH_FROM_ALL)
                end
            elseif pos == WEAPON_CHANGE_REQUEST_LEFT_BACK then
                -- Frostfall 1H to 2H
				if sp_kind == 604 then 
					ExecEventHalfBlend(Event_AttackCrossbowRightReload, blend_type)
					return FALSE
				end
                
                local kind = env(225, HAND_LEFT)
                
                if IsDualBladeSpecific(HAND_RIGHT) == TRUE and sp_kind ~= 294 then
                    SetHandChangeStyle(LEFT_TO_BACK, LEFT_FROM_BACK)
                elseif kind == WEAPON_CATEGORY_KATANA then
                    SetHandChangeStyle(LEFT_TO_WAIST, BOTH_FROM_ALL)
                else
                    SetHandChangeStyle(LEFT_TO_BACK, BOTH_FROM_ALL)
                end
            elseif pos == WEAPON_CHANGE_REQUEST_LEFT_SHOULDER then
                -- Frostfall 1H to 2H
				if sp_kind == 604 then 
					ExecEventHalfBlend(Event_AttackCrossbowRightEmpty, blend_type)
					return FALSE
				end
                if IsDualBladeSpecific(HAND_RIGHT) == TRUE and sp_kind ~= 294 then
                    SetHandChangeStyle(LEFT_TO_SHOULDER, LEFT_FROM_SHOULDER)
                else
                    SetHandChangeStyle(LEFT_TO_SHOULDER, BOTH_FROM_ALL)
                end
            elseif pos == WEAPON_CHANGE_REQUEST_LEFT_SPEAR then
                -- Frostfall 1H to 2H
				if sp_kind == 604 then 
					ExecEventHalfBlend(Event_AttackCrossbowRightReload, blend_type)
					return FALSE
				end
                if IsDualBladeSpecific(HAND_RIGHT) == TRUE and sp_kind ~= 294 then
                    SetHandChangeStyle(LEFT_TO_SPEAR, LEFT_FROM_SPEAR)
                else
                    SetHandChangeStyle(LEFT_TO_SPEAR, BOTH_FROM_ALL)
                end
            elseif IsDualBladeSpecific(HAND_RIGHT) == TRUE and sp_kind ~= 294 then
                SetHandChangeStyle(LEFT_TO_SPEAR, LEFT_FROM_SPEAR)
            else
                SetHandChangeStyle(LEFT_TO_SPEAR, BOTH_FROM_ALL)
            end
            
            act(104, 1) -- SwitchEquippedWeapon
        else
            if env(335, HAND_LEFT) == FALSE then -- IsTwoHandPossible
                return FALSE
            end
            pos = GetHandChangeType(HAND_RIGHT)
			local sp_kind = env("装備武器特殊カテゴリ番号取得", HAND_LEFT)
            
            if pos == WEAPON_CHANGE_REQUEST_RIGHT_WAIST then
                if IsDualBladeSpecific(HAND_LEFT) == TRUE and sp_kind ~= 294 then
                    local kind = env(225, HAND_RIGHT)
                    
                    -- Onikiri and Ubadachi
                    if sp_kind == 144 and kind == WEAPON_CATEGORY_FIST then
                        SetHandChangeStyle(RIGHT_TO_BACK, RIGHT_FROM_BACK)
                    else
                        SetHandChangeStyle(RIGHT_TO_WAIST, RIGHT_FROM_WAIST)
                    end
                else
                    SetHandChangeStyle(RIGHT_TO_WAIST, BOTHLEFT_FROM_ALL)
                end
            elseif pos == WEAPON_CHANGE_REQUEST_RIGHT_BACK then
                local kind = env(225, HAND_RIGHT)
                
                if IsDualBladeSpecific(HAND_LEFT) == TRUE and sp_kind ~= 294 then
                    if kind == WEAPON_CATEGORY_KATANA then
                        SetHandChangeStyle(RIGHT_TO_WAIST, BOTHLEFT_FROM_ALL)
                    else
                        SetHandChangeStyle(RIGHT_TO_BACK, RIGHT_FROM_BACK)
                    end
                elseif kind == WEAPON_CATEGORY_KATANA then
                    SetHandChangeStyle(RIGHT_TO_WAIST, BOTHLEFT_FROM_ALL)
                else
                    SetHandChangeStyle(RIGHT_TO_BACK, BOTHLEFT_FROM_ALL)
                end
            elseif pos == WEAPON_CHANGE_REQUEST_RIGHT_SHOULDER then
                if IsDualBladeSpecific(HAND_LEFT) == TRUE and sp_kind ~= 294 then
                    SetHandChangeStyle(RIGHT_TO_SHOULDER, RIGHT_FROM_SHOULDER)
                else
                    SetHandChangeStyle(RIGHT_TO_SHOULDER, BOTHLEFT_FROM_ALL)
                end
            elseif pos == WEAPON_CHANGE_REQUEST_RIGHT_SPEAR then
                if IsDualBladeSpecific(HAND_LEFT) == TRUE and sp_kind ~= 294 then
                    SetHandChangeStyle(RIGHT_TO_SPEAR, RIGHT_FROM_SPEAR)
                else
                    SetHandChangeStyle(RIGHT_TO_SPEAR, BOTHLEFT_FROM_ALL)
                end
            elseif IsDualBladeSpecific(HAND_LEFT) == TRUE and sp_kind ~= 294 then
                SetHandChangeStyle(RIGHT_TO_BACK, RIGHT_FROM_BACK)
            else
                SetHandChangeStyle(RIGHT_TO_BACK, BOTHLEFT_FROM_ALL)
            end
            act(104, 2) -- SwitchEquippedWeapon
        end
    elseif style == HAND_RIGHT_BOTH then
        pos = GetHandChangeType(HAND_LEFT)
        if pos == WEAPON_CHANGE_REQUEST_LEFT_WAIST then
            local sp_kind = env("装備武器特殊カテゴリ番号取得", HAND_RIGHT)
            local kind = env(225, HAND_LEFT)
            
            -- Onikiri and Ubadachi
            if sp_kind == 144 and kind == WEAPON_CATEGORY_FIST then
                SetHandChangeStyle(BOTH_TO_BACK, LEFT_FROM_BACK)
            else
                SetHandChangeStyle(BOTH_TO_WAIST, LEFT_FROM_WAIST)
            end
        elseif pos == WEAPON_CHANGE_REQUEST_LEFT_BACK then
            SetHandChangeStyle(BOTH_TO_BACK, LEFT_FROM_BACK)
        elseif pos == WEAPON_CHANGE_REQUEST_LEFT_SHOULDER then
            SetHandChangeStyle(BOTH_TO_SHOULDER, LEFT_FROM_SHOULDER)
        else
            SetHandChangeStyle(BOTH_TO_BACK, LEFT_FROM_SPEAR)
        end
        act(104, 3) -- SwitchEquippedWeapon
    elseif style == HAND_LEFT_BOTH then
        pos = GetHandChangeType(HAND_RIGHT)
        if pos == WEAPON_CHANGE_REQUEST_RIGHT_WAIST then
            local sp_kind = env("装備武器特殊カテゴリ番号取得", HAND_LEFT)
            local kind = env(225, HAND_RIGHT)
            
            -- Onikiri and Ubadachi
            if sp_kind == 144 and kind == WEAPON_CATEGORY_FIST then
                SetHandChangeStyle(BOTHRIGHT_TO_BACK, RIGHT_FROM_BACK)
            else
                SetHandChangeStyle(BOTHRIGHT_TO_WAIST, RIGHT_FROM_WAIST)
            end
        elseif pos == WEAPON_CHANGE_REQUEST_RIGHT_BACK then
            SetHandChangeStyle(BOTHRIGHT_TO_BACK, RIGHT_FROM_BACK)
        elseif pos == WEAPON_CHANGE_REQUEST_RIGHT_SHOULDER then
            SetHandChangeStyle(BOTHRIGHT_TO_SHOULDER, RIGHT_FROM_SHOULDER)
        else
            SetHandChangeStyle(BOTHRIGHT_TO_BACK, RIGHT_FROM_SPEAR)
        end
        act(104, 1) -- SwitchEquippedWeapon
    end
    
    if blend_type == ALLBODY and MoveStart(LOWER, Event_MoveLong, FALSE) == TRUE then
        blend_type = UPPER
    end
    
    ExecEventHalfBlend(Event_HandChangeStart, blend_type)
    SetAIActionState()
    return TRUE
end

-----------------------------------------------
-- Evasion
-----------------------------------------------
function ExecEvasion(backstep_limit, estep, is_usechainrecover)
    if c_HasActionRequest == FALSE then
        return FALSE
    end
    
    local request = GetEvasionRequest()
    
    if request == ATTACK_REQUEST_INVALID then
        return FALSE
    elseif backstep_limit == TRUE and request == ATTACK_REQUEST_BACKSTEP and env(301, 0) == TRUE then
        return FALSE
    end
    
    -- Set evasive move costs
    SetEvasionStaminaCost()
    
    -- Rolling
    if request == ATTACK_REQUEST_ROLLING then
        -- Restraint: Roll
        if env(1116, 112920) == TRUE then
            return FALSE
        end
        
        -- Trigger: Roll
        act(2002, 112930)
        
        -- Ring of Momentum/BB Dash override
        if IsRingOfMomentum() == TRUE or IsBBDashWeapon() == TRUE then 
            local index = GetWeightIndex(FALSE)
            if index < EVASION_WEIGHT_INDEX_HEAVY then
                local angle = GetVariable("MoveAngle")
                local front, back, left, right = false
                if 135 < math.abs(angle) then
                    back = true
                elseif 45 < angle then
                    right = true
                elseif angle < -45 then
                    left = true
                else
                    front = true
                end
                SetVariable("EnableTAE_CircleStepFront", front)
                SetVariable("EnableTAE_CircleStepBack", back)
                SetVariable("EnableTAE_CircleStepLeft", left)
                SetVariable("EnableTAE_CircleStepRight", right)
                if IsNodeActive("CircleStepStart_Blend") == TRUE then
                    if 0 <= angle then
                        SetVariable("CircleStepDirectionSelftrans", 1)
                    else
                        SetVariable("CircleStepDirectionSelftrans", 0)
                    end
                    SetVariable("CircleStepAngleSelftrans", angle)
                    ExecEventAllBody("W_CircleStepStartSelftrans")
                else
                    if 0 <= angle then
                        SetVariable("CircleStepDirection", 1)
                    else
                        SetVariable("CircleStepDirection", 0)
                    end
                    SetVariable("CircleStepAngle", angle)
                    ExecEventAllBody("W_CircleStepStart")
                end
                
                -- Ring of Momentum: Stamina Costs
                if env(1116, 112560) == TRUE then
                    AddStamina(-15)
                elseif env(1116, 112561) == TRUE then
                    AddStamina(-13)
                elseif env(1116, 112562) == TRUE then
                    AddStamina(-10)
                elseif env(1116, 112563) == TRUE then
                    AddStamina(-8)
                elseif env(1116, 112564) == TRUE then
                    AddStamina(-6)
                elseif env(1116, 112565) == TRUE then
                    AddStamina(-3)
                end
                
                SetAIActionState()
                return TRUE
            end
        end
        
        if is_usechainrecover == TRUE then
            local damagecount = GetVariable("DamageCount")
            if 4 <= damagecount then
                if env(301, 5) == FALSE then -- GetEventEzStateFlag
                    return FALSE
                end
            elseif damagecount == 3 then
                if env(301, 4) == FALSE then -- GetEventEzStateFlag
                    return FALSE
                end
            elseif damagecount == 2 then
                if env(301, 3) == FALSE then -- GetEventEzStateFlag
                    return FALSE
                end
            elseif damagecount <= 1 and env(301, 2) == FALSE then -- GetEventEzStateFlag
                return FALSE
            end
        end
        
        if env(1001) <= 0 then -- GetStamina
            return FALSE
        end
        
        local rollingangle = GetVariable("RollingAngle")
        
        if 0 <= rollingangle then
            SetVariable("RollingDirection", 1)
        else
            SetVariable("RollingDirection", 0)
        end
        local event = "W_Rolling"
        local weight = GetWeightIndex(FALSE)
        local is_selftrans = FALSE
        
        if env(1116, 100370) == TRUE then 
            if weight == EVASION_WEIGHT_INDEX_OVERWEIGHT then
                return FALSE
            end
            event = "W_EStepDown"
        elseif weight == EVASION_WEIGHT_INDEX_OVERWEIGHT then
            if 135 < math.abs(rollingangle) then
                event = "W_RollingOverweightBack"
            elseif 45 < rollingangle then
                event = "W_RollingOverweightRight"
            elseif rollingangle < -45 then
                event = "W_RollingOverweightLeft"
            else
                event = "W_RollingOverweightFront"
            end
        else
            if weight == EVASION_WEIGHT_INDEX_MEDIUM then
                event = event .. "Medium"
            elseif weight == EVASION_WEIGHT_INDEX_HEAVY then
                event = event .. "Heavy"
            else
                event = event .. "Light"
            end
            if IsNodeActive("Rolling_CMSG") == TRUE then
                is_selftrans = TRUE
            end
        end
        
        local turn_angle_real = 200
        
        if GetVariable("IsLockon") == true then
            act("ロックオン対象へ即座に旋回") -- TurnToLockonTargetImmediately
            turn_angle_real = math.abs(GetVariable("TurnAngle") - rollingangle)
            if 180 < turn_angle_real then
                turn_angle_real = 360 - turn_angle_real
            end
        elseif 0.00100000004749745 < math.abs(rollingangle) then
            SetTurnSpeed(0)
        else
            local move_angle = GetVariable("MoveAngle")
            if move_angle ~= 0 then
                rollingangle = move_angle
            end
        end
        
        SetVariable("TurnAngleReal", turn_angle_real)
        
        if is_selftrans == TRUE then
            event = event .. "Selftrans"
            SetVariable("RollingAngleRealSelftrans", rollingangle)
        else
            SetVariable("RollingAngleReal", rollingangle)
        end
        
        local front, back, left, right = false
        
        if 135 < math.abs(rollingangle) then
            back = true
        elseif 45 < rollingangle then
            right = true
        elseif rollingangle < -45 then
            left = true
        else
            front = true
        end
        
        SetVariable("EnableTAE_RollingFront", front)
        SetVariable("EnableTAE_RollingBack", back)
        SetVariable("EnableTAE_RollingLeft", left)
        SetVariable("EnableTAE_RollingRight", right)
        AddStamina(c_StaminaCostRolling)
        ExecEventAllBody(event)
    elseif request == ATTACK_REQUEST_JUMP then
        -- Restraint: Jump
        if env(1116, 112924) == TRUE then
            return FALSE
        end
        
        -- Trigger: Jump
        act(2002, 112931)
        
        AddStamina(c_StaminaCostJump)
        ExecEventAllBody("W_Jump")
    elseif request == ATTACK_REQUEST_BACKSTEP then
        -- Restraint: Backstep
        if env(1116, 112923) == TRUE then
            return FALSE
        end
        
        -- Trigger: Backstep
        act(2002, 112932)
        
        ResetDamageCount()
        local index = GetWeightIndex(FALSE)
        local event = "W_BackStepLight"
        if index == EVASION_WEIGHT_INDEX_SUPERLIGHT then
            event = "W_BackStepSuperlight"
        elseif index == EVASION_WEIGHT_INDEX_MEDIUM then
            event = "W_BackStepNomal"
        elseif index == EVASION_WEIGHT_INDEX_HEAVY then
            event = "W_BackStepHeavy"
        elseif index == EVASION_WEIGHT_INDEX_OVERWEIGHT then
            event = "W_BackStepOverweight"
        end
        if GetVariable("IsLockon") == true and env(1116, 100360) == TRUE then 
            act("ロックオン対象へ即座に旋回") -- TurnToLockonTargetImmediately
        end
        AddStamina(c_StaminaCostBackStep)
        ExecEventAllBody(event)
    else
        return FALSE
    end
    SetAIActionState()
    return TRUE
end

-----------------------------------------------
-- Quick Turn
-----------------------------------------------
function ExecQuickTurn(blend_type)
    if blend_type == LOWER and IsLowerQuickTurn() == TRUE then
        return FALSE
    elseif GetVariable("IsLockon") == false then
        return FALSE
    end
    local turn_angle = GetVariable("TurnAngle")
    if math.abs(turn_angle) < 45 then
        return FALSE
    elseif 45 <= turn_angle then
        ExecEventHalfBlend(Event_QuickTurnRight180, blend_type)
    else
        ExecEventHalfBlend(Event_QuickTurnLeft180, blend_type)
    end
    return TRUE
end

-----------------------------------------------
-- Dash Turn
-----------------------------------------------
function ExecDashTurn()
    if GetVariable("MoveSpeedLevel") <= 0 then
        return FALSE
    else
        local angle = math.abs(GetVariable("TurnAngle"))
        if 90 < angle then
            ExecEventHalfBlend(Event_Dash180, ALLBODY)
            return TRUE
        else
            return FALSE
        end
    end
end

-----------------------------------------------
-- Quick Turn Cancel
-----------------------------------------------
function ExecQuickTurnOnCancelTiming()
    if env(2000) == FALSE then -- IsMoveCancelPossible
        return FALSE
    elseif ExecQuickTurn(ALLBODY) == TRUE then
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Fall Start
-----------------------------------------------
function ExecFallStart(fall_type)
    if env(200) == FALSE then -- IsFalling
        return FALSE
    elseif env(1116, 4500) == TRUE or env(1116, 4502) == TRUE then 
        ExecEventAllBody("W_FallStartFaceDown")
        return TRUE
    elseif env(1116, 4501) == TRUE then 
        ExecEventAllBody("W_FallStartFaceUp")
        return TRUE
    elseif fall_type == FALL_TYPE_DEFAULT then
        if env(298) == TRUE then -- IsSpecialTransition2Possible
            local style = c_Style
            local hand = HAND_RIGHT
            if style == HAND_LEFT_BOTH then
                hand = HAND_LEFT
            end
            local check_weapon = GetEquipType(hand, WEAPON_CATEGORY_STAFF, WEAPON_CATEGORY_FIST_CUT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW, WEAPON_CATEGORY_CROSSBOW, WEAPON_CATEGORY_SMALL_SHIELD, WEAPON_CATEGORY_LARGE_SHIELD, WEAPON_CATEGORY_TORCH)
            if check_weapon == FALSE then
                ExecEventAllBody("W_FallAttackLoop")
            else
                ExecEventAllBody("W_FallStart")
            end
        else
            ExecEventAllBody("W_FallStart")
        end
    elseif fall_type == FALL_TYPE_JUMP then
        if env(1116, 100310) == TRUE then 
            ExecEventAllBody("W_FallJumpStart")
        else
            return FALSE
        end
    elseif fall_type == FALL_TYPE_FACEDOWN_LOOP then
        ExecEventAllBody("W_FallLoopFaceDown")
    elseif fall_type == FALL_TYPE_FACEDOWN then
        ExecEventAllBody("W_FallStartFaceDown")
    elseif fall_type == FALL_TYPE_FACEUP_LOOP then
        ExecEventAllBody("W_FallLoopFaceUp")
    elseif fall_type == FALL_TYPE_FACEUP then
        ExecEventAllBody("W_FallStartFaceUp")
    else
        local damage_angle = env(222) -- GetReceivedDamageDirection
        if damage_angle == DAMAGE_DIR_BACK then
            if fall_type == FALL_TYPE_FORCE_LOOP then
                ExecEventAllBody("W_FallLoopFaceDown")
            else
                ExecEventAllBody("W_FallStartFaceDown")
            end
        elseif fall_type == FALL_TYPE_FORCE_LOOP then
            ExecEventAllBody("W_FallLoopFaceUp")
        else
            ExecEventAllBody("W_FallStartFaceUp")
        end
    end
    return TRUE
end

-----------------------------------------------
-- Add Damage
-----------------------------------------------
function ExecAddDamage(damage_dir, attack_dir, damage_level, is_guard, is_damaged)
    if is_damaged == FALSE then
        return 
    elseif env(334, 9) == TRUE then -- GetBehaviorID
        return 
    elseif is_guard == TRUE then
        SetVariable("AddDamageGuardBlend", 1)
    elseif damage_level == DAMAGE_LEVEL_NONE or damage_level == DAMAGE_LEVEL_MINIMUM then
        SetVariable("AddDamageBlend", 1) 
    else
        SetVariable("DamageDirBlendRate", 1)
    end
    
    -- Add the additive damage animations based on damage direction and attack direction
    if damage_dir == DAMAGE_DIR_LEFT then
        if attack_dir == ATTACK_DIR_FRONT then
            if damage_level == DAMAGE_LEVEL_SMALL then
                ExecEventNoReset("W_DirDamageSmallLeft_Add")
                return 
            elseif damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_LARGE then
                ExecEventNoReset("W_DirDamageMediumLeft_Add")
                return 
            elseif is_guard == TRUE then
                ExecEventNoReset("W_AddDamageGuardStartLeft")
                return 
            else
                ExecEventNoReset("W_AddDamageStartLeft")
                return 
            end
        elseif attack_dir == ATTACK_DIR_UP then
            if damage_level == DAMAGE_LEVEL_SMALL then
                ExecEventNoReset("W_DirDamageSmallLeft_Add")
                return 
            elseif damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_LARGE then
                ExecEventNoReset("W_DirDamageMediumLeft_Add")
                return 
            elseif is_guard == TRUE then
                ExecEventNoReset("W_AddDamageGuardStartLeft")
                return 
            else
                ExecEventNoReset("W_AddDamageStartLeft")
                return 
            end
        elseif attack_dir == ATTACK_DIR_DOWN then
            if damage_level == DAMAGE_LEVEL_SMALL then
                ExecEventNoReset("W_DirDamageSmallLeft_Add")
                return 
            elseif damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_LARGE then
                ExecEventNoReset("W_DirDamageMediumLeft_Add")
                return 
            elseif is_guard == TRUE then
                ExecEventNoReset("W_AddDamageGuardStartLeft")
                return 
            else
                ExecEventNoReset("W_AddDamageStartLeft")
                return 
            end
        elseif attack_dir == ATTACK_DIR_LEFT then
            if damage_level == DAMAGE_LEVEL_SMALL then
                ExecEventNoReset("W_DirDamageSmallFront_Add")
                return 
            elseif damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_LARGE then
                ExecEventNoReset("W_DirDamageMediumFront_Add")
                return 
            elseif is_guard == TRUE then
                ExecEventNoReset("W_AddDamageGuardStartFront")
                return 
            else
                ExecEventNoReset("W_AddDamageStartFront")
                return 
            end
        elseif attack_dir == ATTACK_DIR_RIGHT then
            if damage_level == DAMAGE_LEVEL_SMALL then
                ExecEventNoReset("W_DirDamageSmallBack_Add")
                return 
            elseif damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_LARGE then
                ExecEventNoReset("W_DirDamageMediumBack_Add")
                return 
            elseif is_guard == TRUE then
                ExecEventNoReset("W_AddDamageGuardStartBack")
                return 
            else
                ExecEventNoReset("W_AddDamageStartBack")
                return 
            end
        end
    elseif damage_dir == DAMAGE_DIR_RIGHT then
        if attack_dir == ATTACK_DIR_FRONT then
            if damage_level == DAMAGE_LEVEL_SMALL then
                ExecEventNoReset("W_DirDamageSmallRight_Add")
                return 
            elseif damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_LARGE then
                ExecEventNoReset("W_DirDamageMediumRight_Add")
                return 
            elseif is_guard == TRUE then
                ExecEventNoReset("W_AddDamageGuardStartRight")
                return 
            else
                ExecEventNoReset("W_AddDamageStartRight")
                return 
            end
        elseif attack_dir == ATTACK_DIR_UP then
            if damage_level == DAMAGE_LEVEL_SMALL then
                ExecEventNoReset("W_DirDamageSmallRight_Add")
                return 
            elseif damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_LARGE then
                ExecEventNoReset("W_DirDamageMediumRight_Add")
                return 
            elseif is_guard == TRUE then
                ExecEventNoReset("W_AddDamageGuardStartRight")
                return 
            else
                ExecEventNoReset("W_AddDamageStartRight")
                return 
            end
        elseif attack_dir == ATTACK_DIR_DOWN then
            if damage_level == DAMAGE_LEVEL_SMALL then
                ExecEventNoReset("W_DirDamageSmallRight_Add")
                return 
            elseif damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_LARGE then
                ExecEventNoReset("W_DirDamageMediumRight_Add")
                return 
            elseif is_guard == TRUE then
                ExecEventNoReset("W_AddDamageGuardStartRight")
                return 
            else
                ExecEventNoReset("W_AddDamageStartRight")
                return 
            end
        elseif attack_dir == ATTACK_DIR_LEFT then
            if damage_level == DAMAGE_LEVEL_SMALL then
                ExecEventNoReset("W_DirDamageSmallBack_Add")
                return 
            elseif damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_LARGE then
                ExecEventNoReset("W_DirDamageMediumBack_Add")
                return 
            elseif is_guard == TRUE then
                ExecEventNoReset("W_AddDamageGuardStartBack")
                return 
            else
                ExecEventNoReset("W_AddDamageStartBack")
                return 
            end
        elseif attack_dir == ATTACK_DIR_RIGHT then
            if damage_level == DAMAGE_LEVEL_SMALL then
                ExecEventNoReset("W_DirDamageSmallFront_Add")
                return 
            elseif damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_LARGE then
                ExecEventNoReset("W_DirDamageMediumFront_Add")
                return 
            elseif is_guard == TRUE then
                ExecEventNoReset("W_AddDamageGuardStartFront")
                return 
            else
                ExecEventNoReset("W_AddDamageStartFront")
                return 
            end
        end
    elseif damage_dir == DAMAGE_DIR_FRONT then
        if attack_dir == ATTACK_DIR_FRONT then
            if damage_level == DAMAGE_LEVEL_SMALL then
                ExecEventNoReset("W_DirDamageSmallFront_Add")
                return 
            elseif damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_LARGE then
                ExecEventNoReset("W_DirDamageMediumFront_Add")
                return 
            elseif is_guard == TRUE then
                ExecEventNoReset("W_AddDamageGuardStartFront")
                return 
            else
                ExecEventNoReset("W_AddDamageStartFront")
                return 
            end
        elseif attack_dir == ATTACK_DIR_UP then
            if damage_level == DAMAGE_LEVEL_SMALL then
                ExecEventNoReset("W_DirDamageSmallUp_Add")
                return 
            elseif damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_LARGE then
                ExecEventNoReset("W_DirDamageMediumUp_Add")
                return 
            elseif is_guard == TRUE then
                ExecEventNoReset("W_AddDamageGuardStartFront")
                return 
            else
                ExecEventNoReset("W_AddDamageStartFront")
                return 
            end
        elseif attack_dir == ATTACK_DIR_DOWN then
            if damage_level == DAMAGE_LEVEL_SMALL then
                ExecEventNoReset("W_DirDamageSmallDown_Add")
                return 
            elseif damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_LARGE then
                ExecEventNoReset("W_DirDamageMediumDown_Add")
                return 
            elseif is_guard == TRUE then
                ExecEventNoReset("W_AddDamageGuardStartFront")
                return 
            else
                ExecEventNoReset("W_AddDamageStartFront")
                return 
            end
        elseif attack_dir == ATTACK_DIR_LEFT then
            if damage_level == DAMAGE_LEVEL_SMALL then
                ExecEventNoReset("W_DirDamageSmallRight_Add")
                return 
            elseif damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_LARGE then
                ExecEventNoReset("W_DirDamageMediumRight_Add")
                return 
            elseif is_guard == TRUE then
                ExecEventNoReset("W_AddDamageGuardStartRight")
                return 
            else
                ExecEventNoReset("W_AddDamageStartRight")
                return 
            end
        elseif attack_dir == ATTACK_DIR_RIGHT then
            if damage_level == DAMAGE_LEVEL_SMALL then
                ExecEventNoReset("W_DirDamageSmallLeft_Add")
                return 
            elseif damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_LARGE then
                ExecEventNoReset("W_DirDamageMediumLeft_Add")
                return 
            elseif is_guard == TRUE then
                ExecEventNoReset("W_AddDamageGuardStartLeft")
                return 
            else
                ExecEventNoReset("W_AddDamageStartLeft")
                return 
            end
        end
    elseif damage_dir == DAMAGE_DIR_BACK then
        if attack_dir == ATTACK_DIR_FRONT then
            if damage_level == DAMAGE_LEVEL_SMALL then
                ExecEventNoReset("W_DirDamageSmallBack_Add")
                return 
            elseif damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_LARGE then
                ExecEventNoReset("W_DirDamageMediumBack_Add")
                return 
            else
                ExecEventNoReset("W_AddDamageStartBack")
                return 
            end
        elseif attack_dir == ATTACK_DIR_UP then
            if damage_level == DAMAGE_LEVEL_SMALL then
                ExecEventNoReset("W_DirDamageSmallBack_Add")
                return 
            elseif damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_LARGE then
                ExecEventNoReset("W_DirDamageMediumBack_Add")
                return 
            else
                ExecEventNoReset("W_AddDamageStartBack")
                return 
            end
        elseif attack_dir == ATTACK_DIR_DOWN then
            if damage_level == DAMAGE_LEVEL_SMALL then
                ExecEventNoReset("W_DirDamageSmallBack_Add")
                return 
            elseif damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_LARGE then
                ExecEventNoReset("W_DirDamageMediumBack_Add")
                return 
            else
                ExecEventNoReset("W_AddDamageStartBack")
                return 
            end
        elseif attack_dir == ATTACK_DIR_LEFT then
            if damage_level == DAMAGE_LEVEL_SMALL then
                ExecEventNoReset("W_DirDamageSmallLeft_Add")
                return 
            elseif damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_LARGE then
                ExecEventNoReset("W_DirDamageMediumLeft_Add")
                return 
            else
                ExecEventNoReset("W_AddDamageStartLeft")
                return 
            end
        elseif attack_dir == ATTACK_DIR_RIGHT then
            if damage_level == DAMAGE_LEVEL_SMALL then
                ExecEventNoReset("W_DirDamageSmallRight_Add")
                return 
            elseif damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_LARGE then
                ExecEventNoReset("W_DirDamageMediumRight_Add")
                return 
            else
                ExecEventNoReset("W_AddDamageStartRight")
                return 
            end
        end
    end
    return 
end

-----------------------------------------------
-- Passive Action
-----------------------------------------------
function ExecPassiveAction(is_parry, fall_type, is_attackwhileguard)
    if env(1112) == TRUE then -- HasThrowRequest
        ResetDamageCount()
        return TRUE
    elseif ExecDeath() == TRUE then
        return TRUE
    elseif env("イベントアニメ再生要求があるか") == TRUE then -- CheckForEventAnimPlaybackRequest
        ResetDamageCount()
        return TRUE
    elseif ExecDamage(is_parry, is_attackwhileguard) == TRUE then
        return TRUE
    elseif ExecSlide() == TRUE then
        return TRUE
    elseif ExecFallStart(fall_type) == TRUE then
        ResetDamageCount()
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Is Dead
-----------------------------------------------
function IsDead()
    if env(202) == DAMAGE_TYPE_DEATH or env(1000) <= 0 then -- GetReceivedDamageType and GetHP
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Is Land Dead
-----------------------------------------------
function IsLandDead(height)
    if env(1000) <= 0 then -- GetHP
        return TRUE
    elseif 20 < height and env(1101) == FALSE and env(1116, 4050) == FALSE and env(1116, 4060) == FALSE and env(1116, 4070) == FALSE and env(1116, 4080) == FALSE then -- IsInvincibleDebugMode
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Death
-----------------------------------------------
function ExecDeath()
    if IsDead() == TRUE then
        if env(202) ~= DAMAGE_TYPE_DEATH_FALLING and env(1116, 103520000) == TRUE then -- GetReceivedDamageType 
            -- Tears of Denial
            return FALSE
        end
        
        -- Deathless Run Failure
        if env(1007) == FALSE then -- IsCOMPlayer
            act(2002, 112100)
            act(2002, 112101) -- Hitless
        end
        
        local damage_angle = env(222) -- GetReceivedDamageDirection
        SetVariable("DamageDirection", damage_angle)
        if env(1121) < 0 then -- GetKnockbackDistance
            if damage_angle == DAMAGE_DIR_LEFT then
                damage_angle = DAMAGE_DIR_RIGHT
            elseif damage_angle == DAMAGE_DIR_RIGHT then
                damage_angle = DAMAGE_DIR_LEFT
            elseif damage_angle == DAMAGE_DIR_FRONT then
                damage_angle = DAMAGE_DIR_BACK
            elseif damage_angle == DAMAGE_DIR_BACK then
                damage_angle = DAMAGE_DIR_FRONT
            end
        end
        local damage_level = env(236) -- GetDamageLevel
        if env(305, CONDITION_TYPE_STONE) == TRUE then -- GetStateChangeType
            SetVariable("IndexDeath", DEATH_TYPE_STONE)
        elseif env(305, CONDITION_TYPE_CRYSTAL) == TRUE then -- GetStateChangeType
            SetVariable("IndexDeath", DEATH_TYPE_STONE)
        elseif env(283) == TRUE then -- IsOnLadder
            SetVariable("IndexDeath", DEATH_TYPE_LADDER)
        elseif env(265) == TRUE then -- GetIsWeakPoint
            SetVariable("IndexDeath", DEATH_TYPE_WEAK)
        elseif damage_level == DAMAGE_LEVEL_EXLARGE or damage_level == DAMAGE_LEVEL_SMALL_BLOW then
            SetVariable("IndexDeath", DEATH_TYPE_BLAST)
        elseif damage_level == DAMAGE_LEVEL_UPPER then
            SetVariable("IndexDeath", DEATH_TYPE_UPPER)
        elseif damage_level == DAMAGE_LEVEL_FLING then
            SetVariable("IndexDeath", DEATH_TYPE_FLING)
        else
            SetVariable("DamageState", env(1003, 0, 3)) -- GetRandomInt
            if damage_angle == DAMAGE_DIR_BACK then
                SetVariable("IndexDeath", DEATH_TYPE_COMMON_BACK)
            else
                SetVariable("IndexDeath", DEATH_TYPE_COMMON)
            end
        end
        ExecEventAllBody("W_DeathStart")
        return TRUE
    elseif env(1101) == FALSE then
        if env(305, CONDITION_TYPE_STONE) == TRUE or env(305, CONDITION_TYPE_CRYSTAL) == TRUE then
            SetVariable("IndexDeath", DEATH_TYPE_STONE)
            ExecEventAllBody("W_DeathStart")
            return TRUE
        elseif env(305, CONDITION_TYPE_TAINTDEATH) == TRUE then
            SetVariable("IndexDeath", DEATH_TYPE_TAINT)
            ExecEventAllBody("W_DeathStart")
            return TRUE
        end
    end
    return 
end

-----------------------------------------------
-- Damage
-----------------------------------------------
function ExecDamage(is_parry, is_attackwhileguard)
    local damage_level = env(236) -- GetDamageLevel
    local damage_type = env(202) -- GetReceivedDamageType
    local is_damaged = env(256) -- HasReceivedAnyDamage
    
    -- Hitless Run Failure
    if is_damaged == TRUE then
        if env(1007) == FALSE then -- IsCOMPlayer
            act(2002, 112101)
        end
    end
    
    if damage_level <= DAMAGE_LEVEL_NONE and is_damaged == FALSE and (damage_type == DAMAGE_TYPE_INVALID or damage_type == DAMAGE_TYPE_WEAK_POINT or damage_type == DAMAGE_LEVEL_MINIMUM) then
        return FALSE
    end
    local attack_dir = env(1119) -- GetAtkDirection
    local damage_angle = env(222) -- GetReceivedDamageDirection
    local style = c_Style
    
    -- Gower's Ring of Protection
    if IsGowersRingOfRetribution() == TRUE then
        if damage_angle == DAMAGE_DIR_BACK then
            act(2002, 112506) -- Shatter window
        end
    end
    
    -- Cursed Ring of Vengeance
    if env(1116, 115100) == TRUE then
        if is_damaged == TRUE then
            act(2002, 115101)
        end
    end
    
    -- Redeye Ring
    if env(1116, 112520) == TRUE then
        act(2002, 112521)
    end
    
    if damage_type == DAMAGE_TYPE_PARRY then
        ExecEventAllBody("W_DamageParry")
        return TRUE
    elseif damage_type == DAMAGE_TYPE_GUARD and env(334, 4) == TRUE then -- GetBehaviorID
        damage_type = DAMAGE_TYPE_GUARDBREAK
    end
    
    if DAMAGE_TYPE_GUARDED <= damage_type and damage_type <= DAMAGE_TYPE_WALL_LEFT then
        Replanning()
        if (damage_type == DAMAGE_TYPE_GUARDBREAK_BLAST or damage_type == DAMAGE_TYPE_GUARDBREAK_FLING) and IsGuardbreakBlowDamage(damage_level) == FALSE then
            damage_type = DAMAGE_TYPE_GUARDBREAK
        end
        if damage_type == DAMAGE_TYPE_GUARDED then
            if style == HAND_RIGHT then
                SetVariable("GuardDamageIndex", 1)
            else
                SetVariable("GuardDamageIndex", 2)
            end
            act(141, DAMAGE_FLAG_GUARD_BREAK) -- SetDamageAnimType
            ExecEventAllBody("W_GuardDamageBreak")
            return TRUE
        elseif damage_type == DAMAGE_TYPE_GUARDED_LEFT then
            SetVariable("GuardDamageIndex", 0)
            act(141, DAMAGE_FLAG_GUARD_BREAK) -- SetDamageAnimType
            ExecEventAllBody("W_GuardDamageBreak")
            return TRUE
        elseif damage_type == DAMAGE_TYPE_GUARDBREAK then
            if is_parry == TRUE then
                return FALSE
            elseif env(1116, 100350) == TRUE then 
                -- Shield Bash
                return FALSE
            end
            local guardindex = GUARD_STYLE_DEFAULT
            if style == HAND_RIGHT then
                guardindex = env(278, HAND_LEFT) -- GetGuardMotionCategory
                if env(225, HAND_LEFT) == WEAPON_CATEGORY_TORCH or env("装備武器特殊カテゴリ番号取得", HAND_LEFT) == 240 then -- GetEquipWeaponCategory and GetEquipWeaponSpecialCategoryNumber   
                    -- Follower Torch
                    SetVariable("IsTorchGuard", TRUE)
                else
                    SetVariable("IsTorchGuard", FALSE)
                end
            elseif style == HAND_LEFT_BOTH then
                SetVariable("IsTorchGuard", FALSE)
                if env("待機アニメカテゴリ取得") == 15 then -- GetStayAnimCategory
                    guardindex = env(278, HAND_LEFT) -- GetGuardMotionCategory
                end
            elseif style == HAND_RIGHT_BOTH then
                SetVariable("IsTorchGuard", FALSE)
                if env("待機アニメカテゴリ取得") == 15 then -- GetStayAnimCategory
                    guardindex = env(278, HAND_RIGHT) -- GetGuardMotionCategory
                end
            end
            SetVariable("IndexGuard", guardindex)
            act(141, DAMAGE_FLAG_GUARD_BREAK) -- SetDamageAnimType
            local isguardgentrans = FALSE
            if env(1116, 100520) == TRUE then 
                -- Guard Break
                isguardgentrans = TRUE
            end
            if isguardgentrans == TRUE then
                ExecEventAllBody("W_GuardBreak_GenTrans")
                return TRUE
            else
                ExecEventAllBody("W_GuardBreak")
                return TRUE
            end
        elseif damage_type == DAMAGE_TYPE_WALL_RIGHT then
            if style == HAND_RIGHT then
                SetVariable("GuardDamageIndex", 1)
            else
                SetVariable("GuardDamageIndex", 2)
            end
            act(141, DAMAGE_FLAG_GUARD_BREAK) -- SetDamageAnimType
            ExecEventAllBody("W_GuardBreakWall")
            return TRUE
        elseif damage_type == DAMAGE_TYPE_WALL_LEFT then
            SetVariable("GuardDamageIndex", 0)
            act(141, DAMAGE_FLAG_GUARD_BREAK) -- SetDamageAnimType
            ExecEventAllBody("W_GuardBreakWall")
            return TRUE
        elseif damage_type == DAMAGE_TYPE_GUARDBREAK_BLAST then
            SetVariable("DamageDirection", damage_angle)
            act(141, DAMAGE_FLAG_SMALL_BLOW) -- SetDamageAnimType
            ExecEventAllBody("W_DamageSmallBlow")
            return TRUE
        elseif damage_type == DAMAGE_TYPE_GUARDBREAK_FLING then
            act(141, DAMAGE_FLAG_FLING) -- SetDamageAnimType
            ExecEventAllBody("W_DamageFling")
            return TRUE
        end
    elseif damage_type == DAMAGE_TYPE_GUARD then
        if is_parry == TRUE then
            return FALSE
        elseif env(1116, 100690) == TRUE and env(334, 11) == TRUE then
            -- Guard
            ExecEventAllBody("W_DrawStanceRightHeavyLoopGuard")
            return TRUE
        elseif env(1116, 100350) == TRUE then 
            -- Shield Bash
            return FALSE
        elseif env(1116, 100700) == TRUE then 
            -- Guard
            return FALSE
        elseif env(1116, 100510) == TRUE then 
            -- Guard
            return FALSE
        end
        local guardindex = GUARD_STYLE_DEFAULT
        if style == HAND_RIGHT then
            guardindex = env(278, HAND_LEFT) -- GetGuardMotionCategory
            if env(225, HAND_LEFT) == WEAPON_CATEGORY_TORCH or env("装備武器特殊カテゴリ番号取得", HAND_LEFT) == 240 then -- GetEquipWeaponCategory and GetEquipWeaponSpecialCategoryNumber
                -- Follower Torch
                SetVariable("IsTorchGuard", TRUE)
            else
                SetVariable("IsTorchGuard", FALSE)
            end
        elseif style == HAND_LEFT_BOTH then
            SetVariable("IsTorchGuard", FALSE)
            if env("待機アニメカテゴリ取得") == 15 then -- GetStayAnimCategory
                guardindex = env(278, HAND_LEFT) -- GetGuardMotionCategory
            end
        elseif style == HAND_RIGHT_BOTH then
            SetVariable("IsTorchGuard", FALSE)
            if env("待機アニメカテゴリ取得") == 15 then -- GetStayAnimCategory
                guardindex = env(278, HAND_RIGHT) -- GetGuardMotionCategory
            end
        end
        SetVariable("IndexGuard", guardindex)
        local guard_damage_level = env(237) -- GetGuardLevelAction
        if 0 < guard_damage_level then
            if env(1116, 100420) == TRUE then 
                -- Dragonhead Greatshield
                ExecAddDamage(damage_angle, attack_dir, nil, TRUE, TRUE)
                return FALSE
            end
            local isguardgentrans = FALSE
            if env(1116, 100520) == TRUE then 
                -- Guard Break
                isguardgentrans = TRUE
            end
            local guarddamagesmall = "W_GuardDamageSmall"
            local guarddamagemiddle = "W_GuardDamageMiddle"
            local guarddamagelarge = "W_GuardDamageLarge"
            if isguardgentrans == TRUE then
                guarddamagesmall = "W_GuardDamageSmall_GenTrans"
                guarddamagemiddle = "W_GuardDamageMiddle_GenTrans"
                guarddamagelarge = "W_GuardDamageLarge_GenTrans"
            end
            if guard_damage_level == 1 then
                act(141, DAMAGE_FLAG_GUARD_SMALL) -- SetDamageAnimType
                ExecEventAllBody(guarddamagesmall)
            elseif guard_damage_level == 3 then
                act(141, DAMAGE_FLAG_GUARD_LARGE) -- SetDamageAnimType
                ExecEventAllBody(guarddamagemiddle)
            elseif guard_damage_level == 4 then
                act(141, DAMAGE_FLAG_GUARD_EXLARGE) -- SetDamageAnimType
                ExecEventAllBody(guarddamagelarge)
            else
                act(141, DAMAGE_FLAG_GUARD_LARGE) -- SetDamageAnimType
                ExecEventAllBody(guarddamagemiddle)
            end
            return TRUE
        else
            ExecAddDamage(damage_angle, attack_dir, damage_level, TRUE, is_damaged)
            return FALSE
        end
    end
    if env(334, 5) == TRUE then -- GetBehaviorID
        Replanning()
        local blend_type, lower_state = GetHalfBlendInfo()
        act(141, DAMAGE_FLAG_SMALL) -- SetDamageAnimType
        ExecEventHalfBlend(Event_Event61000, blend_type)
        return TRUE
    elseif env(334, 10) == TRUE then -- GetBehaviorID
        Replanning()
        ResetDamageCount()
        act(141, DAMAGE_FLAG_SMALL) -- SetDamageAnimType
        ExecEvent("W_SpecialDamageUpper")
        return TRUE
    elseif env(1121) < 0 then -- GetKnockbackDistance
        if damage_angle == DAMAGE_DIR_LEFT then
            damage_angle = DAMAGE_DIR_RIGHT
        elseif damage_angle == DAMAGE_DIR_RIGHT then
            damage_angle = DAMAGE_DIR_LEFT
        elseif damage_angle == DAMAGE_DIR_FRONT then
            damage_angle = DAMAGE_DIR_BACK
        elseif damage_angle == DAMAGE_DIR_BACK then
            damage_angle = DAMAGE_DIR_FRONT
        end
    end
    
    -- Fake Poise System --
    if env(1007) == TRUE then -- IsCOMPlayer
        if is_damaged == TRUE and damage_level ~= DAMAGE_LEVEL_NONE then -- Is hit by attack that isn't set to Damage Level 0
            -- Skip if already in stagger state
            if env(1116, 112300) == FALSE then 
                -- No Stagger Threshold
                if env(1116, 112351) == FALSE and env(1116, 112352) == FALSE and env(1116, 112353) == FALSE then
                    act(2002, 112300) -- Easy stagger
                end
                
                -- Stagger Threshold: 1
                if env(1116, 112351) == TRUE then
                    if env(1116, 112301) == FALSE then
                        act(2002, 112301) -- Hit 1
                    elseif env(1116, 112301) == TRUE then
                        act(2002, 112300) -- Easy stagger
                    end
                end
                
                -- Stagger Threshold: 2
                if env(1116, 112352) == TRUE then
                    if env(1116, 112301) == FALSE then
                        act(2002, 112301) -- Hit 1
                    elseif env(1116, 112301) == TRUE and env(1116, 112302) == FALSE then
                        act(2002, 112302) -- Hit 2
                    elseif env(1116, 112302) == TRUE then
                        act(2002, 112300) -- Easy stagger
                    end
                end
                
                -- Stagger Threshold: 3
                if env(1116, 112353) == TRUE then
                    if env(1116, 112301) == FALSE then
                        act(2002, 112301) -- Hit 1
                    elseif env(1116, 112301) == TRUE and env(1116, 112302) == FALSE then
                        act(2002, 112302) -- Hit 2
                    elseif env(1116, 112302) == TRUE and env(1116, 112303) == FALSE then
                        act(2002, 112303) -- Hit 3
                    elseif env(1116, 112303) == TRUE then
                        act(2002, 112300) -- Easy stagger
                    end
                end
            end
        end
    end
    
    -- Damage Level Shift: Light Armor
    if env(1116, 112300) == TRUE then 
        if damage_level == DAMAGE_LEVEL_NONE then
            damage_level = DAMAGE_LEVEL_MIDDLE
        end
    end

    if env(265) == TRUE then -- GetIsWeakPoint
        CalcDamageCount()
        SetVariable("DamageDirection", damage_angle)
        act(141, DAMAGE_FLAG_WEAK) -- SetDamageAnimType
        ExecEventAllBody("W_DamageWeak")
        Replanning()
        return TRUE
    elseif damage_level == DAMAGE_LEVEL_NONE then
        ExecAddDamage(damage_angle, attack_dir, damage_level, FALSE, is_damaged)
        return FALSE
    elseif damage_level == DAMAGE_LEVEL_SMALL then
        CalcDamageCount()
        SetVariable("DamageDirection", damage_angle)
        ExecAddDamage(damage_angle, attack_dir, damage_level, FALSE, is_damaged)
        act(141, DAMAGE_FLAG_SMALL) -- SetDamageAnimType
        ExecEventAllBody("W_DamageSmall")
        Replanning()
        SetVariable("DamageDefaultState", 0)
        return TRUE
    elseif damage_level == DAMAGE_LEVEL_MIDDLE then
        CalcDamageCount()
        SetVariable("DamageDirection", damage_angle)
        ExecAddDamage(damage_angle, attack_dir, damage_level, FALSE, is_damaged)
        act(141, DAMAGE_FLAG_MEDIUM) -- SetDamageAnimType
        ExecEventAllBody("W_DamageMiddle")
        Replanning()
        SetVariable("DamageDefaultState", 1)
        return TRUE
    elseif damage_level == DAMAGE_LEVEL_LARGE then
        CalcDamageCount()
        SetVariable("DamageDirection", damage_angle)
        ExecAddDamage(damage_angle, attack_dir, damage_level, FALSE, is_damaged)
        act(141, DAMAGE_FLAG_LARGE) -- SetDamageAnimType
        Replanning()
        if env(334, 2) == TRUE then -- GetBehaviorID
            SetVariable("DamageDefaultState", 3)
            ExecEventAllBody("W_DamageLarge2")
            return TRUE
        else
            SetVariable("DamageDefaultState", 2)
            ExecEventAllBody("W_DamageLarge")
            return TRUE
        end
    elseif damage_level == DAMAGE_LEVEL_EXLARGE then
        ResetDamageCount()
        SetVariable("DamageDirection", damage_angle)
        act(141, DAMAGE_FLAG_LARGE_BLOW) -- SetDamageAnimType
        ExecEventAllBody("W_DamageExLarge")
        Replanning()
        return TRUE
    elseif damage_level == DAMAGE_LEVEL_EX_BLAST then
        SetVariable("DamageDirection", damage_angle)
        act(141, DAMAGE_FLAG_LARGE_BLOW) -- SetDamageAnimType
        ExecEventAllBody("W_DamageExBlast")
        Replanning()
        return TRUE
    elseif damage_level == DAMAGE_LEVEL_PUSH then
        CalcDamageCount()
        SetVariable("DamageDirection", damage_angle)
        act(141, DAMAGE_FLAG_PUSH) -- SetDamageAnimType
        ExecEventAllBody("W_DamagePush")
        Replanning()
        return TRUE
    elseif damage_level == DAMAGE_LEVEL_SMALL_BLOW then
        ResetDamageCount()
        SetVariable("DamageDirection", damage_angle)
        act(141, DAMAGE_FLAG_SMALL_BLOW) -- SetDamageAnimType
        ExecEventAllBody("W_DamageSmallBlow")
        Replanning()
        return TRUE
    elseif damage_level == DAMAGE_LEVEL_UPPER then
        ResetDamageCount()
        SetVariable("DamageDirection", damage_angle)
        act(141, DAMAGE_FLAG_LARGE_BLOW) -- SetDamageAnimType
        ExecEventAllBody("W_DamageUpper")
        Replanning()
        return TRUE
    elseif damage_level == DAMAGE_LEVEL_MINIMUM then
        ExecAddDamage(damage_angle, attack_dir, damage_level, FALSE, is_damaged)
        return FALSE
    elseif damage_level == DAMAGE_LEVEL_FLING then
        ResetDamageCount()
        SetVariable("DamageDirection", damage_angle)
        act(141, DAMAGE_FLAG_FLING) -- SetDamageAnimType
        ExecEventAllBody("W_DamageFling")
        Replanning()
        return TRUE
    elseif damage_level == DAMAGE_LEVEL_BREATH then
        ResetDamageCount()
        SetVariable("DamageDirection", damage_angle)
        act(141, DAMAGE_FLAG_BREATH) -- SetDamageAnimType
        ExecEventAllBody("W_DamageBreath")
        Replanning()
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Guard On Cancel
-----------------------------------------------
function ExecGuardOnCancelTiming(guardcondition, blend_type)
    -- IsGuardFromAtkCancel
    if env(243) == FALSE then 
        return FALSE
    elseif guardcondition == TO_GUARDON then
        if ExecGuard(Event_GuardOn, blend_type) == TRUE then
            return TRUE
        end
    elseif ExecGuard(Event_GuardStart, blend_type) == TRUE then
        return TRUE
    end
    
    return FALSE
end

-----------------------------------------------
-- Ladder Idle
-----------------------------------------------
function LadderIdleCommonFunction(hand)
    act(147) -- SetIsEquipmentChangeableFromMenu
    if ExecLadderDeath() == TRUE then
        return TRUE
    elseif ExecLadderDamageIdle(hand) == TRUE then
        return TRUE
    elseif ExecLadderAttack(hand) == TRUE then
        return TRUE
    elseif ExecLadderItem(hand) == TRUE then
        return TRUE
    elseif ExecLadderMove(hand) == TRUE then
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Ladder Move
-----------------------------------------------
function LadderMoveCommonFunction(hand, is_no_damage)
    act(147) -- SetIsEquipmentChangeableFromMenu
    if ExecLadderDeath() == TRUE then
        return TRUE
    elseif is_no_damage == FALSE and ExecLadderDamageMove() == TRUE then

    end
    if env("アニメ終了か", 1) == TRUE then -- IsAnimEnd
        if IsLadderDamage(hand) == TRUE then
            return TRUE
        elseif ExecLadderAttack(hand) == TRUE then
            return TRUE
        elseif ExecLadderItem(hand) == TRUE then
            return TRUE
        elseif ExecLadderMove(hand) == TRUE then
            return TRUE
        elseif hand == HAND_STATE_LEFT then
            ExecEvent("W_LadderIdleLeft")
        else
            ExecEvent("W_LadderIdleRight")
        end
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Ladder Attack
-----------------------------------------------
function LadderAttackCommonFunction(hand)
    act(147) -- SetIsEquipmentChangeableFromMenu
    if ExecLadderDeath() == TRUE then
        return TRUE
    elseif ExecLadderDamageIdle(hand) == TRUE then
        return TRUE
    elseif env("アニメ終了か", 1) == TRUE then -- IsAnimEnd
        if ExecLadderAttack(hand) == TRUE then
            return TRUE
        elseif ExecLadderItem(hand) == TRUE then
            return TRUE
        elseif ExecLadderMove(hand) == TRUE then
            return TRUE
        elseif hand == HAND_STATE_LEFT then
            ExecEvent("W_LadderIdleLeft")
        else
            ExecEvent("W_LadderIdleRight")
        end
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Ladder Damage
-----------------------------------------------
function LadderDamageCommonFunction(hand)
    act(147) -- SetIsEquipmentChangeableFromMenu
    if ExecLadderDeath() == TRUE then
        return TRUE
    elseif ExecLadderDamageIdle(hand) == TRUE then
        return TRUE
    elseif env("アニメ終了か", 1) == TRUE then -- IsAnimEnd
        if ExecLadderAttack(hand) == TRUE then
            return TRUE
        elseif ExecLadderItem(hand) == TRUE then
            return TRUE
        elseif ExecLadderMove(hand) == TRUE then
            return TRUE
        elseif hand == HAND_STATE_RIGHT then
            ExecEvent("W_LadderIdleRight")
        else
            ExecEvent("W_LadderIdleLeft")
        end
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Ladder End
-----------------------------------------------
function LadderEndCommonFunction()
    act(147) -- SetIsEquipmentChangeableFromMenu
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        LadderSetActionState(LADDER_ACTION_INVALID)
        return TRUE
    elseif ExecGuardOnCancelTiming(FALSE, ALLBODY) == TRUE then
        LadderSetActionState(LADDER_ACTION_INVALID)
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, ALLBODY) == TRUE then
        LadderSetActionState(LADDER_ACTION_INVALID)
        return TRUE
    elseif ExecWeaponChange(ALLBODY) == TRUE then
        LadderSetActionState(LADDER_ACTION_INVALID)
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        LadderSetActionState(LADDER_ACTION_INVALID)
        return TRUE
    elseif ExecItem(QUICKTYPE_NORMAL, ALLBODY) == TRUE then
        LadderSetActionState(LADDER_ACTION_INVALID)
        return TRUE
    elseif ExecSwordArtsStanceOnCancelTiming(ALLBODY) == TRUE then
        LadderSetActionState(LADDER_ACTION_INVALID)
        return TRUE
    elseif ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, ALLBODY, FALSE, FALSE) == TRUE then
        LadderSetActionState(LADDER_ACTION_INVALID)
        return TRUE
    elseif MoveStartonCancelTiming(Event_Move, FALSE) == TRUE then
        LadderSetActionState(LADDER_ACTION_INVALID)
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Ladder Item
-----------------------------------------------
function LadderItemCommonFunction(hand, tonext)
    act("アイテムアニメ中か設定") -- Set item animation in progress
    if ExecLadderDeath() == TRUE then
        return TRUE
    elseif ExecLadderDamageIdle(hand) == TRUE then
        return TRUE
    elseif env("アニメ終了か", 1) == TRUE then -- IsAnimEnd
        if ExecLadderItem(hand) == TRUE then
            return TRUE
        elseif tonext == FALSE then
            if ExecLadderAttack(hand) == TRUE then
                return TRUE
            elseif ExecLadderMove(hand) == TRUE then
                return TRUE
            elseif hand == HAND_STATE_RIGHT then
                ExecEvent("W_LadderIdleRight")
            else
                ExecEvent("W_LadderIdleLeft")
            end
            return TRUE
        else
            return FALSE
        end
    else
        return FALSE
    end
end

-----------------------------------------------
-- Ladder Death
-----------------------------------------------
function ExecLadderDeath()
    local hp = env(1000) -- GetHP
    if hp <= 0 then
        ExecEvent("W_LadderDeathStart")
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Ladder Damage Idle
-----------------------------------------------
function ExecLadderDamageIdle(hand)
    if env(256) == FALSE then -- HasReceivedAnyDamage
        return FALSE
    elseif env(1001) <= 80 then -- GetStamina
        AddStamina(-40)
        if ExecLadderFall() == TRUE then
            return TRUE
        elseif hand == HAND_STATE_LEFT then
            ExecEvent("W_LadderDamageLargeLeft")
        else
            ExecEvent("W_LadderDamageLargeRight")
        end
    else
        AddStamina(-30)
        if ExecLadderFall() == TRUE then
            return TRUE
        elseif hand == HAND_STATE_LEFT then
            ExecEvent("W_LadderDamageSmallLeft")
        else
            ExecEvent("W_LadderDamageSmallRight")
        end
    end
    return TRUE
end

-----------------------------------------------
-- Ladder Damage Move
-----------------------------------------------
function ExecLadderDamageMove()
    if env(256) == FALSE then -- HasReceivedAnyDamage
        return FALSE
    elseif env(1001) <= 80 then -- GetStamina
        Flag_LadderDamage = LADDER_DAMAGE_LARGE
    else
        Flag_LadderDamage = LADDER_DAMAGE_SMALL
    end
    return TRUE
end

-----------------------------------------------
-- Ladder Fall
-----------------------------------------------
function ExecLadderFall()
    if 0 < env(1001) then -- GetStamina
        return FALSE
    else
        ExecEvent("W_LadderFallStart")
        return TRUE
    end
end

-----------------------------------------------
-- Ladder Move
-----------------------------------------------
function ExecLadderMove(hand)
    local sp_action = env(1108, ACTION_ARM_SP_MOVE) -- ActionDuration
    if sp_action == 0 then
        if Flag_LadderJump == LADDER_JUMP_WHEN_RELEASE and env(1106, ACTION_ARM_BACKSTEP) == TRUE and env(306) == FALSE then -- ActionRequest and IsOnLastRungOfLadder
            LadderSendCommand(LADDER_EVENT_COMMAND_EXIT)
            LadderSetActionState(LADDER_ACTION_INVALID)
            ExecEvent("W_LadderDrop")
            return TRUE
        end
        Flag_LadderJump = LADDER_JUMP_SP_RELEASED
    elseif sp_action < 150 then
        if Flag_LadderJump == LADDER_JUMP_SP_RELEASED then
            Flag_LadderJump = LADDER_JUMP_WHEN_RELEASE
        end
    else
        Flag_LadderJump = LADDER_JUMP_INVALID
    end
    local event_command = GetLadderEventCommand(FALSE)
    if event_command <= 0 then
        return FALSE
    elseif event_command == LADDER_EVENT_COMMAND_UP then
        if env(1007) == TRUE and env(294, LADDER_UP_CHECK_DIST, 1, 1) == TRUE then -- IsCOMPlayer and DoesLadderHaveCharacters
            if hand == HAND_STATE_RIGHT then
                ExecEvent("W_LadderAttackUpRight")
            else
                ExecEvent("W_LadderAttackUpLeft")
            end
            return TRUE
        elseif env(291, LADDER_UP_CHECK_DIST, 0) == TRUE then -- IsSomeoneOnLadder
            return FALSE
        elseif 0 < env(1108, ACTION_ARM_SP_MOVE) then -- ActionDuration
            SetVariable("IsFastUp", TRUE)
        else
            SetVariable("IsFastUp", FALSE)
        end
        if hand == HAND_STATE_LEFT then
            ExecEvent("W_LadderUpLeft")
        else
            ExecEvent("W_LadderUpRight")
        end
        return TRUE
    elseif event_command == LADDER_EVENT_COMMAND_DOWN then
        if env(1007) == TRUE and env(294, LADDER_DOWN_CHECK_DIST, 0, 1) == TRUE then -- IsCOMPlayer and DoesLadderHaveCharacters
            if hand == HAND_STATE_RIGHT then
                ExecEvent("W_LadderAttackDownRight")
            else
                ExecEvent("W_LadderAttackDownLeft")
            end
            return TRUE
        elseif env(292, LADDER_DOWN_CHECK_DIST, 0) == TRUE then -- IsSomeoneUnderLadder
            return FALSE
        elseif 0 < env(1108, ACTION_ARM_SP_MOVE) and env(1007) == FALSE then -- ActionDuration and IsCOMPlayer
            ExecEvent("W_LadderCoastStart")
            return TRUE
        elseif hand == HAND_STATE_LEFT then
            ExecEvent("W_LadderDownLeft")
        else
            ExecEvent("W_LadderDownRight")
        end
        return TRUE
    elseif event_command == LADDER_EVENT_COMMAND_END_TOP then
        if hand == HAND_STATE_LEFT then
            ExecEvent("W_LadderEndTopLeft")
        else
            ExecEvent("W_LadderEndTopRight")
        end
        return TRUE
    elseif event_command == LADDER_EVENT_COMMAND_END_BOTTOM then
        if hand == HAND_STATE_LEFT then
            ExecEvent("W_LadderEndBottomLeft")
        else
            ExecEvent("W_LadderEndBottomRight")
        end
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Ladder Start
-----------------------------------------------
function LadderStart()
    local event_command = GetLadderEventCommand(TRUE)
    if event_command == LADDER_ACTION_START_BOTTOM then
        ExecEvent("W_LadderAttachBottom")
        return TRUE
    elseif event_command == LADDER_ACTION_START_TOP then
        ExecEvent("W_LadderAttachTop")
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Ladder Action State
-----------------------------------------------
function LadderSetActionState(state)
    act(133, state) -- SetLadderActionState
    return 
end

-----------------------------------------------
-- Ladder Send Command
-----------------------------------------------
function LadderSendCommand(event_call)
    act(108, event_call) -- SendMessageIDToEvents
    return 
end

-----------------------------------------------
-- Ladder Attack
-----------------------------------------------
function ExecLadderAttack(hand)
    if env(1001) <= 0 then -- GetStamina
        return FALSE
    elseif env(1106, ACTION_ARM_R1) == TRUE then -- ActionRequest
        if hand == HAND_STATE_RIGHT then
            ExecEvent("W_LadderAttackUpRight")
        else
            ExecEvent("W_LadderAttackUpLeft")
        end
        return TRUE
    elseif env(1106, ACTION_ARM_R2) == TRUE then -- ActionRequest
        if hand == HAND_STATE_RIGHT then
            ExecEvent("W_LadderAttackDownRight")
        else
            ExecEvent("W_LadderAttackDownLeft")
        end
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Ladder Coast
-----------------------------------------------
function LadderCoastCommonFunction(hand, is_start)
    act(147) -- SetIsEquipmentChangeableFromMenu
    if ExecLadderDeath() == TRUE then
        return TRUE
    elseif ExecLadderDamageMove() == TRUE then

    end
    if is_start == FALSE then
        if env(306) == TRUE then
            ExecEvent("W_LadderCoastLanding") -- IsOnLastRungOfLadder
            return TRUE
        end
        local event_command = GetLadderEventCommand(FALSE)
        if not (env(1108, ACTION_ARM_SP_MOVE) > 0 and env(1111) > 0 and (0 >= event_command or event_command == LADDER_EVENT_COMMAND_DOWN)) or env(292, LADDER_DOWN_CHECK_DIST, 0) == TRUE then -- ActionDuration and MovementRequestDuration or IsSomeoneUnderLadder
            act("はしご滑り降り解除") -- Ladder Slide Down
            if env("滑り降り停止先のはしご段数取得") % 2 == 0 then -- GetNumberOfRungsBelowOnLadder
                ExecEvent("W_LadderCoastStopRight")
            else
                ExecEvent("W_LadderCoastStopLeft")
            end
            return TRUE
        end
    elseif env("アニメ終了か", 1) == TRUE then -- IsAnimEnd
        if IsLadderDamage(hand) == TRUE then
            return TRUE
        else
            ExecEvent("W_LadderCoastLeft")
            return TRUE
        end
    end
    return FALSE
end

-----------------------------------------------
-- Slide
-----------------------------------------------
function ExecSlide()
    if env(1116, 100400) == TRUE then 
        return 
    elseif env(296) == TRUE then -- IsDescendingToFloor
        ExecEvent("W_SlideStart")
        return 
    else
        return 
    end
end

-----------------------------------------------
-- Idle Common
-----------------------------------------------
function IdleCommonFunction()
    act("ロックオン時システム旋回不可角度", 90, 90) -- LockonSystemUnableToTurnAngle
    act(9100) -- Wait
    local style = c_Style

    -- Gwynevere's Urn
    if env(1116, 112190) == TRUE then
        if env(1116, 112191) ~= TRUE then
            act(2002, 112191) -- Cooldown
            act(2002, 112192) -- Effect
        end
    end
    
    if style == HAND_LEFT_BOTH then
        if GetEquipType(HAND_LEFT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW, WEAPON_CATEGORY_CROSSBOW) == TRUE then
            act("精密射撃可能か") -- SetIsPreciseShootingPossible
        end
    elseif style == HAND_RIGHT_BOTH and GetEquipType(HAND_RIGHT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW, WEAPON_CATEGORY_CROSSBOW) == TRUE then
        act("精密射撃可能か") -- SetIsPreciseShootingPossible
    end
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    elseif LadderStart() == TRUE then
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        return TRUE
    elseif ExecGuard(Event_GuardStart, ALLBODY) == TRUE then
        return TRUE
    elseif ExecItem(QUICKTYPE_NORMAL, ALLBODY) == TRUE then
        return TRUE
    elseif ExecMagic(QUICKTYPE_NORMAL, ALLBODY) == TRUE then
        return TRUE
    elseif ExecSwordArtsStance(ALLBODY) == TRUE then
        return TRUE
    elseif ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, ALLBODY, FALSE, FALSE) == TRUE then
        return TRUE
    elseif ExecWeaponChange(ALLBODY) == TRUE then
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, ALLBODY) == TRUE then
        return TRUE
    elseif MoveStart(ALLBODY, Event_Move, FALSE) == TRUE then
        return TRUE
    elseif ExecQuickTurn(ALLBODY) == TRUE then
        return TRUE
    elseif ExecGesture() == TRUE then
        return TRUE
    elseif env(1007) == TRUE then -- IsCOMPlayer
        local event_command = env(105, 1) -- GetCommandIDFromEvent
        if event_command == 1903 then
            ExecEvent("W_Event90801")
            return TRUE
        elseif event_command == 2100 then
            ExecEvent("W_Event90851")
            return TRUE
        elseif event_command == 7300 then
            ExecEvent("W_Event91190")
            return TRUE
        end
    end
    return FALSE
end

-----------------------------------------------
-- Attack Common
-----------------------------------------------
function AttackCommonFunction(r1, r2, l1, l2, b1, b2, guardcondition, use_atk_queue)
    if env(1116, 100380) == FALSE then 
        SetThrowAtkInvalid()
    end
    SetAIActionState()
    UpdateAtkAutoAim()
    local bool = FALSE
    
    if guardcondition == TO_GUARDON then
        bool = TRUE
    end
    
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, bool) == TRUE then
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        return TRUE
    elseif ExecGuardOnCancelTiming(guardcondition, ALLBODY) == TRUE then
        return TRUE
    elseif ExecItem(QUICKTYPE_ATTACK, ALLBODY) == TRUE then
        if use_atk_queue == TRUE then
            SetAttackQueue(r1, r2, l1, l2, b1, b2)
        end
        return TRUE
    elseif ExecMagic(QUICKTYPE_ATTACK, ALLBODY) == TRUE then
        return TRUE
    elseif ExecSwordArtsStanceOnCancelTiming(ALLBODY) == TRUE then
        return TRUE
    elseif ExecAttack(r1, r2, l1, l2, b1, b2, guardcondition, ALLBODY, FALSE, FALSE) == TRUE then
        if use_atk_queue == TRUE then
            SetAttackQueue(r1, r2, l1, l2, b1, b2)
        end
        return TRUE
    elseif ExecWeaponChange(ALLBODY) == TRUE then
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, ALLBODY) == TRUE then
        return 
    elseif MoveStartonCancelTiming(Event_Move, FALSE) == TRUE then
        return TRUE
    elseif ExecQuickTurnOnCancelTiming() == TRUE then
        return TRUE
    elseif ExecGesture() == TRUE then
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Backstab Common
-----------------------------------------------
function BackStabCommonFunction()
    SetAIActionState()
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        return TRUE
    elseif ExecGuardOnCancelTiming(FALSE, ALLBODY) == TRUE then
        return TRUE
    elseif ExecItem(QUICKTYPE_ATTACK, ALLBODY) == TRUE then
        return TRUE
    elseif ExecMagic(QUICKTYPE_ATTACK, ALLBODY) == TRUE then
        return TRUE
    elseif ExecSwordArtsStanceOnCancelTiming(ALLBODY) == TRUE then
        return TRUE
    elseif ExecAttack("W_AttackRightLight2", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight2", "W_AttackBothHeavy1Start", FALSE, ALLBODY, FALSE, FALSE) == TRUE then
        return TRUE
    elseif ExecWeaponChange(ALLBODY) == TRUE then
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, ALLBODY) == TRUE then
        return 
    elseif MoveStartonCancelTiming(Event_Move, FALSE) == TRUE then
        return TRUE
    elseif ExecQuickTurnOnCancelTiming() == TRUE then
        return TRUE
    elseif ExecGesture() == TRUE then
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Fall Common
-----------------------------------------------
function FallCommonFunction(is_enable_falling_death, is_jump, fall_style)
    local height = env(224) / 100 -- GetFallHeight
    local damage_type = env(202) -- GetReceivedDamageType
    if damage_type == DAMAGE_TYPE_DEATH_FALLING then
        -- Deathless Run Failure
        if IsDead() == TRUE then
            if env(1007) == FALSE then -- IsCOMPlayer
                act(2002, 112100)
                act(2002, 112101) -- Hitless
            end
        end
                    
        if fall_style == FALL_FACEUP then
            ExecEventAllBody("W_FallDeathFaceUp")
        elseif fall_style == FALL_FACEDOWN then
            ExecEventAllBody("W_FallDeathFaceDown")
        else
            ExecEventAllBody("W_FallDeath")
        end
        return TRUE
    elseif 60 <= height and is_enable_falling_death == TRUE and env(305, 266) ~= TRUE then -- GetStateChangeType
        -- Deathless Run Failure
        if IsDead() == TRUE then
            if env(1007) == FALSE then -- IsCOMPlayer
                act(2002, 112100)
                act(2002, 112101) -- Hitless
            end
        end
        
        if fall_style == FALL_FACEUP then
            ExecEventAllBody("W_FallDeathFaceUp")
        elseif fall_style == FALL_FACEDOWN then
            ExecEventAllBody("W_FallDeathFaceDown")
        else
            ExecEventAllBody("W_FallDeath")
        end
        return TRUE
    else
        act(147) -- SetIsEquipmentChangeableFromMenu
        if env(1112) == TRUE then -- HasThrowRequest
            return TRUE
        elseif env(201) == TRUE then -- IsLanding
            if env(305, 266) == TRUE and fall_style ~= FALL_ATTACK then -- GetStateChangeType
                if 1.29999995231628 < height then
                    if 8 < height then
                        SetVariable("LandIndex", LAND_HEAVY)
                    elseif 4 < height then
                        SetVariable("LandIndex", LAND_MIDDLE)
                    elseif is_jump == TRUE and 0 < height then
                        SetVariable("LandIndex", LAND_JUMP)
                    else
                        SetVariable("LandIndex", LAND_DEFAULT)
                    end
                    Replanning()
                    ExecEventAllBody("W_Land")
                    return TRUE
                elseif 0.300000011920929 < height then
                    ExecEventAllBody("W_LandLow")
                else
                    ExecEventAllBody("W_Idle")
                end
                return TRUE
            elseif fall_style == FALL_DEFAULT then
                if IsLandDead(height) == TRUE then
                    -- Deathless Run Failure
                    if IsDead() == TRUE then
                        if env(1007) == FALSE then -- IsCOMPlayer
                            act(2002, 112100)
                            act(2002, 112101) -- Hitless
                        end
                    end
    
                    if 8 < height then
                        SetVariable("IndexDeath", DEATH_TYPE_LAND)
                    else
                        SetVariable("IndexDeath", DEATH_TYPE_LAND_LOW)
                    end
                    ExecEventAllBody("W_DeathStart")
                    return TRUE
                elseif 1.29999995231628 < height then
                    if 8 < height then
                        SetVariable("LandIndex", LAND_HEAVY)
                    elseif 4 < height then
                        SetVariable("LandIndex", LAND_MIDDLE)
                    elseif is_jump == TRUE and 0 < height then
                        SetVariable("LandIndex", LAND_JUMP)
                    else
                        SetVariable("LandIndex", LAND_DEFAULT)
                    end
                    Replanning()
                    ExecEventAllBody("W_Land")
                else
                    act("AIへのリプランニング要求")
                    if 0.300000011920929 < height then
                        ExecEventAllBody("W_LandLow")
                    else
                        ExecEventAllBody("W_Idle")
                    end
                end
                return TRUE
            elseif fall_style == FALL_FACEUP then
                if IsLandDead(height) == TRUE then
                    SetVariable("IndexDeath", DEATH_TYPE_LAND_FACEUP)
                    ExecEventAllBody("W_DeathStart")
                else
                    Replanning()
                    ExecEventAllBody("W_LandFaceUp")
                end
                return TRUE
            elseif fall_style == FALL_FACEDOWN then
                if IsLandDead(height) == TRUE then
                    SetVariable("IndexDeath", DEATH_TYPE_LAND_FACEDOWN)
                    ExecEventAllBody("W_DeathStart")
                else
                    Replanning()
                    ExecEventAllBody("W_LandFaceDown")
                end
                return TRUE
            elseif fall_style == FALL_LADDER then
                if IsLandDead(height) == TRUE then
                    ExecEventAllBody("W_LadderDeathLand")
                else
                    Replanning()
                    ExecEventAllBody("W_LadderFallLanding")
                end
                return TRUE
            elseif IsLandDead(height) == TRUE then
                SetVariable("IndexDeath", DEATH_TYPE_LAND)
                ExecEventAllBody("W_DeathStart")
            else
                ExecEventAllBody("W_LandFallAttack")
            end
            return TRUE
        elseif fall_style == FALL_DEFAULT and 2 <= height and (env(1106, ACTION_ARM_R1) == TRUE or 0 < env(1108, ACTION_ARM_R1)) then -- ActionRequest and ActionDuration
            local style = c_Style
            local hand = HAND_RIGHT
            if style == HAND_LEFT_BOTH then
                hand = HAND_LEFT
            end
            local check_weapon = GetEquipType(hand, WEAPON_CATEGORY_STAFF, WEAPON_CATEGORY_FIST_CUT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW, WEAPON_CATEGORY_CROSSBOW, WEAPON_CATEGORY_SMALL_SHIELD, WEAPON_CATEGORY_LARGE_SHIELD, WEAPON_CATEGORY_TORCH)
            if check_weapon == TRUE and env("装備武器特殊カテゴリ番号取得", hand) ~= 234 then -- GetEquipWeaponSpecialCategoryNumber
                -- Rose of Ariandel
                return FALSE
            else
                SetAttackHand(hand)
                ExecEventAllBody("W_FallAttackStart")
                return TRUE
            end
        else
            return FALSE
        end
    end
end

-----------------------------------------------
-- Slide Common
-----------------------------------------------
function SlideCommonFunction(can_endslide)
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    elseif can_endslide == TRUE and env(296) == FALSE then -- IsDescendingToFloor
        ExecEvent("W_SlideEnd")
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        return TRUE
    elseif ExecGuardOnCancelTiming(FALSE, ALLBODY) == TRUE then
        return TRUE
    elseif ExecItem(QUICKTYPE_ROLLING, ALLBODY) == TRUE then
        return TRUE
    elseif ExecMagic(QUICKTYPE_ROLLING, ALLBODY) == TRUE then
        return TRUE
    elseif ExecSwordArtsStanceOnCancelTiming(ALLBODY) == TRUE then
        return TRUE
    elseif ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, ALLBODY, FALSE, FALSE) == TRUE then
        return TRUE
    elseif ExecWeaponChange(ALLBODY) == TRUE then
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, ALLBODY) == TRUE then
        return TRUE
    elseif MoveStartonCancelTiming(Event_MoveLong, FALSE) == TRUE then
        return TRUE
    elseif ExecGesture() == TRUE then
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Throw Common
-----------------------------------------------
function ThrowCommonFunction(estep)
    act(2005, CEREMONY_STATE_RELEASE) -- SetCeremonyState
    if env(206) == TRUE then -- IsThrowing
        if env(202) == DAMAGE_TYPE_DEATH_FALLING then -- GetReceivedDamageType
            if env(1116, 4502) == TRUE then 
                ExecEventAllBody("W_FallDeathFaceDown")
            elseif env(1116, 4501) == TRUE then 
                ExecEventAllBody("W_FallDeathFaceUp")
            else
                ExecEventAllBody("W_FallDeath")
            end
            return TRUE
        end
    elseif ExecDeath() == TRUE then
        return TRUE
    elseif env("イベントアニメ再生要求があるか") == TRUE then -- CheckForEventAnimPlaybackRequest
        return TRUE
    elseif ExecDamage(FALSE, FALSE) == TRUE then
        return TRUE
    end
    if ExecFallStart(FALL_TYPE_DEFAULT) == TRUE then
        act(136, 0) -- SetThrowState
        return TRUE
    elseif ExecEvasion(FALSE, estep, FALSE) == TRUE then
        return TRUE
    elseif ExecGuardOnCancelTiming(FALSE, ALLBODY) == TRUE then
        return TRUE
    elseif ExecItem(QUICKTYPE_NORMAL, ALLBODY) == TRUE then
        return TRUE
    elseif ExecMagic(QUICKTYPE_NORMAL, ALLBODY) == TRUE then
        return TRUE
    elseif ExecSwordArtsStanceOnCancelTiming(ALLBODY) == TRUE then
        return TRUE
    elseif ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, ALLBODY, FALSE, FALSE) == TRUE then
        return TRUE
    elseif ExecWeaponChange(ALLBODY) == TRUE then
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, ALLBODY) == TRUE then
        return TRUE
    elseif MoveStartonCancelTiming(Event_MoveShort, FALSE) == TRUE then
        return TRUE
    elseif ExecQuickTurnOnCancelTiming() == TRUE then
        return TRUE
    elseif ExecGesture() == TRUE then
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Gesture Common
-----------------------------------------------
function GestureCommonFunction(blend_type)
    act(147) -- SetIsEquipmentChangeableFromMenu
    SetAIActionState()
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        return TRUE
    elseif ExecGuardOnCancelTiming(FALSE, ALLBODY) == TRUE then
        return TRUE
    elseif ExecItem(QUICKTYPE_NORMAL, ALLBODY) == TRUE then
        return TRUE
    elseif ExecMagic(QUICKTYPE_NORMAL, ALLBODY) == TRUE then
        return TRUE
    elseif ExecSwordArtsStanceOnCancelTiming(ALLBODY) == TRUE then
        return TRUE
    elseif ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, ALLBODY, FALSE, FALSE) == TRUE then
        return TRUE
    elseif ExecWeaponChange(ALLBODY) == TRUE then
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, ALLBODY) == TRUE then
        return TRUE
    elseif MoveStartonCancelTiming(Event_Move, FALSE) == TRUE then
        return TRUE
    elseif blend_type ~= UPPER and ExecQuickTurn(LOWER) == TRUE then
        return TRUE
    elseif ExecGesture() == TRUE then
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Gesture Loop Common
-----------------------------------------------
function GestureLoopCommonFunction(blend_type, lower_state, is_start)
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    elseif blend_type ~= UPPER and ExecQuickTurn(LOWER) == TRUE then
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        return TRUE
    end
    local canmove = FALSE
    if env(301, 0) == TRUE then -- GetEventEzStateFlag
        if env(1109) == TRUE then -- HasActionRequest
            SetVariable("IndexGestureLoopEnd", GetVariable("IndexGestureLoop"))
            ExecEventHalfBlend(Event_GestureEnd, lower_state)
            return TRUE
        elseif canmove == FALSE and 0 < GetVariable("MoveSpeedLevel") then
            SetVariable("IndexGestureLoopEnd", GetVariable("IndexGestureLoop"))
            ExecEventHalfBlend(Event_GestureEnd, lower_state)
            return TRUE
        end
    end
    return FALSE
end

-----------------------------------------------
-- Magic Common
-----------------------------------------------
function MagicCommonFunction(blend_type, quick_type)
    local magic_type = env(227) -- GetMagicAnimType
    if magic_type ~= MAGIC_REQUEST_FLAME_GRAB then
        SetThrowAtkInvalid()
    end
    SetAIActionState()
    UpdateAtkAutoAim()
    act(118, TRUE) -- SetIsMagicInUse
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        return TRUE
    elseif ExecGuardOnCancelTiming(FALSE, blend_type) == TRUE then
        return TRUE
    elseif ExecItem(QUICKTYPE_NORMAL, blend_type) == TRUE then
        return TRUE
    elseif ExecMagic(quick_type, blend_type) == TRUE then
        return TRUE
    elseif ExecSwordArtsStanceOnCancelTiming(ALLBODY) == TRUE then
        return TRUE
    elseif ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, blend_type, FALSE, FALSE) == TRUE then
        return TRUE
    elseif ExecWeaponChange(blend_type) == TRUE then
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, blend_type) == TRUE then
        return TRUE
    elseif ExecGesture() == TRUE then
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Arrow Common
-----------------------------------------------
function ArrowCommonFunction(blend_type, is_allbody_turn, is_enable_stance)
    SetAIActionState()
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        return TRUE
    elseif ExecItem(QUICKTYPE_NORMAL, blend_type) == TRUE then
        return TRUE
    elseif is_enable_stance == TRUE and ExecSwordArtsStanceOnCancelTiming(blend_type) == TRUE then
        return TRUE
    elseif ExecWeaponChange(blend_type) == TRUE then
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, blend_type) == TRUE then
        return TRUE
    elseif is_allbody_turn == TRUE then
        if ExecQuickTurnOnCancelTiming() == TRUE then
            return TRUE
        end
    elseif blend_type ~= UPPER and ExecQuickTurn(LOWER) == TRUE then
        return FALSE
    end
    return FALSE
end

-----------------------------------------------
-- Crossbow Common
-----------------------------------------------
function CrossbowCommonFunction(blend_type)
    SetAIActionState()
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        return TRUE
    elseif ExecItem(QUICKTYPE_NORMAL, blend_type) == TRUE then
        return TRUE
    elseif ExecSwordArtsStanceOnCancelTiming(blend_type) == TRUE then
        return TRUE
    elseif ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, blend_type, FALSE, FALSE) == TRUE then
        return TRUE
    elseif ExecWeaponChange(blend_type) == TRUE then
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, blend_type) == TRUE then
        return TRUE
    elseif blend_type ~= UPPER and ExecQuickTurn(LOWER) == TRUE then
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Evasion Common
-----------------------------------------------
function EvasionCommonFunction(fall_type, r1, r2, l1, l2, b1, b2)
    SetAIActionState()
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        if GetEquipType(HAND_LEFT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW, WEAPON_CATEGORY_CROSSBOW) == TRUE then
            act("精密射撃可能か") -- SetIsPreciseShootingPossible
        end
    elseif style == HAND_RIGHT_BOTH and GetEquipType(HAND_RIGHT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW, WEAPON_CATEGORY_CROSSBOW) == TRUE then
        act("精密射撃可能か") -- SetIsPreciseShootingPossible
    end
    if ExecPassiveAction(FALSE, fall_type, FALSE) == TRUE then
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        return TRUE
    elseif ExecGuardOnCancelTiming(FALSE, ALLBODY) == TRUE then
        return TRUE
    elseif ExecItem(QUICKTYPE_ROLLING, ALLBODY) == TRUE then
        return TRUE
    elseif ExecMagic(QUICKTYPE_ROLLING, ALLBODY) == TRUE then
        return TRUE
    elseif ExecSwordArtsStanceOnCancelTiming(ALLBODY) == TRUE then
        return TRUE
    elseif ExecAttack(r1, r2, l1, l2, b1, b2, FALSE, ALLBODY, FALSE, FALSE) == TRUE then
        return TRUE
    elseif ExecWeaponChange(ALLBODY) == TRUE then
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, ALLBODY) == TRUE then
        return TRUE
    elseif MoveStartonCancelTiming(Event_MoveLong, FALSE) == TRUE then
        return TRUE
    elseif ExecGesture() == TRUE then
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Damage Common
-----------------------------------------------
function DamageCommonFunction(guardcondition, estep, fall_type)
    act(147)
    
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        if GetEquipType(HAND_LEFT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW, WEAPON_CATEGORY_CROSSBOW) == TRUE then
            act("精密射撃可能か") -- SetIsPreciseShootingPossible
        end
    elseif style == HAND_RIGHT_BOTH and GetEquipType(HAND_RIGHT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW, WEAPON_CATEGORY_CROSSBOW) == TRUE then
        act("精密射撃可能か") -- SetIsPreciseShootingPossible
    end
    if ExecPassiveAction(FALSE, fall_type, FALSE) == TRUE then
        return TRUE
    end
    local is_usechainrecover = GetVariable("UseChainRecover")
    if ExecEvasion(TRUE, estep, is_usechainrecover) == TRUE then
        return TRUE
    elseif ExecGuardOnCancelTiming(guardcondition, ALLBODY) == TRUE then
        ResetDamageCount()
        return TRUE
    elseif ExecItem(QUICKTYPE_NORMAL, ALLBODY) == TRUE then
        ResetDamageCount()
        return TRUE
    elseif ExecMagic(QUICKTYPE_NORMAL, ALLBODY) == TRUE then
        ResetDamageCount()
        return TRUE
    elseif ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", guardcondition, ALLBODY, FALSE, FALSE) == TRUE then
        ResetDamageCount()
        return TRUE
    elseif ExecSwordArtsStanceOnCancelTiming(ALLBODY) == TRUE then
        ResetDamageCount()
        return TRUE
    elseif ExecWeaponChange(ALLBODY) == TRUE then
        ResetDamageCount()
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, ALLBODY) == TRUE then
        ResetDamageCount()
        return TRUE
    elseif MoveStartonCancelTiming(Event_Move, FALSE) == TRUE then
        ResetDamageCount()
        return TRUE
    elseif ExecQuickTurnOnCancelTiming() == TRUE then
        return TRUE
    elseif ExecGesture() == TRUE then
        ResetDamageCount()
        return TRUE
    elseif env(2000) == TRUE then -- IsMoveCancelPossible
        ResetDamageCount()
    end
    return FALSE
end

-----------------------------------------------
-- Quick Turn Common
-----------------------------------------------
function QuickTurnCommonFunction()
    local blend_type = UPPER
    if env(2000) == TRUE then -- IsMoveCancelPossible
        blend_type = ALLBODY
    end
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        return TRUE
    elseif ExecGuardOnCancelTiming(FALSE, UPPER) == TRUE then
        return TRUE
    elseif ExecItem(QUICKTYPE_NORMAL, ALLBODY) == TRUE then
        return TRUE
    elseif ExecMagic(QUICKTYPE_NORMAL, ALLBODY) == TRUE then
        return TRUE
    elseif ExecSwordArtsStanceOnCancelTiming(UPPER) == TRUE then
        return TRUE
    elseif ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, ALLBODY, FALSE, FALSE) == TRUE then
        return TRUE
    elseif ExecWeaponChange(UPPER) == TRUE then
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, ALLBODY) == TRUE then
        return TRUE
    elseif MoveStartonCancelTiming(Event_Move, FALSE) == TRUE then
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Land Common
-----------------------------------------------
function LandCommonFunction()
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    elseif env(317) == TRUE then -- IsSlope
        return FALSE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        return TRUE
    elseif ExecGuardOnCancelTiming(FALSE, ALLBODY) == TRUE then
        return TRUE
    elseif ExecItem(QUICKTYPE_NORMAL, ALLBODY) == TRUE then
        return TRUE
    elseif ExecMagic(QUICKTYPE_NORMAL, ALLBODY) == TRUE then
        return TRUE
    elseif ExecSwordArtsStanceOnCancelTiming(ALLBODY) == TRUE then
        return TRUE
    elseif ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, ALLBODY, FALSE, FALSE) == TRUE then
        return TRUE
    elseif ExecWeaponChange(ALLBODY) == TRUE then
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, ALLBODY) == TRUE then
        return TRUE
    elseif MoveStartonCancelTiming(Event_Move, FALSE) == TRUE then
        return TRUE
    elseif ExecQuickTurnOnCancelTiming() == TRUE then
        return TRUE
    elseif ExecGesture() == TRUE then
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Item Common
-----------------------------------------------
function ItemCommonFunction(blend_type)
    if g_ItemFirstFrame == 1 then
        g_ItemFirstFrame = 0
    elseif env(1116, 100560) == TRUE then 
        act("道具ID切り替え無効") -- DisableToolIDSwitching
    end
    if env(305, 15) == FALSE then -- GetStateChangeType
        act("アイテムアニメ中か設定") -- Set item animation in progress
    end
    SetAIActionState()
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        return TRUE
    elseif ExecGuardOnCancelTiming(FALSE, blend_type) == TRUE then
        return TRUE
    elseif ExecItem(QUICKTYPE_NORMAL, blend_type) == TRUE then
        return TRUE
    elseif ExecMagic(QUICKTYPE_ATTACK, ALLBODY) == TRUE then
        return TRUE
    elseif ExecSwordArtsStanceOnCancelTiming(blend_type) == TRUE then
        return TRUE
    elseif ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, blend_type, FALSE, FALSE) == TRUE then
        return TRUE
    elseif ExecWeaponChange(blend_type) == TRUE then
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, blend_type) == TRUE then
        return TRUE
    elseif blend_type ~= UPPER and ExecQuickTurn(LOWER) == TRUE then
        return TRUE
    elseif ExecGesture() == TRUE then
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Quick Item Common
-----------------------------------------------
function QuickItemCommonFunction(g_r1, g_r2, g_l1, g_l2, g_b1, g_b2, blend_type, quick_type)
    if g_ItemFirstFrame == 1 then
        g_ItemFirstFrame = 0
    elseif env(1116, 100560) == TRUE then 
        act("道具ID切り替え無効") -- DisableToolIDSwitching
    end
    act("アイテムアニメ中か設定") -- Set item animation in progress
    SetAIActionState()
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        ClearAttackQueue()
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        ClearAttackQueue()
        return TRUE
    elseif ExecGuardOnCancelTiming(FALSE, blend_type) == TRUE then
        ClearAttackQueue()
        return TRUE
    elseif ExecItem(quick_type, blend_type) == TRUE then
        ClearAttackQueue()
        return TRUE
    elseif ExecMagic(QUICKTYPE_ATTACK, ALLBODY) == TRUE then
        ClearAttackQueue()
        return TRUE
    elseif ExecSwordArtsStanceOnCancelTiming(blend_type) == TRUE then
        ClearAttackQueue()
        return TRUE
    elseif ExecAttack(g_r1, g_r2, g_l1, g_l2, g_b1, g_b2, FALSE, blend_type, FALSE, FALSE) == TRUE then
        ClearAttackQueue()
        return TRUE
    elseif ExecWeaponChange(blend_type) == TRUE then
        ClearAttackQueue()
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, blend_type) == TRUE then
        ClearAttackQueue()
        return TRUE
    elseif MoveStartonCancelTiming(Event_Move, FALSE) == TRUE then
        ClearAttackQueue()
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Stop Common
-----------------------------------------------
function StopCommonFunction(is_dash_stop)
    act(9100)
    if is_dash_stop == TRUE then
        act("ロックオン時システム旋回不可角度", 180, 180) -- LockonSystemUnableToTurnAngle
    else
        act("ロックオン時システム旋回不可角度", 90, 90) -- LockonSystemUnableToTurnAngle
    end
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        if GetEquipType(HAND_LEFT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW, WEAPON_CATEGORY_CROSSBOW) == TRUE then
            act("精密射撃可能か") -- SetIsPreciseShootingPossible
        end
    elseif style == HAND_RIGHT_BOTH and GetEquipType(HAND_RIGHT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW, WEAPON_CATEGORY_CROSSBOW) == TRUE then
        act("精密射撃可能か") -- SetIsPreciseShootingPossible
    end
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    elseif LadderStart() == TRUE then
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        return TRUE
    elseif ExecGuard(Event_GuardStart, ALLBODY) == TRUE then
        return TRUE
    elseif ExecItem(QUICKTYPE_NORMAL, ALLBODY) == TRUE then
        return TRUE
    elseif ExecMagic(QUICKTYPE_NORMAL, ALLBODY) == TRUE then
        return TRUE
    elseif ExecSwordArtsStance(ALLBODY) == TRUE then
        return TRUE
    elseif ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, ALLBODY, FALSE, FALSE) == TRUE then
        return TRUE
    elseif ExecWeaponChange(ALLBODY) == TRUE then
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, ALLBODY) == TRUE then
        return TRUE
    elseif env(1116, 100170) == TRUE then 
        act("ロックオン中角度固定解除") -- LockonFixedAngleCancel
        if ExecDashTurn() == TRUE then
            return TRUE
        end
    end
    if MoveStart(ALLBODY, Event_Move, FALSE) == TRUE then
        return TRUE
    elseif is_dash_stop == FALSE and ExecQuickTurn(ALLBODY) == TRUE then
        return TRUE
    elseif ExecGesture() == TRUE then
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Move Common
-----------------------------------------------
function MoveCommonFunction(blend_type)
    act(9100) -- Wait
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        if GetEquipType(HAND_LEFT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW, WEAPON_CATEGORY_CROSSBOW) == TRUE then
            act("精密射撃可能か") -- SetIsPreciseShootingPossible
        end
    elseif style == HAND_RIGHT_BOTH and GetEquipType(HAND_RIGHT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW, WEAPON_CATEGORY_CROSSBOW) == TRUE then
        act("精密射撃可能か") -- SetIsPreciseShootingPossible
    end
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    elseif LadderStart() == TRUE then
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        return TRUE
    elseif ExecGuard(Event_GuardStart, blend_type) == TRUE then
        return TRUE
    end
    local speed = GetVariable("MoveSpeedLevelReal")
    local quick_type = QUICKTYPE_NORMAL
    if 1.60000002384186 < speed then
        quick_type = QUICKTYPE_DASH
    end
    if ExecItem(quick_type, blend_type) == TRUE then
        return TRUE
    elseif ExecMagic(quick_type, blend_type) == TRUE then
        return TRUE
    elseif ExecSwordArtsStance(blend_type) == TRUE then
        return TRUE
    end
    local r1 = "W_AttackRightLight1"
    local r2 = "W_AttackRightHeavy1Start"
    local b1 = "W_AttackBothLight1"
    local b2 = "W_AttackBothHeavy1Start"
    if 1.60000002384186 < speed then
        r1 = "W_AttackRightLightDash"
        b1 = "W_AttackBothDash"
        if IsArtsSpAtk() == TRUE then
            r1 = "W_AttackRightLightDashSpecial"
            b1 = "W_AttackBothDashSpecial"
            if IsEnableJumpAtk() == TRUE then
                r2 = "W_AttackRightHeavyKickSpecial"
                b2 = "W_AttackBothHeavyKickSpecial"
            end
        elseif IsEnableJumpAtk() == TRUE then
            r2 = "W_AttackRightHeavyKick"
            b2 = "W_AttackBothHeavyKick"
        end
    end
    if ExecAttack(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, FALSE, blend_type, FALSE, FALSE) == TRUE then
        return TRUE
    elseif ExecWeaponChange(blend_type) == TRUE then
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, blend_type) == TRUE then
        return TRUE
    elseif ExecStop() == TRUE then
        return TRUE
    elseif ExecGesture() == TRUE then
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Guard Common
-----------------------------------------------
function GuardCommonFunction(is_guard_end, blend_type)
    act(9100) -- Wait
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    elseif LadderStart() == TRUE then
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        return TRUE
    elseif is_guard_end == TRUE and ExecGuard(Event_GuardStart, blend_type) == TRUE then
        return TRUE
    elseif GetVariable("MoveSpeedIndex") == 2 then
        if ExecItem(QUICKTYPE_DASH, blend_type) == TRUE then
            return TRUE
        end
    elseif ExecItem(QUICKTYPE_NORMAL, blend_type) == TRUE then
        return TRUE
    end
    if GetVariable("MoveSpeedIndex") == 2 then
        if ExecMagic(QUICKTYPE_DASH, blend_type) == TRUE then
            return TRUE
        end
    elseif ExecMagic(QUICKTYPE_NORMAL, blend_type) == TRUE then
        return TRUE
    end
    if is_guard_end == TRUE then
        if ExecSwordArtsStanceOnCancelTiming(blend_type) == TRUE then
            return TRUE
        end
    elseif env(1106, ACTION_ARM_L2) == TRUE and ExecSwordArtsStance(blend_type) == TRUE then
        return TRUE
    end
    local r1 = "W_AttackRightLight1"
    local r2 = "W_AttackRightHeavy1Start"
    local b1 = "W_AttackBothLight1"
    local b2 = "W_AttackBothHeavy1Start"
    local guard_attack = FALSE
    if 1.10000002384186 < GetVariable("MoveSpeedLevelReal") then
        r1 = "W_AttackRightLightDash"
        b1 = "W_AttackBothDash"
        if IsEnableJumpAtk() == TRUE then
            if IsArtsSpAtk() == TRUE then
                r2 = "W_AttackRightHeavyKickSpecial"
                b2 = "W_AttackBothHeavyKickSpecial"
            else
                r2 = "W_AttackRightHeavyKick"
                b2 = "W_AttackBothHeavyKick"
            end
        end
    elseif is_guard_end == FALSE then
        guard_attack = TRUE
    end
    if ExecAttack(r1, r2, nil, "W_AttackLeftHeavy1", b1, b2, guard_attack, blend_type, FALSE, FALSE) == TRUE then
        return TRUE
    elseif ExecWeaponChange(blend_type) == TRUE then
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, blend_type) == TRUE then
        return TRUE
    elseif blend_type ~= UPPER and ExecQuickTurn(LOWER) == TRUE then
        return TRUE
    elseif is_guard_end == FALSE and (env(1107, ACTION_ARM_L1) == TRUE or env(1108, ACTION_ARM_L1) <= 0 or env(1001) <= 0) then -- ActionCancelRequest or ActionDuration or GetStamina
        ExecEventHalfBlendNoReset(Event_GuardEnd, blend_type)
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Sword Arts Common
-----------------------------------------------
function SwordArtsCommonFunction(r1, r2, l1, l2, b1, b2, guardcondition, artsr1, artsr2, gen_trans)
    if env(1116, 37) == FALSE and env(1116, 100380) == FALSE then 
        SetThrowAtkInvalid()
    end
    UpdateAtkAutoAim()
    SetAIActionState()
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        ClearAttackQueue()
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        ClearAttackQueue()
        return TRUE
    elseif ExecGuardOnCancelTiming(FALSE, ALLBODY) == TRUE then
        ClearAttackQueue()
        return TRUE
    elseif ExecItem(QUICKTYPE_ATTACK, ALLBODY) == TRUE then
        ClearAttackQueue()
        return TRUE
    elseif ExecMagic(QUICKTYPE_ATTACK, ALLBODY) == TRUE then
        ClearAttackQueue()
        return TRUE
    elseif ExecSwordArtsStanceOnCancelTiming(ALLBODY) == TRUE then
        ClearAttackQueue()
        return TRUE
    elseif ExecAttack(r1, r2, l1, l2, b1, b2, guardcondition, ALLBODY, artsr1, artsr2) == TRUE then
        ClearAttackQueue()
        return TRUE
    elseif ExecWeaponChange(ALLBODY) == TRUE then
        ClearAttackQueue()
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, ALLBODY) == TRUE then
        ClearAttackQueue()
        return 
    elseif MoveStartonCancelTiming(Event_Move, gen_trans) == TRUE then
        ClearAttackQueue()
        return TRUE
    elseif ExecQuickTurnOnCancelTiming() == TRUE then
        ClearAttackQueue()
        return TRUE
    elseif ExecGesture() == TRUE then
        ClearAttackQueue()
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Sword Arts Parry Common
-----------------------------------------------
function SwordArtsParryCommonFunction()
    SetAIActionState()
    if ExecPassiveAction(TRUE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        return TRUE
    elseif ExecGuardOnCancelTiming(FALSE, ALLBODY) == TRUE then
        return TRUE
    elseif ExecItem(QUICKTYPE_ATTACK, ALLBODY) == TRUE then
        return TRUE
    elseif ExecMagic(QUICKTYPE_ATTACK, ALLBODY) == TRUE then
        return TRUE
    elseif ExecSwordArtsStanceOnCancelTiming(ALLBODY) == TRUE then
        return TRUE
    elseif ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, ALLBODY, FALSE, FALSE) == TRUE then
        return TRUE
    elseif ExecWeaponChange(ALLBODY) == TRUE then
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, ALLBODY) == TRUE then
        return 
    elseif MoveStartonCancelTiming(Event_Move, FALSE) == TRUE then
        return TRUE
    elseif ExecQuickTurnOnCancelTiming() == TRUE then
        return TRUE
    elseif ExecGesture() == TRUE then
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Sword Arts Stance Common
-----------------------------------------------
function SwordArtsStanceCommonFunction(r1, r2, l1, l2, b1, b2, blend_type, artsr1, artsr2, is_stance_end)
    if is_stance_end == FALSE then
        SetThrowAtkInvalid()
    end
    SetAIActionState()
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        return TRUE
    elseif env(1108, ACTION_ARM_L1) < 440 and ExecGuardOnCancelTiming(FALSE, blend_type) == TRUE then -- ActionDuration
        return TRUE
    elseif ExecItem(QUICKTYPE_NORMAL, blend_type) == TRUE then
        return TRUE
    elseif is_stance_end == TRUE and ExecSwordArtsStanceOnCancelTiming(blend_type) == TRUE then
        return TRUE
    elseif ExecAttack(r1, r2, l1, l2, b1, b2, FALSE, blend_type, artsr1, artsr2) == TRUE then
        return TRUE
    elseif ExecWeaponChange(blend_type) == TRUE then
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, blend_type) == TRUE then
        return TRUE
    elseif MoveStartonCancelTiming(Event_Move, FALSE) == TRUE then
        if is_stance_end == TRUE then
            SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        end
        ClearAttackQueue()
        return TRUE
    elseif blend_type ~= UPPER and ExecQuickTurn(LOWER) == TRUE then
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Gatling Stance Common
-----------------------------------------------
function GatlingStanceCommonFunction(blend_type, can_fire)
    SetAIActionState()
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        return TRUE
    elseif ExecItem(QUICKTYPE_NORMAL, blend_type) == TRUE then
        return TRUE
    elseif is_enable_stance == TRUE and ExecSwordArtsStanceOnCancelTiming(blend_type) == TRUE then
        return TRUE
    end
    local request = GetAttackRequest(FALSE)
    if can_fire == TRUE then
        if 17 < request and request < 26 then
            if IsExistArrow() == TRUE then
                ExecEventAllBody("W_NoArrow")
                return 
            elseif 0 < env(1001) then -- GetStamina
                SetSwordArtsPointInfo(ACTION_ARM_R1, TRUE)
                if c_Style == HAND_LEFT_BOTH then
                    ExecEventHalfBlend(Event_GatlingStanceRightFireStartLeft, blend_type)
                else
                    ExecEventHalfBlend(Event_GatlingStanceRightFireStart, blend_type)
                end
            end
        end
    elseif ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, blend_type, FALSE, FALSE) == TRUE then
        return TRUE
    end
    if ExecWeaponChange(blend_type) == TRUE then
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, blend_type) == TRUE then
        return TRUE
    elseif blend_type ~= UPPER and ExecQuickTurn(LOWER) == TRUE then
        return FALSE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Sword Arts Charge Shot Common
-----------------------------------------------
function SwordArtsChargeShotCommonFunction(blend_type)
    SetAIActionState()
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        return TRUE
    elseif ExecItem(QUICKTYPE_NORMAL, blend_type) == TRUE then
        return TRUE
    elseif ExecWeaponChange(blend_type) == TRUE then
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, blend_type) == TRUE then
        return TRUE
    elseif blend_type ~= UPPER and ExecQuickTurn(LOWER) == TRUE then
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Sword Arts Crossbow Step In
-----------------------------------------------
function SwordArtsCrossbowStepInFunction()
    SetThrowAtkInvalid()
    SetAIActionState()
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        return TRUE
    elseif ExecItem(QUICKTYPE_NORMAL, blend_type) == TRUE then
        return TRUE
    elseif ExecWeaponChange(blend_type) == TRUE then
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, blend_type) == TRUE then
        return TRUE
    elseif MoveStartonCancelTiming(Event_Move, FALSE) == TRUE then
        return TRUE
    elseif ExecQuickTurnOnCancelTiming() == TRUE then
        return TRUE
    elseif ExecGesture() == TRUE then
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Weapon Change Common
-----------------------------------------------
function WeaponChangeCommonFunction(blend_type)
    SetAIActionState()
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        return TRUE
    elseif ExecGuardOnCancelTiming(FALSE, blend_type) == TRUE then
        return TRUE
    elseif ExecItem(QUICKTYPE_NORMAL, blend_type) == TRUE then
        return TRUE
    elseif ExecMagic(QUICKTYPE_NORMAL, blend_type) == TRUE then
        CultForceQuit()
        return TRUE
    elseif ExecSwordArtsStanceOnCancelTiming(blend_type) == TRUE then
        return TRUE
    elseif ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, blend_type, FALSE, FALSE) == TRUE then
        return TRUE
    elseif ExecWeaponChange(blend_type) == TRUE then
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, blend_type) == TRUE then
        return TRUE
    elseif blend_type ~= UPPER and ExecQuickTurn(LOWER) == TRUE then
        return TRUE
    elseif ExecGesture() == TRUE then
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Hand Change Common
-----------------------------------------------
function HandChangeCommonFunction(blend_type)
    SetAIActionState()
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        return TRUE
    elseif ExecGuardOnCancelTiming(FALSE, blend_type) == TRUE then
        return TRUE
    elseif ExecItem(QUICKTYPE_NORMAL, blend_type) == TRUE then
        return TRUE
    elseif ExecMagic(QUICKTYPE_NORMAL, blend_type) == TRUE then
        CultForceQuit()
        return TRUE
    elseif ExecSwordArtsStanceOnCancelTiming(blend_type) == TRUE then
        return TRUE
    elseif ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, blend_type, FALSE, FALSE) == TRUE then
        return TRUE
    elseif ExecWeaponChange(blend_type) == TRUE then
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, blend_type) == TRUE then
        return TRUE
    elseif blend_type ~= UPPER and ExecQuickTurn(LOWER) == TRUE then
        return TRUE
    elseif ExecGesture() == TRUE then
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Damage Half Blend Common
-----------------------------------------------
function DamageHalfBlendCommonFunction(blend_type)
    SetAIActionState()
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        return TRUE
    elseif ExecGuardOnCancelTiming(FALSE, blend_type) == TRUE then
        return TRUE
    elseif ExecItem(QUICKTYPE_NORMAL, blend_type) == TRUE then
        return TRUE
    elseif ExecMagic(QUICKTYPE_NORMAL, blend_type) == TRUE then
        return TRUE
    elseif ExecSwordArtsStanceOnCancelTiming(blend_type) == TRUE then
        return TRUE
    elseif ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, blend_type, FALSE, FALSE) == TRUE then
        return TRUE
    elseif ExecWeaponChange(blend_type) == TRUE then
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, blend_type) == TRUE then
        return TRUE
    elseif blend_type ~= UPPER and ExecQuickTurn(LOWER) == TRUE then
        return TRUE
    elseif ExecGesture() == TRUE then
        return TRUE
    else
        return FALSE
    end
end

-----------------------------------------------
-- Event Common
-----------------------------------------------
function EventCommonFunction()
    act(9102) -- SetIsEventAnim
    act(147) -- SetIsEquipmentChangeableFromMenu
    act(2005, CEREMONY_STATE_RELEASE) -- SetCeremonyState
    if env(1112) == TRUE then -- HasThrowRequest
        return TRUE
    elseif ExecDeath() == TRUE then
        return TRUE
    elseif ExecDamage(FALSE, FALSE) == TRUE then
        return TRUE
    elseif ExecFallStart(FALL_TYPE_DEFAULT) == TRUE then
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        return TRUE
    elseif ExecGuardOnCancelTiming(FALSE, ALLBODY) == TRUE then
        return TRUE
    elseif ExecItem(QUICKTYPE_NORMAL, ALLBODY) == TRUE then
        return TRUE
    elseif ExecMagic(QUICKTYPE_NORMAL, ALLBODY) == TRUE then
        return TRUE
    elseif ExecSwordArtsStanceOnCancelTiming(ALLBODY) == TRUE then
        return TRUE
    elseif ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, ALLBODY, FALSE, FALSE) == TRUE then
        return TRUE
    elseif ExecWeaponChange(ALLBODY) == TRUE then
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, ALLBODY) == TRUE then
        return TRUE
    elseif MoveStartonCancelTiming(Event_MoveShort, FALSE) == TRUE then
        return TRUE
    elseif ExecQuickTurnOnCancelTiming() == TRUE then
        return TRUE
    elseif ExecGesture() == TRUE then
        return TRUE
    else
        return FALSE
    end
end

function CultMoveStart(blend_type, event)
    act(138, FALSE) -- SetIsEventActionPossible
    if GetVariable("MoveSpeedLevel") <= 0 then
        return FALSE
    else
        SetVariable("MoveSpeedLevelReal", 0)
        if blend_type == ALLBODY then
            ExecEventHalfBlend(event, ALLBODY)
            return TRUE
        elseif blend_type == UPPER then
            ExecEventHalfBlend(event, UPPER)
            return TRUE
        elseif blend_type == LOWER then
            ExecEventHalfBlend(event, LOWER)
            return TRUE
        else
            return FALSE
        end
    end
end

function CultHoldCommonFunction()
    act(138, FALSE) -- SetIsEventActionPossible
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        CultForceQuit()
        return TRUE
    elseif ExecItem(QUICKTYPE_NORMAL, ALLBODY) == TRUE then
        CultForceQuit()
        return TRUE
    elseif ExecMagic(QUICKTYPE_NORMAL, ALLBODY) == TRUE then
        CultForceQuit()
        return TRUE
    elseif ExecSwordArtsStanceOnCancelTiming(ALLBODY) == TRUE then
        return TRUE
    elseif ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, ALLBODY, FALSE, FALSE) == TRUE then
        CultForceQuit()
        return TRUE
    elseif ExecWeaponChange(ALLBODY) == TRUE then
        CultForceQuit()
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, ALLBODY) == TRUE then
        CultForceQuit()
        return TRUE
    else
        return FALSE
    end
end

function CultCommonFunction(id, is_end)
    act(138, FALSE) -- SetIsEventActionPossible
    act(9102) -- SetIsEventAnim
    act(2005, CEREMONY_STATE_RELEASE) -- GetCeremonyState
    if ExecPassiveAction(FALSE, FALL_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    elseif ExecEvasion(FALSE, ESTEP_NONE, FALSE) == TRUE then
        return TRUE
    elseif ExecGuardOnCancelTiming(FALSE, ALLBODY) == TRUE then
        return TRUE
    elseif ExecItem(QUICKTYPE_NORMAL, ALLBODY) == TRUE then
        return TRUE
    elseif ExecMagic(QUICKTYPE_NORMAL, ALLBODY) == TRUE then
        return TRUE
    elseif ExecSwordArtsStanceOnCancelTiming(ALLBODY) == TRUE then
        return TRUE
    elseif ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, ALLBODY, FALSE, FALSE) == TRUE then
        return TRUE
    elseif ExecWeaponChange(ALLBODY) == TRUE then
        return TRUE
    elseif ExecHandChange(HAND_RIGHT, FALSE, ALLBODY) == TRUE then
        return TRUE
    elseif is_end == FALSE then
        local str_int = "W_CultInterrupt"
        local str_end = "W_CultEnd"
        if env("儀式中断か") == TRUE then -- IsCeremonyInterrupt
            ExecEventAllBody(str_int .. id)
            return TRUE
        elseif env("儀式完了か") == TRUE then -- IsCeremonyComplete
            ExecEventAllBody(str_end .. id)
            return TRUE
        end
    end
    return FALSE
end

function HalfBlendLowerCommonFunction(event, lower_state, to_idle_on_cancel, is_fire_upper_on_move)
    if lower_state == LOWER_MOVE then
        if ExecStopHalfBlend(event, to_idle_on_cancel) == TRUE then
            return TRUE
        end
    else
        local blend_type = LOWER
        if env(2000) == TRUE then -- IsMoveCancelPossible
            blend_type = ALLBODY
        end
        if MoveStart(blend_type, Event_Move, FALSE) == TRUE then
            if is_fire_upper_on_move == TRUE and blend_type == LOWER then
                ExecEventHalfBlend(event, UPPER)
            end
            return TRUE
        elseif lower_state == LOWER_END_TURN then
            ExecEventHalfBlendNoReset(event, LOWER)
            return TRUE
        end
    end
    return FALSE
end

function HalfBlendLowerCommonFunctionNoSync(event, lower_state, to_idle_on_cancel, is_fire_upper_on_move)
    if lower_state == LOWER_MOVE then
        if ExecStopHalfBlend(event, to_idle_on_cancel) == TRUE then
            return TRUE
        end
    else
        local blend_type = LOWER
        if env(2000) == TRUE then -- IsMoveCancelPossible
            blend_type = ALLBODY
        end
        if MoveStart(blend_type, Event_MoveNoSync, FALSE) == TRUE then
            if is_fire_upper_on_move == TRUE and blend_type == LOWER then
                ExecEventHalfBlend(event, UPPER)
            end
            return TRUE
        elseif lower_state == LOWER_END_TURN then
            ExecEventHalfBlendNoReset(event, LOWER)
            return TRUE
        end
    end
    return FALSE
end

function HalfBlendUpperCommonFunction(lower_state)
    if lower_state == LOWER_MOVE and env(2000) == TRUE then -- IsMoveCancelPossible
        ExecEventHalfBlendNoReset(Event_Move, UPPER)
        return TRUE
    elseif env("アニメ終了か", 1) == TRUE or lower_state ~= LOWER_IDLE and env(301, 0) == TRUE then -- IsAnimEnd and GetEventEzStateFlag
        if lower_state == LOWER_TURN then
            local turn_state = GetVariable("UpperDefaultState01")
            local event = Event_QuickTurnRight180Mirror
            if turn_state == QUICKTURN_LEFT180_DEF1 then
                event = Event_QuickTurnLeft180Mirror
            end
            ExecEventHalfBlendNoReset(event)
        elseif lower_state == LOWER_MOVE then
            ExecEventHalfBlendNoReset(Event_Move, UPPER)
        else
            ExecEventNoReset("W_Idle")
        end
        return TRUE
    else
        return FALSE
    end
end

function ArrowLowerCommonFunction(event, lower_state, to_idle_on_cancel, is_fire_upper_on_move)
    if lower_state == LOWER_MOVE then
        if ExecStopHalfBlend(event, to_idle_on_cancel) == TRUE then
            return TRUE
        end
    else
        if lower_state ~= LOWER_TURN then
            local style = c_Style
            local hand = HAND_RIGHT
            if style == HAND_LEFT_BOTH then
                hand = HAND_LEFT
            end
            if env(225, hand) ~= WEAPON_CATEGORY_LARGE_ARROW then -- GetEquipWeaponCategory
                if MoveStart(LOWER, Event_Move, FALSE) == TRUE then
                    if is_fire_upper_on_move == TRUE then
                        ExecEventHalfBlend(event, UPPER)
                    end
                    return TRUE
                end
            elseif env(234) == FALSE and MoveStartonCancelTiming(Event_Move, FALSE) == TRUE then -- IsPrecisionShoot
                return TRUE
            end
        end
        if lower_state == LOWER_END_TURN then
            ExecEventHalfBlendNoReset(event, LOWER)
            return TRUE
        end
    end
    return FALSE
end

function CultExecStop()
    if GetVariable("MoveSpeedLevel") <= 0 then
        act(2005, CEREMONY_STATE_IDLE) -- GetCeremonyState
        ExecEventAllBody("W_CultIdle")
        return TRUE
    else
        return FALSE
    end
end

function CultForceQuit()
    act(2005, CEREMONY_STATE_FORCE_RELEASE) -- GetCeremonyState
    return 
end

function Idle_onActivate()
    SetVariable("MoveSpeedLevelReal", 0)
    ClearAttackQueue()
    act(9100) -- Wait
    act(139) -- RequestThrowAnimInterrupt
    act(129, TRUE) -- DisallowAdditiveTurning
    act("自動捕捉対象クリア") -- Acquired special category number for clear-equipped clear weapons
    return 
end

function Idle_onUpdate()
    if IdleCommonFunction() == TRUE then
        SetVariable("MenuOpenTime", 0)
        return 
    elseif env("装備メニュー開いているか") == FALSE then -- IsEquipmentMenuOpen
        SetVariable("MenuOpenTime", 0)
        return 
    else
        local time = GetVariable("MenuOpenTime")
        if 0.800000011920929 < time then
            SetVariable("MenuOpenTime", 0)
            ExecEventNoReset("W_InGameMenuIdleStart")
            return 
        else
            SetVariable("MenuOpenTime", time + GetDeltaTime())
            return 
        end
    end
end

function Idle_onDeactivate()
    act(129, FALSE) -- DisallowAdditiveTurning
    return 
end

function InGameMenuIdleLoop_onUpdate()
    if IdleCommonFunction() == TRUE then
        SetVariable("MenuCloseTime", 0)
        return 
    elseif env("装備メニュー開いているか") == TRUE then -- IsEquipmentMenuOpen
        SetVariable("MenuCloseTime", 0)
        return 
    else
        local time = GetVariable("MenuCloseTime")
        if 2 < time then
            SetVariable("MenuCloseTime", 0)
            ExecEventNoReset("W_InGameMenuIdleEnd")
            return 
        else
            SetVariable("MenuCloseTime", time + GetDeltaTime())
            return 
        end
    end
end

function InGameMenuIdleStart_onUpdate()
    if IdleCommonFunction() == TRUE then
        SetVariable("MenuCloseTime", 0)
        return 
    elseif env("装備メニュー開いているか") == TRUE then -- IsEquipmentMenuOpen
        SetVariable("MenuCloseTime", 0)
    else
        local time = GetVariable("MenuCloseTime")
        if time < 2 then
            SetVariable("MenuCloseTime", time + GetDeltaTime())
        end
    end
    if env("アニメ終了か", 3) == TRUE then -- IsAnimEnd
        local time = GetVariable("MenuCloseTime")
        if time < 2 then
            ExecEventNoReset("W_InGameMenuIdleLoop")
        else
            SetVariable("MenuCloseTime", 0)
            ExecEventNoReset("W_InGameMenuIdleEnd")
        end
        return 
    else
        return 
    end
end

function InGameMenuIdleEnd_onUpdate()
    if IdleCommonFunction() == TRUE then
        return 
    elseif env("アニメ終了か", 3) == TRUE then -- IsAnimEnd
        if env("装備メニュー開いているか") == TRUE then -- IsEquipmentMenuOpen
            ExecEventNoReset("W_InGameMenuIdleStart")
        else
            ExecEventNoReset("W_Idle")
        end
        return 
    else
        return 
    end
end

function DashStop_Upper_onActivate()
    act(9100) -- Wait
    return 
end

function DashStop_Upper_onUpdate()
    if StopCommonFunction(TRUE) == TRUE then
        return 
    else
        return 
    end
end

function RunStopFront_Upper_onActivate()
    act(9100) -- Wait
    return 
end

function RunStopFront_Upper_onUpdate()
    if StopCommonFunction(FALSE) == TRUE then
        return 
    else
        return 
    end
end

function RunStopBack_Upper_onActivate()
    act(9100) -- Wait
    return 
end

function RunStopBack_Upper_onUpdate()
    if StopCommonFunction(FALSE) == TRUE then
        return 
    else
        return 
    end
end

function RunStopLeft_Upper_onActivate()
    act(9100) -- Wait
    return 
end

function RunStopLeft_Upper_onUpdate()
    if StopCommonFunction(FALSE) == TRUE then
        return 
    else
        return 
    end
end

function RunStopRight_Upper_onActivate()
    act(9100) -- Wait
    return 
end

function RunStopRight_Upper_onUpdate()
    if StopCommonFunction(FALSE) == TRUE then
        return 
    else
        return 
    end
end

function WalkStopFront_onActivate()
    act(9100) -- Wait
    return 
end

function WalkStopFront_Upper_onUpdate()
    if StopCommonFunction(FALSE) == TRUE then
        return 
    else
        return 
    end
end

function WalkStopBack_Upper_onActivate()
    act(9100) -- Wait
    return 
end

function WalkStopBack_Upper_onUpdate()
    if StopCommonFunction(FALSE) == TRUE then
        return 
    else
        return 
    end
end

function WalkStopLeft_Upper_onActivate()
    act(9100) -- Wait
    return 
end

function WalkStopLeft_Upper_onUpdate()
    if StopCommonFunction(FALSE) == TRUE then
        return 
    else
        return 
    end
end

function WalkStopRight_Upper_onActivate()
    act(9100) -- Wait
    return 
end

function WalkStopRight_Upper_onUpdate()
    if StopCommonFunction(FALSE) == TRUE then
        return 
    else
        return 
    end
end

function Dash180_Upper_onActivate()
    act(9104) -- SetIsTurnAnimInProgress
    return 
end

function Dash180_Upper_onUpdate()
    act(9104) -- SetIsTurnAnimInProgress
    if QuickTurnCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Evasion_Activate()
    ActivateRightArmAdd(START_FRAME_NONE)
    return 
end

function Evasion_Update()
    UpdateRightArmAdd()
    return 
end

function Rolling_onUpdate()
	local r2 = "W_AttackRightHeavy2Start"
	local b2 = "W_AttackBothHeavy2Start"
   	local hand = HAND_RIGHT
	local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
    
    SetThrowAtkInvalid()
    
    if env(1116, 100390) == TRUE then
        ResetDamageCount()
    end
    
    local style = c_Style
    
    if style == HAND_LEFT_BOTH then
        if GetEquipType(HAND_LEFT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW, WEAPON_CATEGORY_CROSSBOW) == TRUE then
            act("精密射撃可能か") -- SetIsPreciseShootingPossible
        end
    elseif style == HAND_RIGHT_BOTH and GetEquipType(HAND_RIGHT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW, WEAPON_CATEGORY_CROSSBOW) == TRUE then
        act("精密射撃可能か") -- SetIsPreciseShootingPossible
    end
    
    local base_move_mult = 1
    local rolling_angle = GetVariable("RollingAngleReal")
    local addratio = 0.400000005960464
    local endratio = 1

    -- Greatwood Remnants
    if IsGreatwoodRemnants() == TRUE then
        base_move_mult = base_move_mult - 0.4
    end
    
    -- Carthus Milkring
    if IsCarthusMilkRing() == TRUE then 
        if env(1116, 112010) == TRUE then
            base_move_mult = base_move_mult + 0.25
        elseif env(1116, 112011) == TRUE then
            base_move_mult = base_move_mult + 0.3
        elseif env(1116, 112012) == TRUE then
            base_move_mult = base_move_mult + 0.35
        elseif env(1116, 112013) == TRUE then
            base_move_mult = base_move_mult + 0.4
        elseif env(1116, 112014) == TRUE then
            base_move_mult = base_move_mult + 0.45
        elseif env(1116, 112015) == TRUE then
            base_move_mult = base_move_mult + 0.5
        end
    end
    
    -- Fool's Sigil
    if IsFoolsSigil() == TRUE then
        -- Randomise movement speed
        if env(1116, 114100) == TRUE then
            base_move_mult = base_move_mult - 0.1
        elseif env(1116, 114101) == TRUE then
            base_move_mult = base_move_mult - 0.2
        elseif env(1116, 114102) == TRUE then
            base_move_mult = base_move_mult - 0.3
        elseif env(1116, 114103) == TRUE then
            base_move_mult = base_move_mult - 0.4
        elseif env(1116, 114104) == TRUE then
            base_move_mult = base_move_mult - 0.5
        elseif env(1116, 114105) == TRUE then
            base_move_mult = base_move_mult + 0.1
        elseif env(1116, 114106) == TRUE then
            base_move_mult = base_move_mult + 0.2
        elseif env(1116, 114107) == TRUE then
            base_move_mult = base_move_mult + 0.3
        elseif env(1116, 114108) == TRUE then
            base_move_mult = base_move_mult + 0.4
        elseif env(1116, 114109) == TRUE then
            base_move_mult = base_move_mult + 0.5
        end
    end
    
    -- Devil's Trumpet
    if env(1116, 116200) == TRUE then
        base_move_mult = base_move_mult + 1.0
    end 
    
    -- Trio of Explorers Boon
    if env(1116, 112594) == TRUE then
        base_move_mult = base_move_mult + 0.2
    end
    
    -- Yhorm Malus
    if env(1116, 112620) == TRUE then
        base_move_mult = 0.25
    end
    
    act(2001, math.abs(base_move_mult + addratio * math.abs(math.sin(math.rad(2 * rolling_angle)))))
    
    if sp_kind == 272 then
		r2 = "W_AttackRightHeavy1Start"
	end
	if sp_kind == 604 then
		b2 = "W_AttackBothHeavy1Start"
	end
    if EvasionCommonFunction(FALL_TYPE_DEFAULT, "W_AttackRightLightStep", r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLightStep", b2) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then -- IsAnimEnd
        ExecEventAllBody("W_Idle")
        return 
    else
        SetRollingTurnCondition(FALSE)
        return 
    end
end

function RollingSelftrans_onActivate()
    ResetDamageCount()
    return 
end

function RollingSelftrans_onUpdate()
    SetThrowAtkInvalid()
    
    local style = c_Style
    
    if style == HAND_LEFT_BOTH then
        if GetEquipType(HAND_LEFT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW, WEAPON_CATEGORY_CROSSBOW) == TRUE then
            act("精密射撃可能か") -- SetIsPreciseShootingPossible
        end
    elseif style == HAND_RIGHT_BOTH and GetEquipType(HAND_RIGHT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW, WEAPON_CATEGORY_CROSSBOW) == TRUE then
        act("精密射撃可能か") -- SetIsPreciseShootingPossible
    end
    
    local base_move_mult = 1
    local rolling_angle = GetVariable("RollingAngleRealSelftrans")
    local addratio = 0.400000005960464
    local endratio = 1
    
    -- Greatwood Remnants
    if IsGreatwoodRemnants() == TRUE then
        base_move_mult = base_move_mult - 0.4
    end
    
    -- Carthus Milkring
    if IsCarthusMilkRing() == TRUE then 
        if env(1116, 112010) == TRUE then
            base_move_mult = base_move_mult + 0.25
        elseif env(1116, 112011) == TRUE then
            base_move_mult = base_move_mult + 0.3
        elseif env(1116, 112012) == TRUE then
            base_move_mult = base_move_mult + 0.35
        elseif env(1116, 112013) == TRUE then
            base_move_mult = base_move_mult + 0.4
        elseif env(1116, 112014) == TRUE then
            base_move_mult = base_move_mult + 0.45
        elseif env(1116, 112015) == TRUE then
            base_move_mult = base_move_mult + 0.5
        end
    end
    
    -- Fool's Sigil
    if IsFoolsSigil() == TRUE then
        -- Randomise movement speed
        if env(1116, 114100) == TRUE then
            base_move_mult = base_move_mult - 0.1
        elseif env(1116, 114101) == TRUE then
            base_move_mult = base_move_mult - 0.2
        elseif env(1116, 114102) == TRUE then
            base_move_mult = base_move_mult - 0.3
        elseif env(1116, 114103) == TRUE then
            base_move_mult = base_move_mult - 0.4
        elseif env(1116, 114104) == TRUE then
            base_move_mult = base_move_mult - 0.5
        elseif env(1116, 114105) == TRUE then
            base_move_mult = base_move_mult + 0.1
        elseif env(1116, 114106) == TRUE then
            base_move_mult = base_move_mult + 0.2
        elseif env(1116, 114107) == TRUE then
            base_move_mult = base_move_mult + 0.3
        elseif env(1116, 114108) == TRUE then
            base_move_mult = base_move_mult + 0.4
        elseif env(1116, 114109) == TRUE then
            base_move_mult = base_move_mult + 0.5
        end
    end
    
    -- Devil's Trumpet
    if env(1116, 116200) == TRUE then
        base_move_mult = base_move_mult + 1.0
    end 
    
    -- Trio of Explorers Boon
    if env(1116, 112594) == TRUE then
        base_move_mult = base_move_mult + 0.2
    end
    
    -- Yhorm Malus
    if env(1116, 112620) == TRUE then
        base_move_mult = 0.25
    end
    
    act(2001, math.abs(base_move_mult + addratio * math.abs(math.sin(math.rad(2 * rolling_angle)))))
    
    if EvasionCommonFunction(FALL_TYPE_DEFAULT, "W_AttackRightLightStep", "W_AttackRightHeavy2Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLightStep", "W_AttackBothHeavy2Start") == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then -- IsAnimEnd
        ExecEventAllBody("W_Idle")
        return 
    else
        SetRollingTurnCondition(TRUE)
        return 
    end
end

function BackStep_onActivate()
    ResetDamageCount()
    return 
end

function BackStep_onUpdate()
    local b2 = "W_AttackBothHeavy1Start"
    local hand = HAND_RIGHT
    local style = c_Style
    local base_move_mult = 1.0
    
    -- Ring of Retreat
    if IsRingOfRetreat() == TRUE then 
        if env(1116, 112530) == TRUE then
            base_move_mult = base_move_mult + 0.15
        elseif env(1116, 112531) == TRUE then
            base_move_mult = base_move_mult + 0.3
        elseif env(1116, 112532) == TRUE then
            base_move_mult = base_move_mult + 0.5
        elseif env(1116, 112533) == TRUE then
            base_move_mult = base_move_mult + 0.65
        elseif env(1116, 112534) == TRUE then
            base_move_mult = base_move_mult + 0.8
        elseif env(1116, 112535) == TRUE then
            base_move_mult = base_move_mult + 1.0
        end
    end
    
    -- Fool's Sigil
    if IsFoolsSigil() == TRUE then
        -- Randomise movement speed
        if env(1116, 114100) == TRUE then
            base_move_mult = base_move_mult - 0.1
        elseif env(1116, 114101) == TRUE then
            base_move_mult = base_move_mult - 0.2
        elseif env(1116, 114102) == TRUE then
            base_move_mult = base_move_mult - 0.3
        elseif env(1116, 114103) == TRUE then
            base_move_mult = base_move_mult - 0.4
        elseif env(1116, 114104) == TRUE then
            base_move_mult = base_move_mult - 0.5
        elseif env(1116, 114105) == TRUE then
            base_move_mult = base_move_mult + 0.1
        elseif env(1116, 114106) == TRUE then
            base_move_mult = base_move_mult + 0.2
        elseif env(1116, 114107) == TRUE then
            base_move_mult = base_move_mult + 0.3
        elseif env(1116, 114108) == TRUE then
            base_move_mult = base_move_mult + 0.4
        elseif env(1116, 114109) == TRUE then
            base_move_mult = base_move_mult + 0.5
        end
    end
    
    act(2001, base_move_mult)
    
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end

    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
    
	if sp_kind == 604 then
		b2 = "W_AttackBothHeavy2Start"
	end
    
    if EvasionCommonFunction(FALL_TYPE_DEFAULT, "W_AttackRightLightDash", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothDash", b2) == TRUE then
        return 
    else
        return 
    end
end

function Jump_onActivate()
    ResetDamageCount()
    return 
end

function Jump_onUpdate()
    local base_distance_adjustment = 1.0
    
    -- Bell of Grace
    if IsBellOfGrace() == TRUE then 
        if env(1116, 112550) == TRUE then
            base_distance_adjustment = base_distance_adjustment + 0.75
        elseif env(1116, 112551) == TRUE then
           base_distance_adjustment = base_distance_adjustment + 1
        elseif env(1116, 112552) == TRUE then
            base_distance_adjustment = base_distance_adjustment + 1.25
        elseif env(1116, 112553) == TRUE then
            base_distance_adjustment = base_distance_adjustment + 1.5
        elseif env(1116, 112554) == TRUE then
            base_distance_adjustment = base_distance_adjustment + 1.75
        elseif env(1116, 112555) == TRUE then
            base_distance_adjustment = base_distance_adjustment + 2
        end
    end
    
    -- Weapon Jump Boost
    if env(1116, 112591) == TRUE then
        base_distance_adjustment = base_distance_adjustment + 0.25
    end
    
    -- Moonflower
    if env(1116, 116300) == TRUE then
        base_distance_adjustment = base_distance_adjustment + 5.0
    end
    
    -- Apply root motion modifier
    if base_distance_adjustment > 1.0 then
        act(2001, base_distance_adjustment)
    end
    
    if EvasionCommonFunction(FALL_TYPE_JUMP, "W_AttackRightLightStep", "W_AttackRightHeavy2Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLightStep", "W_AttackBothHeavy2Start") == TRUE then
        return 
    elseif env(1116, 100320) == TRUE and 0.5 < GetVariable("MoveSpeedLevel") then 
        ExecEventNoReset("W_JumpLong")
        return 
    else
        return 
    end
end

function JumpLong_onUpdate()
    if EvasionCommonFunction(FALL_TYPE_JUMP, "W_AttackRightLightStep", "W_AttackRightHeavy2Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLightStep", "W_AttackBothHeavy2Start") == TRUE then
        return 
    else
        return 
    end
end

function EStepDown_onActivate()
    ResetDamageCount()
    return 
end

function EStepDown_onUpdate()
    SetThrowAtkInvalid()
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        if GetEquipType(HAND_LEFT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW, WEAPON_CATEGORY_CROSSBOW) == TRUE then
            act("精密射撃可能か") -- SetIsPreciseShootingPossible
        end
    elseif style == HAND_RIGHT_BOTH and GetEquipType(HAND_RIGHT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW, WEAPON_CATEGORY_CROSSBOW) == TRUE then
        act("精密射撃可能か") -- SetIsPreciseShootingPossible
    end
    local rolling_angle = GetVariable("RollingAngleReal")
    local addratio = 0.400000005960464
    local endratio = 1
    act(2001, math.abs(1 + addratio * math.abs(math.sin(math.rad(2 * rolling_angle))))) -- SetMovementScaleMult
    if EvasionCommonFunction(FALL_TYPE_DEFAULT, "W_AttackRightLightStep", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLightStep", "W_AttackBothHeavy2Start") == TRUE then
        return 
    else
        SetRollingTurnCondition(FALSE)
        return 
    end
end

function ChainRecover_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if DamageHalfBlendCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_ChainRecoverMirror, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function Move_Activate()
    SetMoveWeightIndex()
    SetVariable("ChangeStartWaistTwistAngle", 0)
    SetVariable("ChangeEndWaistTwistAngle", 0)
    return 
end

function Move_Update()
    SetMoveWeightIndex()
    ChangeWaistTwist(-10, 0, -20, 0)
    return 
end

function Move_onActivate()
    act(101, TRUE)
    return 
end

function Move_onUpdate()
    act(101, TRUE)
    local move_speed = GetVariable("MoveSpeedIndex")

    if move_speed == 2 then
        SetThrowAtkInvalid()
    end
    if GetVariable("MoveType") == 3 then
        act("4方向移動閾値設定", 60, 45, 60, 60) -- Set4DirectionMovementThreshold
    elseif GetVariable("MoveType") == 0 then
        act("4方向移動閾値設定", 70, 40, 60, 20) -- Set4DirectionMovementThreshold
    else
        act("4方向移動閾値設定", 40, 70, 60, 20) -- Set4DirectionMovementThreshold
    end
    SpeedUpdate()
    if env(1007) == TRUE then
        local npc_turn_speed = 240
        if move_speed == 2 then
            npc_turn_speed = 210
        else
            local dir = GetVariable("MoveDirection")
            if dir == 0 then
                npc_turn_speed = 90
            end
        end
        SetTurnSpeed(npc_turn_speed)
    end
    
    local base_move_mult = 1.0
    local addratio = 0
    local endratio = 1
    local ratio = 1
    
    if GetVariable("MoveDirection") == 3 or GetVariable("MoveDirection") == 2 then
        local base_move_mult = 0.959999978542328
    elseif GetVariable("MoveDirection") == 1 then
        local base_move_mult = 0.959999978542328
    elseif GetVariable("MoveDirection") == 0 then
        local base_move_mult = 0.959999978542328
    end
    
    -- Dashmaster's String
    if IsDashmastersString() == TRUE then
        if env(1116, 112540) == TRUE then
            base_move_mult = base_move_mult + 0.25
        elseif env(1116, 112541) == TRUE then
            base_move_mult = base_move_mult + 0.3
        elseif env(1116, 112542) == TRUE then
            base_move_mult = base_move_mult + 0.35
        elseif env(1116, 112543) == TRUE then
            base_move_mult = base_move_mult + 0.4
        elseif env(1116, 112544) == TRUE then
            base_move_mult = base_move_mult + 0.45
        elseif env(1116, 112545) == TRUE then
            base_move_mult = base_move_mult + 0.5
        end
    end
    
    -- Relic of Swiftness
    if env(1116, 112570) == TRUE then
        base_move_mult = base_move_mult + 0.5
    end
    
    -- Weapon Movement Speed Boost
    if env(1116, 112590) == TRUE then
        base_move_mult = base_move_mult + 0.1
    end
    
    -- Tailwind
    if env(1116, 112800) == TRUE or env(1116, 112801) == TRUE then
        base_move_mult = base_move_mult + 0.2
    end
    
    -- Fool's Sigil
    if IsFoolsSigil() == TRUE then
        -- Randomise movement speed
        if env(1116, 114100) == TRUE then
            base_move_mult = base_move_mult - 0.1
        elseif env(1116, 114101) == TRUE then
            base_move_mult = base_move_mult - 0.2
        elseif env(1116, 114102) == TRUE then
            base_move_mult = base_move_mult - 0.3
        elseif env(1116, 114103) == TRUE then
            base_move_mult = base_move_mult - 0.4
        elseif env(1116, 114104) == TRUE then
            base_move_mult = base_move_mult - 0.5
        elseif env(1116, 114105) == TRUE then
            base_move_mult = base_move_mult + 0.1
        elseif env(1116, 114106) == TRUE then
            base_move_mult = base_move_mult + 0.2
        elseif env(1116, 114107) == TRUE then
            base_move_mult = base_move_mult + 0.3
        elseif env(1116, 114108) == TRUE then
            base_move_mult = base_move_mult + 0.4
        elseif env(1116, 114109) == TRUE then
            base_move_mult = base_move_mult + 0.5
        end
    end
    
    -- Nameless King Malus
    if env(1116, 112621) == TRUE then
        base_move_mult = base_move_mult - 0.5
    end
    
    act(2001, base_move_mult)
    
    return 
end

function MoveNoSync_onActivate()
    act(101, TRUE) -- SwitchMotion
    return 
end

function MoveNoSync_onUpdate()
    Move_onUpdate()
    return 
end

function Move_Upper_onActivate()
    act(9100) -- Wait
    return 
end

function Move_Upper_onUpdate()
    if MoveCommonFunction(UPPER) == TRUE then
        return 
    else
        return 
    end
end

function Guard_Activate()
    local style = c_Style
    if style == HAND_RIGHT_BOTH then
        SetAttackHand(HAND_RIGHT)
    else
        SetAttackHand(HAND_LEFT)
    end
    return 
end

function GuardStart_Upper_onActivate()
    if IsNodeActive("GuardStart_Upper Selector") == FALSE then
        act(9100) -- Wait
    end
    return 
end

function GuardStart_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 90, 90) -- LockonSystemUnableToTurnAngle
        act(129, TRUE) -- DisallowAdditiveTurning
    else
        act(129, FALSE) -- DisallowAdditiveTurning
    end
    if GuardCommonFunction(FALSE, blend_type) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE or env(301, 0) == TRUE then -- IsAnimEnd or GetEventEzStateFlag
        ExecEventHalfBlend(Event_GuardOn, blend_type)
        return 
    elseif HalfBlendLowerCommonFunction(Event_GuardOn, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function GuardOn_Upper_onActivate()
    if IsNodeActive("GuardOn_Upper Selector") == FALSE then
        act(9100) -- Wait
    end
    return 
end

function GuardOn_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 90, 90) -- LockonSystemUnableToTurnAngle
        act(129, TRUE) -- DisallowAdditiveTurning
    else
        act(129, FALSE) -- DisallowAdditiveTurning
    end
    if GuardCommonFunction(FALSE, blend_type) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_GuardOn, lower_state, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function GuardEnd_Upper_onActivate()
    if IsNodeActive("GuardEnd_Upper Selector") == FALSE then
        act(9100) -- Wait
    end
    return 
end

function GuardEnd_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 90, 90) -- LockonSystemUnableToTurnAngle
        act(129, TRUE) -- DisallowAdditiveTurning
    else
        act(129, FALSE) -- DisallowAdditiveTurning
    end
    if GuardCommonFunction(TRUE, blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_GuardEnd, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function FallStart_onUpdate()
    if FallCommonFunction(TRUE, FALSE, FALL_DEFAULT) == TRUE then
        return 
    else
        return 
    end
end

function FallJumpStart_onUpdate()
    if FallCommonFunction(TRUE, TRUE, FALL_DEFAULT) == TRUE then
        return 
    else
        return 
    end
end

function FallLoop_onUpdate()
    if env(315, 12) == TRUE then -- IsHamariFallDeath
        ExecEvent("W_FallDeath")
        return 
    elseif FallCommonFunction(TRUE, FALSE, FALL_DEFAULT) == TRUE then
        return 
    else
        return 
    end
end

function FallAttackStart_onUpdate()
    if FallCommonFunction(TRUE, FALSE, FALL_ATTACK) == TRUE then
        return 
    else
        return 
    end
end

function FallAttackLoop_onUpdate()
    if FallCommonFunction(TRUE, FALSE, FALL_ATTACK) == TRUE then
        return 
    else
        return 
    end
end

function FallAttackCancel_onUpdate()
    if FallCommonFunction(TRUE, FALSE, FALL_ATTACK) == TRUE then
        return 
    else
        return 
    end
end

function Land_onUpdate()
    if LandCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function LandLow_onActivate()
    act(9100) -- Wait
    return 
end

function LandLow_onUpdate()
    if IdleCommonFunction() == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then -- IsAnimEnd
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function LandFallAttack_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function FallStartFaceUp_onUpdate()
    if FallCommonFunction(TRUE, FALSE, FALL_FACEUP) == TRUE then
        return 
    else
        return 
    end
end

function FallStartFaceDown_onUpdate()
    if FallCommonFunction(TRUE, FALSE, FALL_FACEDOWN) == TRUE then
        return 
    else
        return 
    end
end

function FallLoopFaceUp_onUpdate()
    if env(315, 12) == TRUE then -- IsHamariFallDeath
        ExecEvent("W_FallDeathFaceUp")
        return 
    elseif FallCommonFunction(TRUE, FALSE, FALL_FACEUP) == TRUE then
        return 
    else
        return 
    end
end

function FallLoopFaceDown_onUpdate()
    if env(315, 12) == TRUE then -- IsHamariFallDeath
        ExecEvent("W_FallDeathFaceDown")
        return 
    elseif FallCommonFunction(TRUE, FALSE, FALL_FACEDOWN) == TRUE then
        return 
    else
        return 
    end
end

function LandFaceUp_onUpdate()
    if LandCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function LandFaceDown_onUpdate()
    if LandCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Damage_Update()
    if env(1116, 30) == FALSE then 
        -- Parry
        SetThrowDefInvalid()
    end
    return 
end

function DamageSmall_onUpdate()
    act(2001, 0) -- SetMovementScaleMult
    if DamageCommonFunction(FALSE, ESTEP_NONE, FALL_TYPE_FORCE) == TRUE then
        return 
    else
        return 
    end
end

function DamageMiddle_onUpdate()
    act(2001, 0) -- SetMovementScaleMult
    if DamageCommonFunction(FALSE, ESTEP_NONE, FALL_TYPE_FORCE) == TRUE then
        return 
    else
        return 
    end
end

function DamageLarge_onUpdate()
    act(2001, 0) -- SetMovementScaleMult
    if DamageCommonFunction(FALSE, ESTEP_NONE, FALL_TYPE_FORCE) == TRUE then
        return 
    else
        return 
    end
end

function DamageLarge2_onUpdate()
    act(2001, 0) -- SetMovementScaleMult
    if DamageCommonFunction(FALSE, ESTEP_NONE, FALL_TYPE_FORCE) == TRUE then
        return 
    else
        return 
    end
end

function DamageWeak_onUpdate()
    if DamageCommonFunction(FALSE, ESTEP_NONE, FALL_TYPE_FORCE) == TRUE then
        return 
    else
        return 
    end
end

function DamageMinimum_onUpdate()
    if DamageCommonFunction(FALSE, ESTEP_NONE, FALL_TYPE_FORCE) == TRUE then
        return 
    else
        return 
    end
end

function DamageFling_onUpdate()
    if DamageCommonFunction(FALSE, ESTEP_DOWN, FALL_TYPE_FACEDOWN_LOOP) == TRUE then
        return 
    else
        return 
    end
end

function DamageExLarge_onUpdate()
    if DamageCommonFunction(FALSE, ESTEP_DOWN, FALL_TYPE_FORCE_LOOP) == TRUE then
        return 
    else
        return 
    end
end

function DamagePush_onUpdate()
    act(2001, 0) -- SetMovementScaleMult
    if DamageCommonFunction(FALSE, ESTEP_NONE, FALL_TYPE_FORCE) == TRUE then
        return 
    else
        return 
    end
end

function DamageSmallBlow_onUpdate()
    if DamageCommonFunction(FALSE, ESTEP_DOWN, FALL_TYPE_FORCE_LOOP) == TRUE then
        return 
    else
        return 
    end
end

function DamageUpper_onUpdate()
    if DamageCommonFunction(FALSE, ESTEP_DOWN, FALL_TYPE_FACEDOWN_LOOP) == TRUE then
        return 
    else
        return 
    end
end

function DamageExBlast_onUpdate()
    if DamageCommonFunction(FALSE, ESTEP_DOWN, FALL_TYPE_FORCE_LOOP) == TRUE then
        return 
    else
        return 
    end
end

function DamageBreath_onUpdate()
    if DamageCommonFunction(FALSE, ESTEP_DOWN, FALL_TYPE_FORCE_LOOP) == TRUE then
        return 
    else
        return 
    end
end

function DamageParry_onUpdate()
    if DamageCommonFunction(FALSE, ESTEP_NONE, FALL_TYPE_DEFAULT) == TRUE then
        return 
    else
        return 
    end
end

function SpecialDamageUpper_onUpdate()
    if env(334, 10) == TRUE then -- GetBehaviorID
        Replanning()
        ResetDamageCount()
        act(141, DAMAGE_FLAG_SMALL) -- SetDamageAnimType
        ExecEvent("W_SpecialDamageUpper")
        return TRUE
    elseif env(301, 0) == FALSE and env(248) == TRUE then -- GetEventEzStateFlag and IsTruelyLanding
        ExecEvent("W_SpecialDamageUpperLand")
        return TRUE
    elseif env("アニメ終了か", 1) == TRUE then -- IsAnimEnd
        ExecEvent("W_SpecialDamageUpperLoop")
    end
    return 
end

function SpecialDamageUpperLoop_onUpdate()
    if env(334, 10) == TRUE then -- GetBehaviorID
        Replanning()
        ResetDamageCount()
        act(141, DAMAGE_FLAG_SMALL) -- SetDamageAnimType
        ExecEvent("W_SpecialDamageUpper")
        return TRUE
    elseif env(248) == TRUE then -- IsTruelyLanding
        ExecEvent("W_SpecialDamageUpperLand")
        return TRUE
    else
        return 
    end
end

function SpecialDamageUpperLand_onUpdate()
    if env(301, 0) == TRUE then -- GetEventEzStateFlag
        if IsDead() == TRUE then
            SetVariable("IndexDeath", DEATH_TYPE_SPECIAL_UPPER)
            ExecEventAllBody("W_DeathStart")
            return 
        elseif DamageCommonFunction(FALSE, ESTEP_NONE, FALL_TYPE_DEFAULT) == TRUE then
            return 
        end
    end
    return 
end

function GuardDamageSmall_onUpdate()
    act(110) -- SetStaminaRecoveryDisabled
    if DamageCommonFunction(TO_GUARDON, ESTEP_NONE, FALL_TYPE_DEFAULT) == TRUE then
        return 
    else
        return 
    end
end

function GuardDamageMiddle_onUpdate()
    act(110) -- SetStaminaRecoveryDisabled
    if DamageCommonFunction(TO_GUARDON, ESTEP_NONE, FALL_TYPE_DEFAULT) == TRUE then
        return 
    else
        return 
    end
end

function GuardDamageLarge_onUpdate()
    act(110) -- SetStaminaRecoveryDisabled
    if DamageCommonFunction(TO_GUARDON, ESTEP_NONE, FALL_TYPE_DEFAULT) == TRUE then
        return 
    else
        return 
    end
end

function GuardBreak_onUpdate()
    if DamageCommonFunction(FALSE, ESTEP_NONE, FALL_TYPE_DEFAULT) == TRUE then
        return 
    else
        return 
    end
end

function GuardDamageSmall_GenTrans_onUpdate()
    act(110) -- SetStaminaRecoveryDisabled
    if DamageCommonFunction(TO_GUARDON, ESTEP_NONE, FALL_TYPE_DEFAULT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then -- IsAnimEnd
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function GuardDamageMiddle_GenTrans_onUpdate()
    act(110) -- SetStaminaRecoveryDisabled
    if DamageCommonFunction(TO_GUARDON, ESTEP_NONE, FALL_TYPE_DEFAULT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then -- IsAnimEnd
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function GuardDamageLarge_GenTrans_onUpdate()
    act(110) -- SetStaminaRecoveryDisabled
    if DamageCommonFunction(TO_GUARDON, ESTEP_NONE, FALL_TYPE_DEFAULT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then -- IsAnimEnd
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function GuardBreak_GenTrans_onUpdate()
    if DamageCommonFunction(FALSE, ESTEP_NONE, FALL_TYPE_DEFAULT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then -- IsAnimEnd
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function GuardDamageBreak_onUpdate()
    if DamageCommonFunction(FALSE, ESTEP_NONE, FALL_TYPE_DEFAULT) == TRUE then
        return 
    else
        return 
    end
end

function GuardBreakWall_onUpdate()
    if DamageCommonFunction(FALSE, ESTEP_NONE, FALL_TYPE_DEFAULT) == TRUE then
        return 
    else
        return 
    end
end

function GuardDamageExLarge_onUpdate()
    if DamageCommonFunction(FALSE, ESTEP_DOWN, FALL_TYPE_DEFAULT) == TRUE then
        return 
    else
        return 
    end
end

function DeathIdle_onActivate()
    act(126, TRUE)
    return 
end

function DeathIdle_onDeactivate()
    act(126, FALSE)
    return 
end

function QuickTurn_Activate()
    return 
end

function QuickTurn_Deactivate()
    return 
end

function QuickTurnLeft180_Upper_onUpdate()
    if QuickTurnCommonFunction() == TRUE then
        return 
    elseif GetVariable("IsLockon") == false then
        ExecEventNoReset("W_Idle")
        return 
    elseif env("アニメ終了か", 1) == TRUE then -- IsAnimEnd
        ExecEventNoReset("W_Idle")
        return 
    else
        return 
    end
end

function QuickTurnRight180_Upper_onUpdate()
    if QuickTurnCommonFunction() == TRUE then
        return 
    elseif GetVariable("IsLockon") == false then
        ExecEventNoReset("W_Idle")
        return 
    elseif env("アニメ終了か", 1) == TRUE then -- IsAnimEnd
        ExecEventNoReset("W_Idle")
        return 
    else
        return 
    end
end

function AttackRight_Activate()
    SetInterruptType(INTERRUPT_FINDATTACK)
    SetAttackHand(HAND_RIGHT)
    return 
end

function AttackRightLight1_onUpdate()
    local r2 = "W_AttackRightHeavy1SubStart"
    local hand = HAND_RIGHT
       
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
    
    if sp_kind == 604 then
        r2 = "W_AttackRightHeavy2Start"
    end
	
    if AttackCommonFunction("W_AttackRightLight2", r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight2", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackRightLight2_onUpdate()
    local r2 = "W_AttackRightHeavy1Start"
    local hand = HAND_RIGHT
       
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
    
    if sp_kind == 279 then
        r2 = "W_AttackRightHeavy1SubStart"
    end
	
	if sp_kind == 604 then
        r2 = "W_AttackRightHeavy2Start"
    end
    
    if AttackCommonFunction("W_AttackRightLight3", r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight3", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackRightLight3_onUpdate()
    local r1 = "W_AttackRightLight2"
    local r2 = "W_AttackRightHeavy1SubStart"
    local hand = HAND_RIGHT
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
    
    if sp_kind == 276 or sp_kind == 282 or sp_kind == 726 or sp_kind == 724 or sp_kind == 728 or sp_kind == 729 or sp_kind == 730 or sp_kind == 712 or sp_kind == 732 or sp_kind == 733 or sp_kind == 734 or sp_kind == 736 or sp_kind == 603 or sp_kind == 146 or sp_kind == 600 or sp_kind == 742 or sp_kind == 744 or sp_kind == 745 or sp_kind == 747 or sp_kind == 270 then
        r1 = "W_AttackRightBackstep"
    end
    
    if sp_kind == 282 then
        r2 = "W_AttackRightHeavy1Start"
    end
	
	if sp_kind == 604 then
        r1 = "W_AttackRightLightStepSpecial"
		r2 = "W_AttackRightHeavy2Start"
    end
    
    if AttackCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight2", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackRightLightKick_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackRightLightStep_onUpdate()
    local r1 = "W_AttackRightLight1"
	local r2 = "W_AttackRightHeavy1Start"
    local hand = HAND_RIGHT
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
    
    if sp_kind == 281 or sp_kind == 729 or sp_kind == 726 or sp_kind == 732 or sp_kind == 734 or sp_kind == 736 or sp_kind == 730 or sp_kind == 721 or sp_kind == 146 or sp_kind == 600 or sp_kind == 717 or sp_kind == 727 or sp_kind == 713 or sp_kind == 745 or sp_kind == 747 or sp_kind == 270 then
        r1 = "W_AttackRightLight2"
    end
    
	if sp_kind == 294 then
		r2 = "W_AttackRightHeavy2Start"
	end
	
    if sp_kind == 604 then
		r2 = "W_AttackRightHeavy2Start"
    end
    
    if AttackCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackRightLightStepSpecial_onUpdate()
    local r1 = "W_AttackRightLight1"
	local r2 = "W_AttackRightHeavy1Start"
    local hand = HAND_RIGHT
	
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)

	if sp_kind == 604 then
        r1 = "W_AttackRightBackstep"
		r2 = "W_AttackRightHeavy2Start"
    end
	
    if AttackCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackRightLightDash_onUpdate()
    local r1 = "W_AttackRightLight1"
	local r2 = "W_AttackRightHeavy1Start"
    local hand = HAND_RIGHT
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
    
    if sp_kind == 281 or sp_kind == 724 or sp_kind == 729 or sp_kind == 726 or sp_kind == 712 or sp_kind == 733 or sp_kind == 736 or sp_kind == 146 or sp_kind == 713 or sp_kind == 742 or sp_kind == 711 then
        r1 = "W_AttackRightLight2"
    end
	
    if sp_kind == 604 then
        r1 = "W_AttackRightLight2"
		r2 = "W_AttackRightHeavy2Start"
    end
    
	if sp_kind == 745 then
		r1 = "W_AttackRightBackstep"
	end	
	
	if sp_kind == 603 then
		r1 = "W_SpecialAttackRightHeavy"
	end	
		
    if AttackCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackRightLightDashSpecial_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackRightWhileGuard_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", TO_GUARDON, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackRightHeavy1SubStart_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy2Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy2Start", FALSE, TRUE) == TRUE then
        return 
    elseif env(301, 0) == TRUE or env("アニメ終了か", 1) == TRUE then -- GetEventEzStateFlag or IsAnimEnd
        act("特殊補間設定", 0, TRUE) -- Special interpolation setting
        ExecEventAllBody("W_AttackRightHeavy1Start")
        return 
    else
        return 
    end
end

function AttackRightHeavy1Start_onUpdate()
    act("特殊補間設定", 0, FALSE) -- Special interpolation setting
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy2Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy2Start", FALSE, TRUE) == TRUE then
        return 
    elseif env(1108, ACTION_ARM_R2) <= 0 and env(1116, 100280) == TRUE then -- ActionDuration 
        ExecEventAllBody("W_AttackRightHeavy1End")
        return
    elseif env(1116, 100720) == TRUE then
        ExecEventAllBody("W_AttackRightHeavySpecial1Start")
        return
    elseif env(1116, 100722) == TRUE then
        ExecEventAllBody("W_SpecialAttackRightHeavy")
        return 		
    elseif env(1116, 100723) == TRUE then
        ExecEventAllBody("W_SpecialAttackRightLight")
        return 		
    else
		return
    end
end

function AttackRightHeavy1End_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy2Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy2Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackRightHeavy2Start_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    elseif env(1108, ACTION_ARM_R2) <= 0 and env(1116, 100280) == TRUE then -- ActionDuration 
        ExecEventAllBody("W_AttackRightHeavy2End")
        return
    elseif env(1116, 100720) == TRUE then
        ExecEventAllBody("W_AttackRightHeavySpecial2Start")
        return
    elseif env(1116, 100722) == TRUE then
        ExecEventAllBody("W_SpecialAttackRightLight")
        return 
	elseif env(1116, 100723) == TRUE then
        ExecEventAllBody("W_SpecialAttackRightHeavy")
        return 		
    else
        return 
    end
end

function AttackRightHeavy2End_onUpdate()
	local r1 = "W_AttackRightLight1"
    local hand = HAND_RIGHT
	
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)

	if sp_kind == 604 then
        r1 = "W_AttackRightLight2"
    end
	
    if AttackCommonFunction(r1, "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackRightHeavySpecial1SubStart_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy2Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy2Start", FALSE, TRUE) == TRUE then
        return 
    elseif env(301, 0) == TRUE or env("アニメ終了か", 1) == TRUE then -- GetEventEzStateFlag or IsAnimEnd
        act("特殊補間設定", 0, TRUE) -- Special interpolation setting
        ExecEventAllBody("W_AttackRightHeavySpecial1Start")
        return 
    elseif env(1108, ACTION_ARM_R2) <= 0 and env(1116, 100711) == TRUE then -- ActionDuration 
        ExecEventAllBody("W_AttackRightHeavySpecial2End")
        return
    elseif env(1116, 100712) == TRUE then
        ExecEventAllBody("W_AttackRightHeavySpecial2Start")
        return  
    else
        return 
    end
end

function AttackRightHeavySpecial1Start_onUpdate()
    local hand = HAND_RIGHT
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
	local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	if sp_kind == 177 then
        act(2001, 1.5)
    end	
    act("特殊補間設定", 0, FALSE) -- Special interpolation setting
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy2Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy2Start", FALSE, TRUE) == TRUE then
        return 
    elseif env(1108, ACTION_ARM_R2) <= 0 and env(1116, 100280) == TRUE then -- ActionDuration 
        ExecEventAllBody("W_AttackRightHeavySpecial1End")
        return 
    elseif env(1116, 100723) == TRUE then
        ExecEventAllBody("W_SpecialAttackRightHeavy")
        return 		
    else
        return 
    end
end

function AttackRightHeavySpecial1End_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy2Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy2Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackRightHeavySpecial2Start_onUpdate()
	local r1 = "W_AttackRightLight1"
   	local hand = HAND_RIGHT
	
	local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	
	if sp_kind == 272 or sp_kind == 604 then
		r1 = "W_AttackRightLight2"
	end
	
    if AttackCommonFunction(r1, "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    elseif env(1108, ACTION_ARM_R2) <= 0 and env(1116, 100280) == TRUE then -- ActionDuration 
        ExecEventAllBody("W_AttackRightHeavySpecial2End")
        return 
    elseif env(1116, 100723) == TRUE then
        ExecEventAllBody("W_SpecialAttackRightLight")
        return 
	else
        return 
    end
end

function AttackRightHeavySpecial2End_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackRightHeavyWepBroken1Start_onUpdate()
    AttackRightHeavy1Start_onUpdate()
    return 
end

function AttackRightHeavyWepBroken2Start_onUpdate()
    AttackRightHeavy2Start_onUpdate()
    return 
end

function AttackRightHeavyWepBroken1SubStart_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy2Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy2Start", FALSE, TRUE) == TRUE then
        return 
    elseif env(301, 0) == TRUE or env("アニメ終了か", 1) == TRUE then -- GetEventEzStateFlag or IsAnimEnd
        act("特殊補間設定", 0, TRUE) -- Special interpolation setting
        ExecEventAllBody("W_AttackRightHeavyWepBroken1Start")
        return 
    else
        return 
    end
end

function AttackRightHeavyKick_onUpdate()
    local r1 = "W_AttackRightLightStep"
	local r2 = "W_AttackRightHeavy2Start"
   	local hand = HAND_RIGHT
	
	local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	
	if sp_kind == 272 then
		r2 = "W_AttackRightHeavy1Start"
	end
	
	if sp_kind == 604 then
		r1 = "W_AttackRightLight2"
    end
	
    if AttackCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackRightHeavyKickSpecial_onUpdate()
    if AttackCommonFunction("W_AttackRightLightStep", "W_AttackRightHeavy2Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackRightBackstep_onUpdate()
    local r1 = "W_AttackRightLight1"
	local r2 = "W_AttackRightHeavy1Start"
    local hand = HAND_RIGHT
    
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
    
    if sp_kind == 282 or sp_kind == 726 or sp_kind == 728 or sp_kind == 729 or sp_kind == 712 or sp_kind == 736 or sp_kind == 745 or sp_kind == 270 then
        r1 = "W_AttackRightLight2"
    end
	
	if sp_kind == 604 then
		r2 = "W_AttackRightHeavy2Start"
    end

	if sp_kind == 603 then
		r1 = "W_SpecialAttackRightHeavy"
    end	
	
	if sp_kind == 732 then
        r1 = "W_AttackRightLight3"
		r2 = "W_AttackRightHeavy2Start"
    end		
	
    if sp_kind == 146 or sp_kind == 742 then
        r1 = "W_AttackRightLight1"
    end	

	if sp_kind == 744 then
        r1 = "W_AttackRightLight3"
    end	
    
    if AttackCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackLeft_Activate()
    SetInterruptType(INTERRUPT_FINDATTACK)
    SetAttackHand(HAND_LEFT)
    ActivateRightArmAdd(START_FRAME_A02)
    return 
end

function AttackLeft_Update()
    SetVariable("IndexDamageParryHand", 1)
    UpdateRightArmAdd()
    return 
end

function AttackLeft_Deactivate()
    SetVariable("IndexDamageParryHand", 0)
    return 
end

function AttackLeftLight1_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", l1, "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackLeftHeavy1_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", nil, "W_AttackLeftHeavy2", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackLeftHeavy2_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", nil, "W_AttackLeftHeavy3", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackLeftHeavy3_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", nil, "W_AttackLeftHeavy2", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackLeftHeavySp1_onUpdate()
    AttackLeftHeavy1_onUpdate()
    return 
end

function AttackLeftHeavySp2_onUpdate()
    AttackLeftHeavy2_onUpdate()
    return 
end

function AttackLeftHeavySp3_onUpdate()
    AttackLeftHeavy3_onUpdate()
    return 
end

function AttackBoth_Activate()
    SetInterruptType(INTERRUPT_FINDATTACK)
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        SetAttackHand(HAND_LEFT)
    else
        SetAttackHand(HAND_RIGHT)
    end
    return 
end

function AttackBothLight1_onUpdate()
    local b2 = "W_AttackBothHeavy1SubStart"
	local l1 = "W_AttackBothLeft2"
    local hand = HAND_RIGHT
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
	
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	
    if env("装備武器特殊カテゴリ番号取得", hand) == 232 or env("装備武器特殊カテゴリ番号取得", hand) == 272 then -- GetEquipWeaponSpecialCategoryNumber
        -- Friede's Great Scythe
        b2 = "W_AttackBothHeavy2Start"
    end

    if sp_kind == 600 or sp_kind == 146 then
        l1 = "W_AttackBothLeft3"
    end	
		
    if AttackCommonFunction("W_AttackRightLight2", "W_AttackRightHeavy1Start", l1, "W_AttackLeftHeavy1", "W_AttackBothLight2", b2, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothLight2_onUpdate()
    local b2 = "W_AttackBothHeavy1Start"
    local l1 = "W_AttackBothLeft3"	
    local hand = HAND_RIGHT
    local style = c_Style
    
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
    
    if sp_kind == 279 or sp_kind == 281 then
        b2 = "W_AttackBothHeavy1SubStart"
    end
	
    if sp_kind == 600 or sp_kind == 146 then
        l1 = "W_AttackBothLeft2"
    end	

    if AttackCommonFunction("W_AttackRightLight3", "W_AttackRightHeavy1Start", l1, "W_AttackLeftHeavy1", "W_AttackBothLight3", b2, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothLight3_onUpdate()
    local b1 = "W_AttackBothLight2"
	local l1 = "W_AttackBothLeft2"
    local hand = HAND_RIGHT
    local style = c_Style
    
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end

    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
    
    if sp_kind == 232 or sp_kind == 272 or sp_kind == 278 or sp_kind == 279 or sp_kind == 281 or sp_kind == 283 or sp_kind == 294 then 
        b1 = "W_AttackBothLight1"
    end
	
	if sp_kind == 604 then
		b1 = "W_AttackBothHeavySpecial1Start"
		l1 = "W_AttackBothHeavySpecial2Start"
	end

	if sp_kind == 600 or sp_kind == 146 then
		l1 = "W_AttackBothLeft3"
	end	
	
	if sp_kind == 731 or sp_kind == 734 or sp_kind == 735 or sp_kind == 737 or sp_kind == 146 or sp_kind == 600 or sp_kind == 742 or sp_kind == 743 or sp_kind == 745 or sp_kind == 747 or sp_kind == 270 or sp_kind == 750 then
		b1 = "W_AttackBothBackstep"
	end
    
    if env(1116, 100440) == TRUE then 
        act(2001, 0.699999988079071) -- SetMovementScaleMult
    end
    
    if AttackCommonFunction("W_AttackRightLight2", "W_AttackRightHeavy1Start", l1, "W_AttackLeftHeavy1", b1, "W_AttackBothHeavy1SubStart", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothLeft1_onUpdate()
	local b1 = "W_AttackBothLight2"
    local hand = HAND_RIGHT
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	if env("装備武器特殊カテゴリ番号取得", HAND_RIGHT) == 604 and env(1116, 100739) == TRUE then -- Frostfall L1 Transition for Frost Surge
		ExecEventHalfBlend(Event_AttackCrossbowBothRightEmpty, ALLBODY)
		return
	elseif env("装備武器特殊カテゴリ番号取得", HAND_LEFT) == 604 and env(1116, 100739) == TRUE then -- Frostfall L1 Transition for Frost Surge
		ExecEventHalfBlend(Event_AttackCrossbowBothLeftEmpty, ALLBODY)
		return
	end

	if sp_kind == 718 then
		b1 = "W_AttackBothLight3"
	end	
	
    if AttackCommonFunction("W_AttackRightLight2", "W_AttackRightHeavy1Start", "W_AttackBothLeft2", "W_AttackLeftHeavy1", b1, "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    elseif env(1116, 100710) == TRUE then
        ExecEventAllBody("W_AttackBothHeavySpecial1SubStart")
        return 	 
    else
        return 
    end
end

function AttackBothLeft2_onUpdate()
	local b1 = "W_AttackBothLight3"
	local l1 = "W_AttackBothLeft3"
   	local hand = HAND_RIGHT
   	local style = c_Style
   	if style == HAND_LEFT_BOTH then
      	hand = HAND_LEFT
    end
	local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	if sp_kind == 600 or sp_kind == 146 then
		b1 = "W_AttackBothLight2"
	end
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", l1, "W_AttackLeftHeavy1", b1, "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothLeft3_onUpdate()
	local b1 = "W_AttackBothLight2"
	local l1 = "W_AttackBothLeft2"
   	local hand = HAND_RIGHT
   	local style = c_Style
   	if style == HAND_LEFT_BOTH then
      	hand = HAND_LEFT
    end
	local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	if sp_kind == 294 then
		l1 = "W_AttackBothLeft1"
	end
	if sp_kind == 604 then
		b1 = "W_AttackBothHeavySpecial1Start"
		l1 = "W_AttackBothHeavySpecial2Start"
	end
	if sp_kind == 600 then
		b1 = "W_AttackBothLight1"
	end	
	if sp_kind == 146 then
		b1 = "W_AttackBothLight3"
	end		
    if AttackCommonFunction("W_AttackRightLight2", "W_AttackRightHeavy1Start", l1, "W_AttackLeftHeavy1", b1, "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothLeftDash_onUpdate()
    local r1 = "W_AttackRightLight1"
    local l1 = "W_AttackBothLeft1"
    local b1 = "W_AttackBothLight1"
	local b2 = "W_AttackBothHeavy1Start"
    local hand = HAND_RIGHT
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
	local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
    if sp_kind == 161 then
        r1 = "W_AttackRightLight2"
        l1 = "W_AttackBothLeft2"
        b1 = "W_AttackBothLight2"
    end
	if sp_kind == 294 then
		l1 = "W_AttackBothLeft3"
		b1 = "W_AttackBothLight3"
		b2 = "W_AttackBothHeavy2Start"
	end
	if sp_kind == 604 then
		b2 = "W_AttackBothHeavy2Start"
	end
	if sp_kind == 600 then
		b1 = "W_AttackBothLight2"
	end	
	if sp_kind == 718 or sp_kind == 140 then
		l1 = "W_AttackBothLeft2"
	end		
    if AttackCommonFunction(r1, "W_AttackRightHeavy1Start", l1, "W_AttackLeftHeavy1", b1, b2, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothLeftStep_onUpdate()
	local l1 = "W_AttackBothLeft1"
	local b1 = "W_AttackBothLight1"
	local b2 = "W_AttackBothHeavy1Start"
   	local hand = HAND_RIGHT
   	local style = c_Style
   	if style == HAND_LEFT_BOTH then
      	hand = HAND_LEFT
    end
	local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	if sp_kind == 294 then
		l1 = "W_AttackBothLeft3"
		b1 = "W_AttackBothLight3"
		b2 = "W_AttackBothHeavy2Start"
	end
	if sp_kind == 604 then
		b2 = "W_AttackBothHeavy2Start"
	end
	if sp_kind == 146 then
		l1 = "W_AttackBothLeft2"
	end	
	if sp_kind == 718 then
		b1 = "W_AttackBothLight3"
		l1 = "W_AttackBothLeft2"
	end	
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", l1, "W_AttackLeftHeavy1", b1, b2, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothHeavy1SubStart_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackBothLeft1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy2Start", FALSE, TRUE) == TRUE then
        return 
    elseif env(301, 0) == TRUE or env("アニメ終了か", 1) == TRUE then
        act("特殊補間設定", 0, TRUE)
        ExecEventAllBody("W_AttackBothHeavy1Start")
        return 
    else
        return 
    end
end

function AttackBothHeavy1Start_onUpdate()
    act("特殊補間設定", 0, FALSE)
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackBothLeft1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy2Start", FALSE, TRUE) == TRUE then
        return 
    elseif env(1108, ACTION_ARM_R2) <= 0 and env(1116, 100280) == TRUE then
        ExecEventAllBody("W_AttackBothHeavy1End")
        return 
    elseif env(1116, 100720) == TRUE then
        ExecEventAllBody("W_AttackBothHeavySpecial1Start")
        return
    elseif env(1116, 100721) == TRUE then
        ExecEventAllBody("W_AttackBothHeavySpecial1End")
        return
    elseif env(1116, 100723) == TRUE then
        ExecEventAllBody("W_AttackBothDashSpecial")
        return
    else
        return 
    end
end

function AttackBothHeavy1End_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackBothLeft1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy2Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothHeavy2Start_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackBothLeft1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    elseif env(1108, ACTION_ARM_R2) <= 0 and env(1116, 100280) == TRUE then
        ExecEventAllBody("W_AttackBothHeavy2End")
        return
    elseif env(1116, 100720) == TRUE then
        ExecEventAllBody("W_AttackBothHeavySpecial2Start")
        return
    elseif env(1116, 100723) == TRUE then
        ExecEventAllBody("W_AttackBothHeavyKickSpecial")
        return
    else
        return 
    end
end

function AttackBothHeavy2End_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackBothLeft1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothHeavySpecial1SubStart_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackBothLeft1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy2Start", FALSE, TRUE) == TRUE then
        return 
    elseif env(301, 0) == TRUE or env("アニメ終了か", 1) == TRUE then
        act("特殊補間設定", 0, TRUE)
        ExecEventAllBody("W_AttackBothHeavySpecial1Start")
        return 
    elseif env(1108, ACTION_ARM_L1) <= 0 and env(1116, 100711) == TRUE then -- ActionDuration 
        ExecEventAllBody("W_AttackBothHeavySpecial2End")
        return 		
    elseif env(1116, 100712) == TRUE then
        ExecEventAllBody("W_AttackBothHeavySpecial2Start")
        return 		
    elseif env(1108, ACTION_ARM_R2) <= 0 and env(1116, 100713) == TRUE then -- ActionDuration 
        ExecEventAllBody("W_AttackBothHeavy1EndAlt")
        return 		
    elseif env(1116, 100714) == TRUE then
        ExecEventAllBody("W_AttackBothDashSpecial")
    end
end

function AttackBothHeavySpecial1Start_onUpdate()
    local b1 = "W_AttackBothLight1"
	local l1 = "W_AttackBothLeft1"
	
    local hand = HAND_RIGHT
    local style = c_Style
    
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	
	if sp_kind == 604 then
		b1 = "W_AttackBothHeavySpecial1End"
		l1 = "W_AttackBothHeavySpecial2End"
	end
	if sp_kind == 177 then
        act(2001, 1.5)
    end		
    act("特殊補間設定", 0, FALSE)
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", l1, "W_AttackLeftHeavy1", b1, "W_AttackBothHeavy2Start", FALSE, TRUE) == TRUE then
        return 
    elseif env(1108, ACTION_ARM_R2) <= 0 and env(1116, 100280) == TRUE then
        ExecEventAllBody("W_AttackBothHeavySpecial1End")
        return 
    elseif env(1116, 100723) == TRUE then
        ExecEventAllBody("W_AttackBothDashSpecial")
        return
    else
        return 
    end
end

function AttackBothHeavySpecial1End_onUpdate()
	local b1 = "W_AttackBothLight1"
	local l1 = "W_AttackBothLeft1"
	local b2 = "W_AttackBothHeavy2Start"
	
	local hand = HAND_RIGHT
	local style = c_Style
    
	if style == HAND_LEFT_BOTH then
		hand = HAND_LEFT
	end

	local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	
	if sp_kind == 604 then
		b1 = "W_AttackBothLight3"
		l1 = "W_AttackBothLeft3"
		b2 = "W_AttackBothHeavy1Start"
	end

    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", l1, "W_AttackLeftHeavy1", b1, b2, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothHeavySpecial2Start_onUpdate()
	local b1 = "W_AttackBothLight1"
	local l1 = "W_AttackBothLeft1"
	local b2 = "W_AttackBothHeavy1Start"
	
    local hand = HAND_RIGHT
    local style = c_Style
    
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end

    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	
	if sp_kind == 604 then
		b1 = "W_AttackBothHeavySpecial1End"
		l1 = "W_AttackBothHeavySpecial2End"
		b2 = "W_AttackBothHeavy2Start"
	end
	
	if sp_kind == 750 then
		b1 = "W_AttackBothLight2"
	end	
	
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", l1, "W_AttackLeftHeavy1", b1, b2, FALSE, TRUE) == TRUE then
        return 
    elseif env(1108, ACTION_ARM_R2) <= 0 and env(1116, 100280) == TRUE then
        ExecEventAllBody("W_AttackBothHeavySpecial2End")
        return 
    elseif env(1116, 100723) == TRUE then
        ExecEventAllBody("W_AttackBothHeavyKickSpecial")
        return
    else
        return 
    end
end

function AttackBothHeavySpecial2End_onUpdate()
	local b1 = "W_AttackBothLight1"
	local l1 = "W_AttackBothLeft1"
	local b2 = "W_AttackBothHeavy1Start"
	
    local hand = HAND_RIGHT
    local style = c_Style
    
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end

    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	
	if sp_kind == 604 then
		b1 = "W_AttackBothLight3"
		l1 = "W_AttackBothLeft3"
		b2 = "W_AttackBothHeavy2Start"
	end
	
	if sp_kind == 750 then
		b1 = "W_AttackBothLight2"
	end	
		
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", l1, "W_AttackLeftHeavy1", b1, b2, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothHeavyWepBroken1Start_onUpdate()
    AttackBothHeavy1Start_onUpdate()
    return 
end

function AttackBothHeavyWepBroken2Start_onUpdate()
    AttackBothHeavy2Start_onUpdate()
    return 
end

function AttackBothHeavyWepBroken1SubStart_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackBothLeft1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy2Start", FALSE, TRUE) == TRUE then
        return 
    elseif env(301, 0) == TRUE or env("アニメ終了か", 1) == TRUE then
        act("特殊補間設定", 0, TRUE)
        ExecEventAllBody("W_AttackBothHeavyWepBroken1Start")
        return 
    else
        return 
    end
end

function AttackBothDash_onUpdate()
	local l1 = "W_AttackBothLeft1"
	local b1 = "W_AttackBothLight1"
	local b2 = "W_AttackBothHeavy1Start"
   	local hand = HAND_RIGHT
   	local style = c_Style
	
   	if style == HAND_LEFT_BOTH then
      	hand = HAND_LEFT
    end
	
	local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	
	if sp_kind == 272 then
		b2 = "W_AttackBothHeavy2Start"
	end
	
	if sp_kind == 294 then
		l1 = "W_AttackBothLeft3"
		b1 = "W_AttackBothLight3"
		b2 = "W_AttackBothHeavy2Start"
	end
	
	if sp_kind == 604 then
		l1 = "W_AttackBothLeft2"
		b1 = "W_AttackBothLight2"
	end
	
	if sp_kind == 733 or sp_kind == 721 or sp_kind == 603 or sp_kind == 146 or sp_kind == 600 or sp_kind == 718 or sp_kind == 724 or sp_kind == 727 or sp_kind == 713 or sp_kind == 742 or sp_kind == 750 then
		b1 = "W_AttackBothLight2"
	end	

	if sp_kind == 731 or sp_kind == 706 then
		b1 = "W_AttackBothLight3"
	end		
	
	if sp_kind == 743 or sp_kind == 750 then
		b1 = "W_AttackBothBackstep"
	end			

    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", l1, "W_AttackLeftHeavy1", b1, b2, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothDashSpecial_onUpdate()
	local b2 = "W_AttackBothHeavy1Start"
    local hand = HAND_RIGHT
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
    
    if sp_kind == 600 or sp_kind == 743 or sp_kind == 745 or sp_kind == 747 or sp_kind == 270 then
        b2 = "W_AttackBothHeavy2Start"
    end	
	
    if sp_kind == 750 or sp_kind == 751 then
        b2 = "W_AttackBothHeavy2StartAlt"
    end	
	
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackBothLeft1", "W_AttackLeftHeavy1", "W_AttackBothLight1", b2, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothLightStep_onUpdate()
	local l1 = "W_AttackBothLeft1"
	local b1 = "W_AttackBothLight1"
	local b2 = "W_AttackBothHeavy1Start"
   	local hand = HAND_RIGHT
   	local style = c_Style
	
   	if style == HAND_LEFT_BOTH then
      	hand = HAND_LEFT
    end
	
	local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	
	if sp_kind == 272 then
		b2 = "W_AttackBothHeavy2Start"
	end
	
	if sp_kind == 294 then
		l1 = "W_AttackBothLeft3"
		b1 = "W_AttackBothLight3"
		b2 = "W_AttackBothHeavy2Start"
	end
	
	if sp_kind == 604 then
		l1 = "W_AttackBothLeft2"
		b1 = "W_AttackBothLight2"
	end
	
	if sp_kind == 712 or sp_kind == 733 or sp_kind == 721 or sp_kind == 717 or sp_kind == 713 or sp_kind == 743 or sp_kind == 746 or sp_kind == 750 then
		b1 = "W_AttackBothLight2"
	end	

	if sp_kind == 146 or sp_kind == 745 or sp_kind == 747 then
		b1 = "W_AttackBothLight3"
	end		
	
	if sp_kind == 742 then
		b1 = "W_AttackBothBackstep"
	end			

    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", l1, "W_AttackLeftHeavy1", b1, b2, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothLightStepSpecial_onUpdate()
	local b1 = "W_AttackBothLight1"
    local hand = HAND_RIGHT
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
    
    if sp_kind == 600 then
        b1 = "W_AttackBothLight2"
    end	
	
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackBothLeft1", "W_AttackLeftHeavy1", b1, "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothLightKick_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackBothLeft1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothHeavyKick_onUpdate()
	local l1 = "W_AttackBothLeft1"
	local b1 = "W_AttackBothLight1"
   	local hand = HAND_RIGHT
   	local style = c_Style
	
   	if style == HAND_LEFT_BOTH then
      	hand = HAND_LEFT
    end
	
	local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	
	if sp_kind == 294 or sp_kind == 604 then
		l1 = "W_AttackBothLeft2"
		b1 = "W_AttackBothLight2"
	end
	
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", l1, "W_AttackLeftHeavy1", b1, "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothHeavyKickSpecial_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackBothLeft1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothBackstep_onUpdate()
	local b1 = "W_AttackBothLight1"
   	local hand = HAND_RIGHT
   	local style = c_Style
	
   	if style == HAND_LEFT_BOTH then
      	hand = HAND_LEFT
    end
	
	local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	
	if sp_kind == 737 or sp_kind == 747 then
		b1 = "W_SpecialAttackRightHeavy"
	end		

	if sp_kind == 600 then
		b1 = "W_AttackBothLightStepSpecial"
	end	
	
	if sp_kind == 742 or sp_kind == 743 or sp_kind == 745 or sp_kind == 750 then
		b1 = "W_AttackBothLight2"
	end	
	
	if sp_kind == 146 then
		b1 = "W_AttackBothLight1"
	end		
	
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackBothLeft1", "W_AttackLeftHeavy1", b1, "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackArrowRight_Activate()
    SetInterruptType(INTERRUPT_FINDATTACK)
    if c_Style == HAND_LEFT_BOTH then
        SetAttackHand(HAND_LEFT)
    else
        SetAttackHand(HAND_RIGHT)
    end
    return 
end

function AttackArrowRightStart_Upper_onUpdate()
    act("精密射撃可能か")
    local blend_type, lower_state = GetHalfBlendInfo()
    if ArrowCommonFunction(blend_type, FALSE, FALSE) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        if env("弓矢スロット取得", 0) == 0 then
            if 0 < env(1108, ACTION_ARM_R1) then
                ExecEventHalfBlend(Event_AttackArrowRightLoop, blend_type)
                return 
            else
                ExecEventAllBody("W_AttackArrowRightFire")
                return 
            end
        elseif 0 < env(1108, ACTION_ARM_R2) then
            ExecEventHalfBlend(Event_AttackArrowRightLoop, blend_type)
            return 
        else
            ExecEventAllBody("W_AttackArrowRightFire")
            return 
        end
    elseif ArrowLowerCommonFunction(Event_AttackArrowRightStartMirror, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function AttackArrowRightLoop_Upper_onUpdate()
    act("精密射撃可能か")
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 90, 90)
    end
    if ArrowCommonFunction(blend_type, FALSE, FALSE) == TRUE then
        return 
    elseif env("弓矢スロット取得", 0) == 0 then
        if env(1108, ACTION_ARM_R1) <= 0 then
            ExecEventAllBody("W_AttackArrowRightFire")
            return 
        end
    elseif env(1108, ACTION_ARM_R2) <= 0 then
        ExecEventAllBody("W_AttackArrowRightFire")
        return 
    end
    if ArrowLowerCommonFunction(Event_AttackArrowRightLoop, lower_state, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackArrowRightFire_onUpdate()
    act("精密射撃可能か")
    if ArrowCommonFunction(ALLBODY, TRUE, FALSE) == TRUE then
        return 
    elseif env(1001) <= 0 then
        return 
    else
        local request = GetAttackRequest(FALSE)
        if request == ATTACK_REQUEST_ARROW_FIRE_RIGHT or request == ATTACK_REQUEST_ARROW_FIRE_RIGHT2 then
            if env(225, HAND_RIGHT) ~= WEAPON_CATEGORY_LARGE_ARROW then
                if IsExistArrow() == TRUE then
                    ExecEventAllBody("W_NoArrow")
                    return 
                else
                    ExecEventHalfBlend(Event_AttackArrowRightStart, ALLBODY)
                    return 
                end
            elseif IsExistArrow() == TRUE then
                ExecEventAllBody("W_NoArrow")
                return 
            else
                ExecEventHalfBlend(Event_AttackArrowRightStart, ALLBODY)
                return 
            end
        elseif MoveStartonCancelTiming(Event_Move, FALSE) == TRUE then
            return 
        else
            return 
        end
    end
end

function AttackArrowRightFireDash_onUpdate()
    act("精密射撃可能か")
    if ArrowCommonFunction(ALLBODY, TRUE, TRUE) == TRUE then
        return 
    elseif MoveStartonCancelTiming(Event_Move, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function AttackArrowRightFireStep_onUpdate()
    act("精密射撃可能か")
    if ArrowCommonFunction(ALLBODY, TRUE, TRUE) == TRUE then
        return 
    elseif MoveStartonCancelTiming(Event_Move, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function NoArrow_onUpdate()
    if ArrowCommonFunction(ALLBODY, TRUE, TRUE) == TRUE then
        return 
    elseif MoveStartonCancelTiming(Event_Move, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function AttackCrossbowRight_Activate()
    SetAttackHand(HAND_RIGHT)
    return 
end

function AttackCrossbowLeft_Activate()
    SetAttackHand(HAND_LEFT)
    ActivateRightArmAdd(START_FRAME_A02)
    return 
end

function AttackCrossbowLeft_Update()
    UpdateRightArmAdd()
    return 
end

function AttackCrossbowFire_Activate()
    SetInterruptType(INTERRUPT_FINDATTACK)
    return 
end

function AttackCrossbowRightStart_Upper_onUpdate()
	if env(1116, 100730) == TRUE then
		ExecEventHalfBlend(Event_AttackCrossbowBothRightStart, UPPER)
	end
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 90, 90)
    end
    if CrossbowCommonFunction(blend_type) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        if env("弓矢スロット取得", 1) == 0 then
            if 0 < env(1108, ACTION_ARM_R1) then
                ExecEventHalfBlend(Event_AttackCrossbowRightLoop, blend_type)
                return 
            else
                ExecEventHalfBlend(Event_AttackCrossbowRightFire, blend_type)
                return 
            end
        elseif 0 < env(1108, ACTION_ARM_R2) then
            ExecEventHalfBlend(Event_AttackCrossbowRightLoop, blend_type)
            return 
        else
            ExecEventHalfBlend(Event_AttackCrossbowRightFire, blend_type)
            return 
        end
    elseif HalfBlendLowerCommonFunction(Event_AttackCrossbowRightLoop, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function AttackCrossbowRightLoop_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 90, 90)
    end
    if CrossbowCommonFunction(blend_type) == TRUE then
        return 
    elseif env("弓矢スロット取得", 1) == 0 then
        if env(1108, ACTION_ARM_R1) <= 0 then
            ExecEventHalfBlend(Event_AttackCrossbowRightFire, blend_type)
            return 
        end
    elseif env(1108, ACTION_ARM_R2) <= 0 then
        ExecEventHalfBlend(Event_AttackCrossbowRightFire, blend_type)
        return 
    end
    if HalfBlendLowerCommonFunction(Event_AttackCrossbowRightLoop, lower_state, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackCrossbowRightFire_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if CrossbowCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_AttackCrossbowRightFire, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function AttackCrossbowRightReload_Upper_onUpdate()
	if env(1116, 100730) == TRUE then
		ExecEventHalfBlend(Event_AttackCrossbowBothRightStart, UPPER)
		return FALSE
	end
    act("4方向移動閾値設定", 60, 80, 60, 60)
    local blend_type, lower_state = GetHalfBlendInfo()
    if CrossbowCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_AttackCrossbowRightReload, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function AttackCrossbowRightEmpty_Upper_onUpdate()
	if env(1116, 100730) == TRUE then
		ExecEventHalfBlend(Event_AttackCrossbowBothRightStart, UPPER)
	end
    local blend_type, lower_state = GetHalfBlendInfo()
    if CrossbowCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_AttackCrossbowRightEmpty, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function AttackCrossbowLeftStart_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 90, 90)
    end
    if CrossbowCommonFunction(blend_type) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        if env("弓矢スロット取得", 1) == 0 then
            if 0 < env(1108, ACTION_ARM_L1) then
                ExecEventHalfBlend(Event_AttackCrossbowLeftLoop, blend_type)
                return 
            else
                ExecEventHalfBlend(Event_AttackCrossbowLeftFire, blend_type)
                return 
            end
        elseif 0 < env(1108, ACTION_ARM_L2) then
            ExecEventHalfBlend(Event_AttackCrossbowLeftLoop, blend_type)
            return 
        else
            ExecEventHalfBlend(Event_AttackCrossbowLeftFire, blend_type)
            return 
        end
    elseif HalfBlendLowerCommonFunction(Event_AttackCrossbowLeftLoop, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function AttackCrossbowLeftLoop_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 90, 90)
    end
    if CrossbowCommonFunction(blend_type) == TRUE then
        return 
    elseif env("弓矢スロット取得", 1) == 0 then
        if env(1108, ACTION_ARM_L1) <= 0 then
            ExecEventHalfBlend(Event_AttackCrossbowLeftFire, blend_type)
            return 
        end
    elseif env(1108, ACTION_ARM_L2) <= 0 then
        ExecEventHalfBlend(Event_AttackCrossbowLeftFire, blend_type)
        return 
    end
    if HalfBlendLowerCommonFunction(Event_AttackCrossbowLeftLoop, lower_state, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackCrossbowLeftFire_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if CrossbowCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_AttackCrossbowLeftFire, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function AttackCrossbowLeftReload_Upper_onUpdate()
    act("精密射撃可能か")
    act("4方向移動閾値設定", 60, 45, 60, 60)
    local blend_type, lower_state = GetHalfBlendInfo()
    if CrossbowCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_AttackCrossbowLeftReload, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function AttackCrossbowLeftEmpty_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if CrossbowCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_AttackCrossbowLeftEmpty, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function AttackCrossbowBothLeftStart_Upper_onUpdate()
    act("精密射撃可能か")
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 90, 90)
    end
    if CrossbowCommonFunction(blend_type) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        if env("弓矢スロット取得", 1) == 0 then
            if 0 < env(1108, ACTION_ARM_R1) then
                ExecEventHalfBlend(Event_AttackCrossbowBothLeftLoop, blend_type)
                return 
            else
                ExecEventHalfBlend(Event_AttackCrossbowBothLeftFire, blend_type)
                return 
            end
        elseif 0 < env(1108, ACTION_ARM_R2) then
            ExecEventHalfBlend(Event_AttackCrossbowBothLeftLoop, blend_type)
            return 
        else
            ExecEventHalfBlend(Event_AttackCrossbowBothLeftFire, blend_type)
            return 
        end
    elseif HalfBlendLowerCommonFunction(Event_AttackCrossbowBothLeftLoop, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function AttackCrossbowBothLeftLoop_Upper_onUpdate()
    act("精密射撃可能か")
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 90, 90)
    end
    if CrossbowCommonFunction(blend_type) == TRUE then
        return 
    elseif env("弓矢スロット取得", 1) == 0 then
        if env(1108, ACTION_ARM_R1) <= 0 then
            ExecEventHalfBlend(Event_AttackCrossbowBothLeftFire, blend_type)
            return 
        end
    elseif env(1108, ACTION_ARM_R2) <= 0 then
        ExecEventHalfBlend(Event_AttackCrossbowBothLeftFire, blend_type)
        return 
    end
    if HalfBlendLowerCommonFunction(Event_AttackCrossbowBothLeftLoop, lower_state, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackCrossbowBothLeftFire_Upper_onUpdate()
    act("精密射撃可能か")
    local blend_type, lower_state = GetHalfBlendInfo()
    if CrossbowCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_AttackCrossbowBothLeftFire, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function AttackCrossbowBothLeftReload_Upper_onUpdate()
    act("精密射撃可能か")
    act("4方向移動閾値設定", 60, 80, 60, 60)
    local blend_type, lower_state = GetHalfBlendInfo()
    if CrossbowCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_AttackCrossbowBothLeftReload, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function AttackCrossbowBothLeftEmpty_Upper_onUpdate()
    if env("装備武器特殊カテゴリ番号取得", HAND_LEFT) == 604 then -- Frostfall Frost Surge return to idle
		if (env(1108, ACTION_ARM_L1) <= 0 or env(1001) <= 0) and env(1116, 100740) == TRUE then -- Not holding L1 or stamina depleted
			ExecEventAllBody("W_Idle")
		end
	end
    local blend_type, lower_state = GetHalfBlendInfo()
    if CrossbowCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_AttackCrossbowBothLeftEmpty, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function AttackCrossbowBothRightStart_Upper_onUpdate()
	if env("装備武器特殊カテゴリ番号取得", HAND_RIGHT) == 604 and env(1116, 100731) == TRUE then
		ExecEventAllBody("W_Idle")
		return FALSE
	end
    act("精密射撃可能か")
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 90, 90)
    end
    if CrossbowCommonFunction(blend_type) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        if env("弓矢スロット取得", 1) == 0 then
            if 0 < env(1108, ACTION_ARM_R1) then
                ExecEventHalfBlend(Event_AttackCrossbowBothRightLoop, blend_type)
                return 
            else
                ExecEventHalfBlend(Event_AttackCrossbowBothRightFire, blend_type)
                return 
            end
        elseif 0 < env(1108, ACTION_ARM_R2) then
            ExecEventHalfBlend(Event_AttackCrossbowBothRightLoop, blend_type)
            return 
        else
            ExecEventHalfBlend(Event_AttackCrossbowBothRightFire, blend_type)
            return 
        end
    elseif HalfBlendLowerCommonFunction(Event_AttackCrossbowBothRightLoop, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function AttackCrossbowBothRightLoop_Upper_onUpdate()
    act("精密射撃可能か")
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 90, 90)
    end
    if CrossbowCommonFunction(blend_type) == TRUE then
        return 
    elseif env("弓矢スロット取得", 1) == 0 then
        if env(1108, ACTION_ARM_R1) <= 0 then
            ExecEventHalfBlend(Event_AttackCrossbowBothRightFire, blend_type)
            return 
        end
    elseif env(1108, ACTION_ARM_R2) <= 0 then
        ExecEventHalfBlend(Event_AttackCrossbowBothRightFire, blend_type)
        return 
    end
    if HalfBlendLowerCommonFunction(Event_AttackCrossbowBothRightLoop, lower_state, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackCrossbowBothRightFire_Upper_onUpdate()
    act("精密射撃可能か")
    local blend_type, lower_state = GetHalfBlendInfo()
    if CrossbowCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_AttackCrossbowBothRightFire, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function AttackCrossbowBothRightReload_Upper_onUpdate()
    act("精密射撃可能か")
    act("4方向移動閾値設定", 60, 80, 60, 60)
    local blend_type, lower_state = GetHalfBlendInfo()
    if CrossbowCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_AttackCrossbowBothRightReload, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function AttackCrossbowBothRightEmpty_Upper_onUpdate()
    if env("装備武器特殊カテゴリ番号取得", HAND_RIGHT) == 604 then -- Frostfall Frost Surge return to idle
		if (env(1108, ACTION_ARM_L1) <= 0 or env(1001) <= 0) and env(1116, 100740) == TRUE then -- Not holding L1 or stamina depleted
			ExecEventAllBody("W_Idle")
		end
	end
    local blend_type, lower_state = GetHalfBlendInfo()
    if CrossbowCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_AttackCrossbowBothRightEmpty, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function SwordArtsRight_Activate()
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        SetAttackHand(HAND_LEFT)
    else
        SetAttackHand(HAND_RIGHT)
    end
    return 
end

function StepInRight_Activate()
    SetInterruptType(INTERRUPT_FINDATTACK)
    return 
end

function StepInRightStart_Upper_onUpdate()
    if SwordArtsCommonFunction("W_AttackRightLight2", "W_StepInRightUppercut", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight2", "W_StepInRightUppercut", FALSE, FALSE, TRUE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function StepInRightUppercut_onUpdate()
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE, TRUE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function StepInRightSlash_onUpdate()
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE, FALSE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function SpinRightStart_onUpdate()
    if SwordArtsCommonFunction("W_AttackRightLightStep", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLightStep", "W_AttackBothHeavy1Start", FALSE, FALSE, FALSE, GEN_TRANS_LEFT) == TRUE then
        return 
    else
        return 
    end
end

function SpinRightSelftrans_onUpdate()
    if SwordArtsCommonFunction("W_AttackRightLightStep", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLightStep", "W_AttackBothHeavy1Start", FALSE, FALSE, FALSE, GEN_TRANS_LEFT) == TRUE then
        return 
    else
        return 
    end
end

function DrawStanceRight_Activate()
    SetInterruptType(INTERRUPT_FINDATTACK)
    return 
end

function DrawStanceRightNoSync_Activate()
    SetInterruptType(INTERRUPT_FINDATTACK)
    return 
end

function DrawStanceRightStart_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    local r1 = "W_DrawStanceRightAttackLight"
    local r2 = "W_DrawStanceRightAttackHeavy"
    local b1 = "W_DrawStanceRightAttackLight"
    local b2 = "W_DrawStanceRightAttackHeavy"
    if env(1116, 100530) == TRUE then
        r1 = "W_DrawStanceRightAttackLightR90"
        r2 = "W_DrawStanceRightAttackHeavyR90"
        b1 = "W_DrawStanceRightAttackLightR90"
        b2 = "W_DrawStanceRightAttackHeavyR90"
    elseif env(1116, 100540) == TRUE then
        r1 = "W_DrawStanceRightAttackLight180"
        r2 = "W_DrawStanceRightAttackHeavy180"
        b1 = "W_DrawStanceRightAttackLight180"
        b2 = "W_DrawStanceRightAttackHeavy180"
    elseif env(1116, 100550) == TRUE then
        r1 = "W_DrawStanceRightAttackLightL90"
        r2 = "W_DrawStanceRightAttackHeavyL90"
        b1 = "W_DrawStanceRightAttackLightL90"
        b2 = "W_DrawStanceRightAttackHeavyL90"
    end
    if SwordArtsStanceCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, blend_type, TRUE, TRUE, FALSE) == TRUE then
        return 
    elseif env(1116, 100330) == TRUE and (env(1108, ACTION_ARM_L2) < 200 or env(1107, ACTION_ARM_L2) == TRUE) then
        ExecEventHalfBlend(Event_DrawStanceRightEnd, blend_type)
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        if env("装備武器特殊カテゴリ番号取得", c_SwordArtsHand) == 248 then
            g_LoopStanceCycles = 0
            ExecEventHalfBlendNoReset(Event_DrawStanceRightLoopNoSync, blend_type)
            if GetVariable("LocomotionState") == 1 then
                ExecEvent("W_MoveNoSync")
            end
        else
            ExecEventHalfBlendNoReset(Event_DrawStanceRightLoop, blend_type)
            if GetVariable("LocomotionState") == 1 then
                ExecEvent("W_Move")
            end
        end
        return 
    elseif HalfBlendLowerCommonFunction(Event_DrawStanceRightStart, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function DrawStanceRightComboStartRight_onUpdate()
    if SwordArtsCommonFunction("W_DrawStanceRightAttackLight2", "W_DrawStanceRightAttackHeavy", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_DrawStanceRightAttackLight2", "W_DrawStanceRightAttackHeavy", FALSE, TRUE, TRUE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function DrawStanceRightComboStartLeft_onUpdate()
    if SwordArtsCommonFunction("W_DrawStanceRightAttackLight3", "W_DrawStanceRightAttackHeavy", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_DrawStanceRightAttackLight.", "W_DrawStanceRightAttackHeavy", FALSE, TRUE, TRUE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function DrawStanceStartDash_onUpdate()
    if SwordArtsCommonFunction("W_DrawStanceRightAttackLight2", "W_DrawStanceRightAttackHeavy", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_DrawStanceRightAttackLight2", "W_DrawStanceRightAttackHeavy", FALSE, TRUE, TRUE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function DrawStanceStartRolling_onUpdate()
    if SwordArtsCommonFunction("W_DrawStanceRightAttackLight3", "W_DrawStanceRightAttackHeavy", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_DrawStanceRightAttackLight3", "W_DrawStanceRightAttackHeavy", FALSE, TRUE, TRUE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function DrawStanceRightLoop_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 90, 90)
    end
    local r1 = "W_DrawStanceRightAttackLight"
    local r2 = "W_DrawStanceRightAttackHeavy"
    local b1 = "W_DrawStanceRightAttackLight"
    local b2 = "W_DrawStanceRightAttackHeavy"
    if env(1116, 100530) == TRUE then
        r1 = "W_DrawStanceRightAttackLightR90"
        r2 = "W_DrawStanceRightAttackHeavyR90"
        b1 = "W_DrawStanceRightAttackLightR90"
        b2 = "W_DrawStanceRightAttackHeavyR90"
    elseif env(1116, 100540) == TRUE then
        r1 = "W_DrawStanceRightAttackLight180"
        r2 = "W_DrawStanceRightAttackHeavy180"
        b1 = "W_DrawStanceRightAttackLight180"
        b2 = "W_DrawStanceRightAttackHeavy180"
    elseif env(1116, 100550) == TRUE then
        r1 = "W_DrawStanceRightAttackLightL90"
        r2 = "W_DrawStanceRightAttackHeavyL90"
        b1 = "W_DrawStanceRightAttackLightL90"
        b2 = "W_DrawStanceRightAttackHeavyL90"
    elseif env(1116, 100744) == TRUE and 25 > env(2016) then -- Endless Winter Stance Low FP Switch
        r1 = "W_DrawStanceRightAttackLight2"
        r2 = "W_DrawStanceRightAttackLight2"
        b1 = "W_DrawStanceRightAttackLight2"
        b2 = "W_DrawStanceRightAttackLight2"
    end
    if SwordArtsStanceCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, blend_type, TRUE, TRUE, FALSE) == TRUE then
        return 
    elseif env(1108, ACTION_ARM_L2) <= 0 or env(1107, ACTION_ARM_L2) == TRUE then
        ExecEventHalfBlend(Event_DrawStanceRightEnd, blend_type)
        return 
    else
        local sp_kind = env("装備武器特殊カテゴリ番号取得", c_SwordArtsHand)
        if sp_kind == 248 and env(1001) <= 0 then
            ExecEventHalfBlend(Event_DrawStanceRightEnd, blend_type)
            return 
		elseif sp_kind == 604 and env(1116, 100741) == TRUE then -- Endless Winter Loop Repeats
			ExecEventHalfBlendNoReset(Event_DrawStanceRightLoop, blend_type)
			return 
		elseif sp_kind == 604 and 0 < env(1108, ACTION_ARM_L1) then -- Endless Winter Stance to L1
			local hand = HAND_RIGHT
			local style = c_Style
			if style == HAND_LEFT_BOTH then
				hand = HAND_LEFT
			end
			if 25 > env(2016) or env(311, hand) == 0 or env(262, hand) == TRUE then -- Lacks FP, Weapon Broken, or IsAbilityInsufficient
				ExecEventAllBody("W_DrawStanceRightAttackLight2")
				return
			else
				ExecEventAllBody("W_DrawStanceRightAttackLight3")
				return
			end
			return
        elseif HalfBlendLowerCommonFunction(Event_DrawStanceRightLoop, lower_state, FALSE, TRUE) == TRUE then
            return 
        else
            return 
        end
    end
end

function DrawStanceRightLoopNoSync_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 90, 90)
    end
    local r1 = "W_DrawStanceRightAttackLight"
    local r2 = "W_DrawStanceRightAttackHeavy"
    local b1 = "W_DrawStanceRightAttackLight"
    local b2 = "W_DrawStanceRightAttackHeavy"
    if env(1116, 100530) == TRUE then
        r1 = "W_DrawStanceRightAttackLightR90"
        r2 = "W_DrawStanceRightAttackHeavyR90"
        b1 = "W_DrawStanceRightAttackLightR90"
        b2 = "W_DrawStanceRightAttackHeavyR90"
    elseif env(1116, 100540) == TRUE then
        r1 = "W_DrawStanceRightAttackLight180"
        r2 = "W_DrawStanceRightAttackHeavy180"
        b1 = "W_DrawStanceRightAttackLight180"
        b2 = "W_DrawStanceRightAttackHeavy180"
    elseif env(1116, 100550) == TRUE then
        r1 = "W_DrawStanceRightAttackLightL90"
        r2 = "W_DrawStanceRightAttackHeavyL90"
        b1 = "W_DrawStanceRightAttackLightL90"
        b2 = "W_DrawStanceRightAttackHeavyL90"
    end
    if SwordArtsStanceCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, blend_type, TRUE, TRUE, FALSE) == TRUE then
        return 
    elseif env(1108, ACTION_ARM_L2) <= 0 or env(1107, ACTION_ARM_L2) == TRUE then
        ExecEventHalfBlend(Event_DrawStanceRightEnd, blend_type)
        return 
    end
    local sp_kind = env("装備武器特殊カテゴリ番号取得", c_SwordArtsHand)
    if sp_kind == 248 then
        if env(1001) <= 0 then
            ExecEventHalfBlend(Event_DrawStanceRightEnd, blend_type)
            return 
        elseif env(301, 0) == TRUE and 5 < g_FrameCount - g_LoopStanceLastCycle then
            if 1 <= g_LoopStanceCycles then
                g_LoopStanceCycles = 0
                ExecEventHalfBlend(Event_DrawStanceRightLoopMaxNoSync, blend_type)
                return 
            end
            g_LoopStanceCycles = g_LoopStanceCycles + 1
            g_LoopStanceLastCycle = g_FrameCount
        end
    end
    if HalfBlendLowerCommonFunctionNoSync(Event_DrawStanceRightLoopNoSync, lower_state, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function DrawStanceRightLoopMaxNoSync_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 90, 90)
    end
    local r1 = "W_DrawStanceRightAttackMaxLight"
    local r2 = "W_DrawStanceRightAttackMaxHeavy"
    local b1 = "W_DrawStanceRightAttackMaxLight"
    local b2 = "W_DrawStanceRightAttackMaxHeavy"
    if env(1116, 100530) == TRUE then
        r1 = "W_DrawStanceRightAttackMaxLightR90"
        r2 = "W_DrawStanceRightAttackMaxHeavyR90"
        b1 = "W_DrawStanceRightAttackMaxLightR90"
        b2 = "W_DrawStanceRightAttackMaxHeavyR90"
    elseif env(1116, 100540) == TRUE then
        r1 = "W_DrawStanceRightAttackMaxLight180"
        r2 = "W_DrawStanceRightAttackMaxHeavy180"
        b1 = "W_DrawStanceRightAttackMaxLight180"
        b2 = "W_DrawStanceRightAttackMaxHeavy180"
    elseif env(1116, 100550) == TRUE then
        r1 = "W_DrawStanceRightAttackMaxLightL90"
        r2 = "W_DrawStanceRightAttackMaxHeavyL90"
        b1 = "W_DrawStanceRightAttackMaxLightL90"
        b2 = "W_DrawStanceRightAttackMaxHeavyL90"
    end
    if SwordArtsStanceCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, blend_type, TRUE, TRUE, FALSE) == TRUE then
        return 
    elseif env(1108, ACTION_ARM_L2) <= 0 or env(1107, ACTION_ARM_L2) == TRUE then
        ExecEventHalfBlend(Event_DrawStanceRightEnd, blend_type)
        return 
    else
        local sp_kind = env("装備武器特殊カテゴリ番号取得", c_SwordArtsHand)
        if sp_kind == 248 and env(1001) <= 0 then
            ExecEventHalfBlend(Event_DrawStanceRightEnd, blend_type)
            return 
        elseif HalfBlendLowerCommonFunctionNoSync(Event_DrawStanceRightLoopMaxNoSync, lower_state, FALSE, TRUE) == TRUE then
            return 
        else
            return 
        end
    end
end

function DrawStanceRightEnd_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 90, 90)
    end
    if SwordArtsStanceCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", blend_type, FALSE, FALSE, TRUE) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        return 
    elseif HalfBlendLowerCommonFunction(Event_DrawStanceRightEnd, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function DrawStanceRightAttackLight_onUpdate()
    local r1 = "W_AttackRightLight1"
    local r2 = "W_AttackRightHeavy1Start"
    local b1 = "W_AttackBothLight1"
    local b2 = "W_AttackBothHeavy1Start"
    local hand = HAND_RIGHT
    local style = c_Style
    local is_artsr1 = FALSE
    local is_artsr2 = FALSE
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
    if env(225, hand) == WEAPON_CATEGORY_STRAIGHT_SWORD then
        r1 = "W_AttackRightLight2"
        r2 = "W_AttackRightHeavy2Start"
        b1 = "W_AttackBothLight2"
        b2 = "W_AttackBothHeavy2Start"
    end
    if sp_kind == 232 then
        r1 = "W_DrawStanceRightAttackLight2"
        b1 = "W_DrawStanceRightAttackLight2"
        is_artsr1 = TRUE
    elseif sp_kind == 251 or sp_kind == 256 then
        r1 = "W_DrawStanceRightAttackLight2"
        b1 = "W_DrawStanceRightAttackLight2"
        r2 = "W_AttackRightHeavy2Start"
        b2 = "W_AttackBothHeavy2Start"
        is_artsr1 = TRUE
    end
    if (sp_kind ~= 248 and sp_kind ~= 604) and 0 < env(1108, ACTION_ARM_L2) then
        r2 = "W_DrawStanceRightAttackHeavy"
        b2 = "W_DrawStanceRightAttackHeavy"
        is_artsr2 = TRUE
    end			
	if sp_kind == 747 then
        act(2001, 1.3)
    end		
    if SwordArtsCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, FALSE, is_artsr1, is_artsr2, GEN_TRANS_LEFT) == TRUE then
        return 
	elseif env(1116, 100743) == TRUE then
		ExecEventAllBody("W_DrawStanceRightAttackHeavy2")
		return
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function DrawStanceRightAttackLightR90_onUpdate()
    local r1 = "W_AttackRightLight1"
    local r2 = "W_AttackRightHeavy1Start"
    local b1 = "W_AttackBothLight1"
    local b2 = "W_AttackBothHeavy1Start"
    local hand = HAND_RIGHT
    local style = c_Style
    local is_artsr1 = FALSE
    local is_artsr2 = FALSE
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    if SwordArtsCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, FALSE, is_artsr1, is_artsr2, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function DrawStanceRightAttackLight180_onUpdate()
    local r1 = "W_AttackRightLight1"
    local r2 = "W_AttackRightHeavy1Start"
    local b1 = "W_AttackBothLight1"
    local b2 = "W_AttackBothHeavy1Start"
    local hand = HAND_RIGHT
    local style = c_Style
    local is_artsr1 = FALSE
    local is_artsr2 = FALSE
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    if SwordArtsCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, FALSE, is_artsr1, is_artsr2, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function DrawStanceRightAttackLightL90_onUpdate()
    local r1 = "W_AttackRightLight1"
    local r2 = "W_AttackRightHeavy1Start"
    local b1 = "W_AttackBothLight1"
    local b2 = "W_AttackBothHeavy1Start"
    local hand = HAND_RIGHT
    local style = c_Style
    local is_artsr1 = FALSE
    local is_artsr2 = FALSE
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    if SwordArtsCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, FALSE, is_artsr1, is_artsr2, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function DrawStanceRightAttackMaxLight_onUpdate()
    local r1 = "W_AttackRightLight1"
    local r2 = "W_AttackRightHeavy1Start"
    local b1 = "W_AttackBothLight1"
    local b2 = "W_AttackBothHeavy1Start"
    local hand = HAND_RIGHT
    local style = c_Style
    local is_artsr1 = FALSE
    local is_artsr2 = FALSE
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
    if env(225, hand) == WEAPON_CATEGORY_STRAIGHT_SWORD then
        r1 = "W_AttackRightLight2"
        r2 = "W_AttackRightHeavy2Start"
        b1 = "W_AttackBothLight2"
        b2 = "W_AttackBothHeavy2Start"
    end
    if sp_kind == 232 then
        r1 = "W_DrawStanceRightAttackLight2"
        b1 = "W_DrawStanceRightAttackLight2"
        is_artsr1 = TRUE
    elseif sp_kind == 251 or sp_kind == 256 then
        r1 = "W_DrawStanceRightAttackLight2"
        b1 = "W_DrawStanceRightAttackLight2"
        r2 = "W_AttackRightHeavy2Start"
        b2 = "W_AttackBothHeavy2Start"
        is_artsr1 = TRUE
    end
    if sp_kind ~= 248 and 0 < env(1108, ACTION_ARM_L2) then
        r2 = "W_DrawStanceRightAttackHeavy"
        b2 = "W_DrawStanceRightAttackHeavy"
        is_artsr2 = TRUE
    end
    if SwordArtsCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, FALSE, is_artsr1, is_artsr2, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function DrawStanceRightAttackMaxLightR90_onUpdate()
    local r1 = "W_AttackRightLight1"
    local r2 = "W_AttackRightHeavy1Start"
    local b1 = "W_AttackBothLight1"
    local b2 = "W_AttackBothHeavy1Start"
    local hand = HAND_RIGHT
    local style = c_Style
    local is_artsr1 = FALSE
    local is_artsr2 = FALSE
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    if SwordArtsCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, FALSE, is_artsr1, is_artsr2, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function DrawStanceRightAttackMaxLight180_onUpdate()
    local r1 = "W_AttackRightLight1"
    local r2 = "W_AttackRightHeavy1Start"
    local b1 = "W_AttackBothLight1"
    local b2 = "W_AttackBothHeavy1Start"
    local hand = HAND_RIGHT
    local style = c_Style
    local is_artsr1 = FALSE
    local is_artsr2 = FALSE
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    if SwordArtsCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, FALSE, is_artsr1, is_artsr2, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function DrawStanceRightAttackLight2_onUpdate()
    local r1 = "W_DrawStanceRightAttackLight3"
    local r2 = "W_AttackRightHeavy1Start"
    local b1 = "W_DrawStanceRightAttackLight3"
    local b2 = "W_AttackBothHeavy1Start"
    local hand = HAND_RIGHT
    local style = c_Style
    local is_artsr1 = TRUE
    local is_artsr2 = FALSE
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    if env(225, hand) == WEAPON_CATEGORY_STRAIGHT_SWORD then
        r2 = "W_AttackRightHeavy2Start"
        b2 = "W_AttackBothHeavy2Start"
    end
    if 0 < env(1108, ACTION_ARM_L2) then
        r2 = "W_DrawStanceRightAttackHeavy"
        b2 = "W_DrawStanceRightAttackHeavy"
        is_artsr2 = TRUE
    end
    if SwordArtsCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, FALSE, is_artsr1, is_artsr2, GEN_TRANS_LEFT) == TRUE then
        return 
	elseif env(1116, 100743) == TRUE then
		ExecEventAllBody("W_DrawStanceRightAttackHeavy2")
		return
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function DrawStanceRightAttackLight3_onUpdate()
    local r1 = "W_DrawStanceRightAttackLight2"
    local r2 = "W_AttackRightHeavy1Start"
    local b1 = "W_DrawStanceRightAttackLight2"
    local b2 = "W_AttackBothHeavy1Start"
    local hand = HAND_RIGHT
    local style = c_Style
    local is_artsr1 = TRUE
    local is_artsr2 = FALSE
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
    if env(225, hand) == WEAPON_CATEGORY_STRAIGHT_SWORD then
        r2 = "W_AttackRightHeavy2Start"
        b2 = "W_AttackBothHeavy2Start"
    end
    if sp_kind == 251 then
        r1 = "W_DrawStanceRightAttackLight"
        b1 = "W_DrawStanceRightAttackLight"
    end
    if sp_kind ~= 604 and 0 < env(1108, ACTION_ARM_L2) then
        r2 = "W_DrawStanceRightAttackHeavy"
        b2 = "W_DrawStanceRightAttackHeavy"
        is_artsr2 = TRUE
    end
    if sp_kind == 604 then
        r1 = "W_AttackRightLight1"
        b1 = "W_AttackBothLight1"
    end
    if SwordArtsCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, FALSE, is_artsr1, is_artsr2, GEN_TRANS_LEFT) == TRUE then
        return 
	elseif env(1116, 100743) == TRUE then
		ExecEventAllBody("W_DrawStanceRightAttackHeavy2")
		return
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function DrawStanceRightAttackHeavy_onUpdate()
    local r1 = "W_AttackRightLight1"
    local r2 = "W_AttackRightHeavy1Start"
    local b1 = "W_AttackBothLight1"
    local b2 = "W_AttackBothHeavy1Start"
    local is_artsr1 = FALSE
    local is_artsr2 = FALSE
    local hand = HAND_RIGHT
    local style = c_Style
    if env(1116, 100250) == TRUE then
        r2 = "W_DrawStanceRightAttackHeavy2"
        b2 = "W_DrawStanceRightAttackHeavy2"
        is_artsr2 = TRUE
    elseif env(1116, 100680) == TRUE then
        r2 = "W_DrawStanceRightAttackHeavy"
        b2 = "W_DrawStanceRightAttackHeavy"
        is_artsr2 = TRUE
    elseif env(225, hand) == WEAPON_CATEGORY_STRAIGHT_SWORD then
        r2 = "W_AttackRightHeavy2Start"
        b2 = "W_AttackBothHeavy2Start"
    else
        r2 = "W_AttackRightHeavy1Start"
        b2 = "W_AttackBothHeavy1Start"
    end
    local hand = HAND_RIGHT
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
    if 0 < env(1108, ACTION_ARM_L2) then
        if sp_kind == 232 or sp_kind == 256 then
            r1 = "W_DrawStanceRightAttackLight2"
            b1 = "W_DrawStanceRightAttackLight2"
            is_artsr1 = TRUE
        elseif sp_kind ~= 248 then
            r1 = "W_DrawStanceRightAttackLight"
            b1 = "W_DrawStanceRightAttackLight"
            is_artsr1 = TRUE
        end
    end
    if env(1116, 100700) == TRUE then
        r1 = "W_DrawStanceRightAttackLight"
        b1 = "W_DrawStanceRightAttackLight"
        r2 = nil
        b2 = nil
        is_artsr1 = TRUE
    end
	if sp_kind == 146 then
        act(2001, 1.5)
    end		
	if sp_kind == 747 then
        act(2001, 1.3)
    end			
    if SwordArtsCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, FALSE, is_artsr1, is_artsr2, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env(1116, 100450) == TRUE then
        ExecEventAllBody("W_DrawStanceRightAttackHeavyLoop")
        SetSwordArtsPointInfo(ACTION_ARM_R2, TRUE)
        return 
	elseif env(1116, 100742) == TRUE then
		ExecEventAllBody("W_AttackBothLightStepSpecial")
		return
	elseif env(1116, 100743) == TRUE then
		ExecEventAllBody("W_DrawStanceRightAttackHeavy2")
		return
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function DrawStanceRightAttackHeavyR90_onUpdate()
    local r1 = "W_AttackRightLight1"
    local r2 = "W_AttackRightHeavy1Start"
    local b1 = "W_AttackBothLight1"
    local b2 = "W_AttackBothHeavy1Start"
    local hand = HAND_RIGHT
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    local is_artsr1 = FALSE
    local is_artsr2 = FALSE
    if SwordArtsCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, FALSE, is_artsr1, is_artsr2, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function DrawStanceRightAttackHeavy180_onUpdate()
    local r1 = "W_AttackRightLight1"
    local r2 = "W_AttackRightHeavy1Start"
    local b1 = "W_AttackBothLight1"
    local b2 = "W_AttackBothHeavy1Start"
    local hand = HAND_RIGHT
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    local is_artsr1 = FALSE
    local is_artsr2 = FALSE
    if SwordArtsCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, FALSE, is_artsr1, is_artsr2, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function DrawStanceRightAttackHeavyl90_onUpdate()
    local r1 = "W_AttackRightLight1"
    local r2 = "W_AttackRightHeavy1Start"
    local b1 = "W_AttackBothLight1"
    local b2 = "W_AttackBothHeavy1Start"
    local hand = HAND_RIGHT
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    local is_artsr1 = FALSE
    local is_artsr2 = FALSE
    if SwordArtsCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, FALSE, is_artsr1, is_artsr2, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function DrawStanceRightAttackMaxHeavy_onUpdate()
    local r1 = "W_AttackRightLight1"
    local r2 = "W_AttackRightHeavy1Start"
    local b1 = "W_AttackBothLight1"
    local b2 = "W_AttackBothHeavy1Start"
    local is_artsr1 = FALSE
    local is_artsr2 = FALSE
    local hand = HAND_RIGHT
    local style = c_Style
    if env(1116, 100250) == TRUE then
        r2 = "W_DrawStanceRightAttackHeavy"
        b2 = "W_DrawStanceRightAttackHeavy"
        is_artsr2 = TRUE
    elseif env(225, hand) == WEAPON_CATEGORY_STRAIGHT_SWORD then
        r2 = "W_AttackRightHeavy2Start"
        b2 = "W_AttackBothHeavy2Start"
    else
        r2 = "W_AttackRightHeavy1Start"
        b2 = "W_AttackBothHeavy1Start"
    end
    local hand = HAND_RIGHT
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
    if 0 < env(1108, ACTION_ARM_L2) then
        if sp_kind == 232 then
            r1 = "W_DrawStanceRightAttackLight2"
            b1 = "W_DrawStanceRightAttackLight2"
            is_artsr1 = TRUE
        elseif sp_kind ~= 248 then
            r1 = "W_DrawStanceRightAttackLight"
            b1 = "W_DrawStanceRightAttackLight"
        end
    end
    if env(1116, 100700) == TRUE then
        r1 = "W_DrawStanceRightAttackLight"
        b1 = "W_DrawStanceRightAttackLight"
        r2 = nil
        b2 = nil
        is_artsr1 = TRUE
    end
    if SwordArtsCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, FALSE, is_artsr1, is_artsr2, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env(1116, 100450) == TRUE then
        ExecEventAllBody("W_DrawStanceRightAttackHeavyLoop")
        SetSwordArtsPointInfo(ACTION_ARM_R2, TRUE)
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function DrawStanceRightAttackMaxHeavyR90_onUpdate()
    local r1 = "W_AttackRightLight1"
    local r2 = "W_AttackRightHeavy1Start"
    local b1 = "W_AttackBothLight1"
    local b2 = "W_AttackBothHeavy1Start"
    local hand = HAND_RIGHT
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    local is_artsr1 = FALSE
    local is_artsr2 = FALSE
    if SwordArtsCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, FALSE, is_artsr1, is_artsr2, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function DrawStanceRightAttackMaxHeavy180_onUpdate()
    local r1 = "W_AttackRightLight1"
    local r2 = "W_AttackRightHeavy1Start"
    local b1 = "W_AttackBothLight1"
    local b2 = "W_AttackBothHeavy1Start"
    local hand = HAND_RIGHT
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    local is_artsr1 = FALSE
    local is_artsr2 = FALSE
    if SwordArtsCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, FALSE, is_artsr1, is_artsr2, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function DrawStanceRightAttackHeavyLoop_onUpdate()
    local local0, local1, local2 = nil
    if SwordArtsCommonFunction("W_DrawStanceRightAttackLight", local0, local1, local2, "W_DrawStanceRightAttackLight", nil, FALSE, FALSE, FALSE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env(1108, ACTION_ARM_R2) <= 0 then
        ExecEventAllBody("W_DrawStanceRightAttackHeavyLoopEnd")
        return 
    else
        return 
    end
end

function DrawStanceRightAttackHeavyLoopEnd_onUpdate()
    local r1 = "W_AttackRightLight1"
    local r2 = "W_AttackRightHeavy1Start"
    local b1 = "W_AttackBothLight1"
    local b2 = "W_AttackBothHeavy1Start"
    if env(1116, 100420) == TRUE then
        if 0 < env(1108, ACTION_ARM_L2) then
            r1 = "W_DrawStanceRightAttackLight"
            b1 = "W_DrawStanceRightAttackLight"
            is_artsr1 = TRUE
        else
            r1, r2, b1, b2 = nil
        end
    end
    if SwordArtsCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, FALSE, FALSE, FALSE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function DrawStanceRightAttackHeavy2_onUpdate()
    local r1 = "W_AttackRightLight1"
    local r2 = "W_DrawStanceRightAttackHeavy"
    local b1 = "W_AttackBothLight1"
    local b2 = "W_DrawStanceRightAttackHeavy"
    local hand = HAND_RIGHT
    local style = c_Style
    local is_artsr1 = FALSE
    local is_artsr2 = TRUE
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
    if 0 < env(1108, ACTION_ARM_L2) then
        if sp_kind == 256 then
            r1 = "W_DrawStanceRightAttackLight3"
            b1 = "W_DrawStanceRightAttackLight3"
            is_artsr1 = TRUE
        else
            r1 = "W_DrawStanceRightAttackLight"
            b1 = "W_DrawStanceRightAttackLight"
            is_artsr1 = TRUE
        end
    end
    if SwordArtsCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, FALSE, is_artsr1, is_artsr2, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function DrawStanceRightHeavyLoopGuard_onUpdate()
    local local0, local1, local2 = nil
    if SwordArtsCommonFunction("W_DrawStanceRightAttackLight", local0, local1, local2, "W_DrawStanceRightAttackLight", nil, FALSE, FALSE, FALSE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env(301, 0) == TRUE then
        if env(301, 1) == TRUE then
            if 0 <= env(1108, ACTION_ARM_R2) then
                ExecEventAllBody("W_DrawStanceRightAttackHeavyLoop")
                SetSwordArtsPointInfo(ACTION_ARM_R2, TRUE)
                return 
            end
        elseif env(1108, ACTION_ARM_R2) <= 0 then
            ExecEventAllBody("W_DrawStanceRightAttackHeavyLoopEnd")
            return 
        end
    end
    return 
end

function FourWayDrawStanceRightStart_onUpdate()
    local rolling_angle = GetVariable("CircleStepAngle")
    local addratio = 0.300000011920929
    local endratio = 1
    act(2001, math.abs(1 + addratio * math.abs(math.sin(math.rad(2 * rolling_angle)))))
    if SwordArtsStanceCommonFunction("W_DrawStanceRightAttackLight", "W_DrawStanceRightAttackHeavy", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_DrawStanceRightAttackLight", "W_DrawStanceRightAttackHeavy", blend_type, TRUE, TRUE, FALSE) == TRUE then
        return 
    elseif env(1116, 100330) == TRUE then
        if env(1108, ACTION_ARM_L2) < 200 or env(1107, ACTION_ARM_L2) == TRUE then
            ExecEventHalfBlend(Event_DrawStanceRightEnd, ALLBODY)
            return 
        end
        ExecEventHalfBlend(Event_DrawStanceRightLoop, ALLBODY)
    end
    if env("アニメ終了か", 1) == TRUE then
        ExecEventHalfBlendNoReset(Event_DrawStanceRightLoop, ALLBODY)
        return 
    else
        return 
    end
end

function StrongBashRight_onUpdate()
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE, FALSE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function ParryRightStart_onUpdate()
    if SwordArtsParryCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function ParryRightStart_WepBreak_onUpdate()
    if SwordArtsParryCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function ChainShotRight_Upper_Activate()
    if c_Style == HAND_LEFT_BOTH then
        SetAttackHand(HAND_LEFT)
    else
        SetAttackHand(HAND_RIGHT)
    end
    return 
end

function ChainShotRightStart_Upper_onUpdate()
    act("精密射撃可能か")
    local blend_type, lower_state = GetHalfBlendInfo()
    if ArrowCommonFunction(blend_type, FALSE, FALSE) == TRUE then
        return 
    end
    local request = GetAttackRequest(FALSE)
    if request == ATTACK_REQUEST_ARROW_FIRE_RIGHT or request == ATTACK_REQUEST_ARROW_FIRE_RIGHT2 then
        if IsExistArrow() == TRUE then
            ExecEventAllBody("W_NoArrow")
            return 
        elseif 0 < env(1001) then
            if c_SwordArtsID == SWORDARTS_WIDESHOT then
                if 2 < env("矢の残弾数取得", c_SwordArtsHand) then
                    SetSwordArtsPointInfo(ACTION_ARM_R1, TRUE)
                    ExecEventAllBody("W_ChainShotRightFire")
                    return 
                else
                    ExecEventAllBody("W_NoArrow")
                    return 
                end
            else
                SetSwordArtsPointInfo(ACTION_ARM_R1, TRUE)
                ExecEventAllBody("W_ChainShotRightFire")
                return 
            end
        end
    end
    if env(301, 0) == TRUE and (env(1108, ACTION_ARM_L2) < 400 or env(1107, ACTION_ARM_L2) == TRUE) then
        ExecEventHalfBlend(Event_ChainShotRightEnd, blend_type)
        if lower_state == LOWER_MOVE then
            ExecEventHalfBlendNoReset(Event_Move, LOWER)
        end
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEventHalfBlend(Event_ChainShotRightLoop, blend_type)
        return 
    elseif HalfBlendLowerCommonFunction(Event_ChainShotRightStartMirror, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ChainShotRightLoop_Upper_onUpdate()
    act("精密射撃可能か")
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 90, 90)
    end
    if ArrowCommonFunction(blend_type, FALSE, FALSE) == TRUE then
        return 
    end
    local request = GetAttackRequest(FALSE)
    if request == ATTACK_REQUEST_ARROW_FIRE_RIGHT or request == ATTACK_REQUEST_ARROW_FIRE_RIGHT2 then
        if IsExistArrow() == TRUE then
            ExecEventAllBody("W_NoArrow")
            return 
        elseif 0 < env(1001) and 0 < env(1001) then
            if c_SwordArtsID == SWORDARTS_WIDESHOT then
                if 2 < env("矢の残弾数取得", c_SwordArtsHand) then
                    SetSwordArtsPointInfo(ACTION_ARM_R1, TRUE)
                    ExecEventAllBody("W_ChainShotRightFire")
                    return 
                else
                    ExecEventAllBody("W_NoArrow")
                    return 
                end
            end
            SetSwordArtsPointInfo(ACTION_ARM_R1, TRUE)
            ExecEventAllBody("W_ChainShotRightFire")
        end
    end
    if env(1108, ACTION_ARM_L2) <= 0 or env(1107, ACTION_ARM_L2) == TRUE then
        ExecEventHalfBlend(Event_ChainShotRightEnd, blend_type)
        return 
    elseif HalfBlendLowerCommonFunction(Event_ChainShotRightLoop, lower_state, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function ChainShot_Activate()
    SetInterruptType(INTERRUPT_FINDATTACK)
    return 
end

function ChainShotRightFire_onUpdate()
    act("精密射撃可能か")
    if ArrowCommonFunction(ALLBODY, TRUE, FALSE) == TRUE then
        return 
    elseif c_SwordArtsID == SWORDARTS_CHAINSHOT then
        local request = GetAttackRequest(FALSE)
        if request == ATTACK_REQUEST_ARROW_FIRE_RIGHT or request == ATTACK_REQUEST_ARROW_FIRE_RIGHT2 then
            if IsExistArrow() == TRUE then
                ExecEventAllBody("W_NoArrow")
                return 
            elseif 0 < env(1001) then
                SetSwordArtsPointInfo(ACTION_ARM_R1, TRUE)
                ExecEventAllBody("W_ChainShotRightFireCont")
                return 
            end
        end
    end
    if env(301, 0) == TRUE and 0 < env(1108, ACTION_ARM_L2) then
        local blend_type = ALLBODY
        if MoveStart(LOWER, Event_Move, FALSE) == TRUE then
            blend_type = UPPER
        end
        ExecEventHalfBlendNoReset(Event_ChainShotRightLoop, blend_type)
        return 
    elseif MoveStartonCancelTiming(Event_Move, FALSE) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEventHalfBlend(Event_ChainShotRightEnd, ALLBODY)
        return 
    else
        return 
    end
end

function ChainShotRightFireCont_onUpdate()
    ChainShotRightFire_onUpdate()
    return 
end

function ChainShotRightEnd_Upper_onUpdate()
    act("精密射撃可能か")
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 90, 90)
    end
    if ArrowCommonFunction(blend_type, FALSE, TRUE) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_ChainShotRightEnd, lower_state, TRUE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function StampedeRight_Activate()
    SetInterruptType(INTERRUPT_FINDATTACK)
    return 
end

function StampedeRightStart_onUpdate()
    if SwordArtsCommonFunction("W_StampedeRightAttackLight", "W_StampedeRightAttackHeavy", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_StampedeRightAttackLight", "W_StampedeRightAttackHeavy", FALSE, TRUE, TRUE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function StampedeRightAttackLight_onUpdate()
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE, FALSE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function StampedeRightAttackHeavy_onUpdate()
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE, FALSE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function SpecialAttackRight_Activate()
    SetInterruptType(INTERRUPT_FINDATTACK)
    return 
end

function SpecialAttackRightStart_onUpdate()
    if SwordArtsCommonFunction("W_SpecialAttackRighLight", "W_SpecialAttackRightHeavy", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_SpecialAttackRightLight", "W_SpecialAttackRightHeavy", FALSE, TRUE, TRUE, GEN_TRANS_LEFT) == TRUE then
        return 
    else
        return 
    end
end

function SpecialAttackRightLight_onUpdate()
    local r1 = "W_AttackRightLight2"
	local r2 = "W_AttackRightHeavy2Start"
	local b1 = "W_AttackBothLight2"
    local hand = HAND_RIGHT
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
    
    if sp_kind == 270 then
        r2 = "W_AttackRightHeavy2Start"
    end	
	
    if SwordArtsCommonFunction("W_AttackRightLight1", r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE, FALSE, GEN_TRANS_LEFT) == TRUE then
        return 
    else
        return 
    end
end

function SpecialAttackRightHeavy_onUpdate()
    local r1 = "W_AttackRightLight1"
	local r2 = "W_AttackRightHeavy1Start"
	local b1 = "W_AttackBothLight1"
    local hand = HAND_RIGHT
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
    
    if sp_kind == 734 or sp_kind == 600 or sp_kind == 744 or sp_kind == 745 then
        r2 = "W_AttackRightHeavy2Start"
    end	
	
    if sp_kind == 737 then
        b1 = "W_AttackBothBackstep"
    end		
    
    if sp_kind == 603 then
        r1 = "W_AttackRightLight2"
    end
	
    if SwordArtsCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, "W_AttackBothHeavy1Start", FALSE, FALSE, FALSE, GEN_TRANS_LEFT) == TRUE then
        return 
    else
        return 
    end
end

function AttackSpinStart_Upper_onUpdate()
    local r1 = "W_AttackRightLight2"
    local r2 = "W_AttackSpinHeavy"
    local b1 = "W_AttackBothLight2"
    local b2 = "W_AttackSpinHeavy"
    local hand = HAND_RIGHT
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
	local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	if sp_kind == 604 then
		if env(1116, 100733) == TRUE and env(1116, 100734) == TRUE then
			return
		elseif env(1116, 100733) == TRUE and env(1116, 100735) == TRUE then
			ExecEventAllBody("W_AttackBothBackstep")
			return
		elseif env(1116, 100733) == TRUE then
			ExecEventAllBody("W_AttackSpinLight")
			return
		end
		if env(1116, 100737) == TRUE then
			ExecEventAllBody("W_AttackBothLightStepSpecial")
			return
		end
		if env(1116, 100738) == TRUE then
			ExecEventAllBody("W_AttackSpinHeavy")
			return
		end
	end
    local kind = env(225, hand)
    if kind == WEAPON_CATEGORY_CURVEDSWORD then
        local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
        if sp_kind ~= 51 and sp_kind ~= 101 and sp_kind ~= 137 and sp_kind ~= 139 and sp_kind ~= 195 then
            r1 = "W_AttackRightLight1"
            b1 = "W_AttackBothLight1"
        end
    end
    if env(301, 0) == FALSE then
        r2 = "W_AttackRightHeavy2Start"
        b2 = "W_AttackBothHeavy2Start"
        if kind == WEAPON_CATEGORY_CURVEDSWORD then
            local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
            if sp_kind ~= 51 and sp_kind ~= 101 and sp_kind ~= 137 and sp_kind ~= 139 and sp_kind ~= 195 then
                r2 = "W_AttackRightHeavy1Start"
                b2 = "W_AttackBothHeavy1Start"
            end
        end
    end
    if env(1116, 100570) == TRUE then
        r1 = "W_AttackSpinLight"
        b1 = "W_AttackSpinLight"
    end
    if env(1116, 100440) == TRUE then
        act(2001, 1.20000004768372)
    end
    if env(1116, 100575) == TRUE then
        r2 = "W_AttackSpinHeavy"
        b2 = "W_AttackSpinHeavy"
    end	
    if SwordArtsCommonFunction(r1, r2, "W_AttackLeftLight2", "W_AttackLeftHeavy1", b1, b2, FALSE, TRUE, TRUE, GEN_TRANS_LEFT) == TRUE then
        act(2001, 1)
        return 
    elseif env(1116, 100590) == TRUE and 0 < env(1108, ACTION_ARM_R2) and 0 < env(1001) then
        SetSwordArtsPointInfo(ACTION_ARM_R2, TRUE)
        ExecEventAllBody("W_AttackSpinLoop")
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        act(2001, 1)
        return 
    else
        return 
    end
end

function SpinAttack_Activate()
    SetInterruptType(INTERRUPT_FINDATTACK)
    return 
end

function AttackSpinLight_onUpdate()
    local hand = HAND_RIGHT
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
	local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	if sp_kind == 226 then
        act(2001, 1.5)
    end			
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE, FALSE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function AttackSpinHeavy_onUpdate()
    local r1 = "W_AttackRightLight2"
    local r2 = "W_AttackRightHeavy2Start"
    local b1 = "W_AttackBothLight2"
    local b2 = "W_AttackBothHeavy2Start"
    local is_artsr1 = FALSE
    local hand = HAND_RIGHT
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
	local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)	
    if sp_kind == 733 then
        r1 = "W_AttackRightLight3"	
        b1 = "W_AttackBothLight3"
    end		
    local kind = env(225, hand)
    if kind == WEAPON_CATEGORY_CURVEDSWORD then
        local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
        if sp_kind ~= 51 and sp_kind ~= 137 and sp_kind ~= 139 and sp_kind ~= 166 and sp_kind ~= 195 then
            r1 = "W_AttackRightLight1"
            r2 = "W_AttackRightHeavy1Start"
            if sp_kind ~= 0 and sp_kind ~= 212 then
                b1 = "W_AttackBothLight1"
                b2 = "W_AttackBothHeavy1Start"
            end
        end
    end
    if 0 < env(1001) and env(1116, 100570) == TRUE then
        r1 = "W_AttackSpinLight"
        b1 = "W_AttackSpinLight"
        is_artsr1 = TRUE
    end
    if env(1116, 100595) == TRUE then
	    SetSwordArtsPointInfo(ACTION_ARM_R2, TRUE)
        r2 = "W_AttackSpinLoop"
        b2 = "W_AttackSpinLoop"
    end		
    if SwordArtsCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, FALSE, is_artsr1, FALSE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env(1116, 100240) == TRUE and 0 < env(1108, ACTION_ARM_R2) and 0 < env(1001) then
        SetSwordArtsPointInfo(ACTION_ARM_R2, TRUE)
        ExecEventAllBody("W_AttackSpinLoop")
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function AttackSpinHeavyL_onUpdate()
    local r1 = "W_AttackRightLight2"
    local r2 = "W_AttackRightHeavy2Start"
    local b1 = "W_AttackBothLight2"
    local b2 = "W_AttackBothHeavy2Start"
    local is_artsr1 = FALSE
    local hand = HAND_RIGHT
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end	
    local kind = env(225, hand)
    if kind == WEAPON_CATEGORY_CURVEDSWORD then
        local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
        if sp_kind ~= 51 and sp_kind ~= 137 and sp_kind ~= 139 and sp_kind ~= 166 and sp_kind ~= 195 then
            r1 = "W_AttackRightLight1"
            r2 = "W_AttackRightHeavy1Start"
            if sp_kind ~= 0 and sp_kind ~= 212 then
                b1 = "W_AttackBothLight1"
                b2 = "W_AttackBothHeavy1Start"
            end
        end
    end
    if 0 < env(1001) and env(1116, 100570) == TRUE then
        r1 = "W_AttackSpinLight"
        b1 = "W_AttackSpinLight"
        is_artsr1 = TRUE
    end	
    if SwordArtsCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, FALSE, is_artsr1, FALSE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env(1116, 100240) == TRUE and 0 < env(1108, ACTION_ARM_R2) and 0 < env(1001) then
        SetSwordArtsPointInfo(ACTION_ARM_R2, TRUE)
        ExecEventAllBody("W_AttackSpinLoop")
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function AttackSpinLoop_onUpdate()
    local r1 = "W_AttackRightLight2"
    local b1 = "W_AttackBothLight2"
    local is_artsr1 = FALSE
    if 0 < env(1001) and env(1116, 100570) == TRUE then
        r1 = "W_AttackSpinLight"
        b1 = "W_AttackSpinLight"
        is_artsr1 = TRUE
    end
    if SwordArtsCommonFunction(r1, "W_AttackRightHeavy2Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, "W_AttackBothHeavy2Start", FALSE, is_artsr1, FALSE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env(1116, 100240) == TRUE and 0 < env(1108, ACTION_ARM_R2) and 0 < env(1001) then
        SetSwordArtsPointInfo(ACTION_ARM_R2, TRUE)
        ExecEventAllBody("W_AttackSpinLoop")
        return 
    elseif env(1116, 100590) == TRUE and 0 < env(1108, ACTION_ARM_R2) then
        if 0 < env(1001) then
            SetSwordArtsPointInfo(ACTION_ARM_R2, TRUE)
            ExecEventAllBody("W_AttackSpinLoop")
            return 
        else
            ExecEventAllBody("W_AttackSpinHeavy")
            return 
        end
    elseif env(1116, 100600) == TRUE then
        local sp_kind = env("装備武器特殊カテゴリ番号取得", c_SwordArtsHand)
        if env(1108, ACTION_ARM_R2) <= 0 then
            if sp_kind == 264 and ForwardLeg() == 1 then
                ExecEventAllBody("W_AttackSpinHeavyL")
                return 
            else
                ExecEventAllBody("W_AttackSpinHeavy")
                return 
            end
        end
    end
    if env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function AttackSpinLoopEnd_onUpdate()
    if SwordArtsCommonFunction("W_AttackRightLight2", "W_AttackRightHeavy2Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight2", "W_AttackBothHeavy2Start", FALSE, FALSE, FALSE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function Charge_Upper_onUpdate()
    local r2 = "W_AttackRightHeavy1Start"
    local l2 = "W_AttackLeftHeavy1"
    local b2 = "W_AttackBothHeavy1Start"
    local is_artsr1 = FALSE
    local is_artsr2 = FALSE
    if env(1116, 100260) == TRUE then
        r2 = "W_ChargeContinue"
        l2 = "W_ChargeContinue"
        b2 = "W_ChargeContinue"
        is_artsr2 = TRUE
    end
    if SwordArtsCommonFunction("W_AttackRightLight1", r2, "W_AttackLeftLight1", l2, "W_AttackBothLight1", b2, is_artsr1, is_artsr2, TRUE, GEN_TRANS_LFET) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function Charge_Activate()
    SetInterruptType(INTERRUPT_FINDATTACK)
    return 
end

function ChargeContinue_onUpdate()
    local r2 = "W_AttackRightHeavy1Start"
    local l2 = "W_AttackLeftHeavy1"
    local b2 = "W_AttackBothHeavy1Start"
    local is_artsr1 = FALSE
    local is_artsr2 = FALSE
    if env(1116, 100260) == TRUE then
        r2 = "W_ChargeContinue"
        l2 = "W_ChargeContinue"
        b2 = "W_ChargeContinue"
        is_artsr2 = TRUE
    end
    if env(1116, 100610) == TRUE then
        r2 = "W_ChargeContinue2"
        l2 = "W_ChargeContinue2"
        b2 = "W_ChargeContinue2"
        is_artsr2 = TRUE
    end
    if SwordArtsCommonFunction("W_AttackRightLight1", r2, "W_AttackLeftLight1", l2, "W_AttackBothLight1", b2, is_artsr1, is_artsr2, TRUE, GEN_TRANS_LFET) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function ChargeContinue2_onUpdate()
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE, FALSE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function Warcry_onUpdate()
    local r2 = "W_AttackRightHeavySpecial1Start"
    local b2 = "W_AttackBothHeavySpecial1Start"
    local hand = HAND_RIGHT
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    if env("装備武器特殊カテゴリ番号取得", hand) == 242 then
        r2 = "W_AttackRightHeavy1Start"
        b2 = "W_AttackBothHeavy1Start"
    end
    if SwordArtsCommonFunction(g_r1, r2, g_l1, g_l2, g_b1, b2, FALSE, FALSE, FALSE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env(1116, 100460) == TRUE and env(1108, ACTION_ARM_L2) <= 0 then
        ExecEventAllBody("W_WarcryCancel")
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function WarcryCancel_onUpdate()
    if SwordArtsCommonFunction(g_r1, "W_AttackRightHeavySpecial1Start", g_l1, g_l2, g_b1, "W_AttackBothHeavySpecial1Start", FALSE, FALSE, FALSE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function Endure_Upper_onUpdate()
    local r2 = "W_AttackRightHeavy1Start"
    local l2 = "W_AttackLeftHeavy1"
    local b2 = "W_AttackBothHeavy1Start"
    if env(1116, 100290) == TRUE then
        r2 = "W_EndureRightHeavy"
        l2 = "W_EndureRightHeavy"
        b2 = "W_EndureRightHeavy"
        SetSwordArtsPointInfo(ACTION_ARM_R2, TRUE)
    end
    if SwordArtsCommonFunction("W_AttackRightLight1", r2, "W_AttackLeftLight1", l2, "W_AttackBothLight1", b2, FALSE, FALSE, FALSE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function EndureRightHeavy_onUpdate()
    local r1 = "W_AttackRightLight2"
    local r2 = "W_AttackRightHeavy2Start"
    local b1 = "W_AttackBothLight2"
    local b2 = "W_AttackBothHeavy2Start"
    local is_artsr1 = FALSE
    local hand = HAND_RIGHT
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    local kind = env(225, hand)
    if env(1116, 100591) == TRUE then
        r2 = "W_AttackSpinLoop"
        b2 = "W_AttackSpinLoop"	
        SetSwordArtsPointInfo(ACTION_ARM_L2, TRUE)		
    end	
	
    if env(1116, 100290) == TRUE then
        r2 = "W_EndureRightHeavy"
        l2 = "W_EndureRightHeavy"
        b2 = "W_EndureRightHeavy"
        SetSwordArtsPointInfo(ACTION_ARM_R2, TRUE)
    end	
    if SwordArtsCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, FALSE, FALSE, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function OneShotNoGenTrans_Activate()
    SetInterruptType(INTERRUPT_FINDATTACK)
    return 
end

function OneShotNoGenTransStart_onUpdate()
    local r1 = "W_AttackRightLight1"
    local r2 = "W_AttackRightHeavy1Start"
    local b1 = "W_AttackBothLight1"
    local b2 = "W_AttackBothHeavy1Start"
    local hand = HAND_RIGHT
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
    if env(1116, 100250) == TRUE then
        SetSwordArtsPointInfo(ACTION_ARM_R2, TRUE)
        r2 = "W_OneShotNoGenTransContinue"
        b2 = "W_OneShotNoGenTransContinue"
    end
    if sp_kind == 247 then
        r1 = "W_AttackRightLight2"
        b1 = "W_AttackBothLight2"
    end
    if SwordArtsCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, FALSE, FALSE, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function OneShotNoGenTransContinue_onUpdate()
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function MagicBuffRight_Upper_Activate()
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        SetAttackHand(HAND_LEFT)
    else
        SetAttackHand(HAND_RIGHT)
    end
    return 
end

function MagicBuffRight_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE, FALSE, FALSE) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_MagicBuffRightMirror, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function MagicBuffRight2_onUpdate()
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function MagicBuffRight3_onUpdate()
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function CircleStepStart_onUpdate()
    local r1 = "W_AttackRightLight1"
	local r2 = "W_AttackRightHeavy1Start"
	local b1 = "W_AttackBothLight1"
	local b2 = "W_AttackBothHeavy1Start"
    local hand = HAND_RIGHT
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
    
    if IsRingOfMomentum() or IsBBDashWeapon() == TRUE then
		r1 = "W_AttackRightLightStep"
        r2 = "W_AttackRightHeavy2Start"
		b1 = "W_AttackBothLightStep"
        b2 = "W_AttackBothHeavy2Start"
    end		
    
    local rolling_angle = GetVariable("CircleStepAngle")
    local addratio = 0.300000011920929
    local endratio = 1
    act(2001, math.abs(1 + addratio * math.abs(math.sin(math.rad(2 * rolling_angle)))))
    if AttackCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function CircleStepStartSelftrans_onUpdate()
    local rolling_angle = GetVariable("CircleStepAngleSelftrans")
    local addratio = 0.300000011920929
    local endratio = 1
    act(2001, math.abs(1 + addratio * math.abs(math.sin(math.rad(2 * rolling_angle)))))
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ChargeShotRight_Upper_Activate()
    SetInterruptType(INTERRUPT_FINDATTACK)
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        SetAttackHand(HAND_LEFT)
    else
        SetAttackHand(HAND_RIGHT)
    end
    return 
end

function ChargeShotRightStart_Upper_onUpdate()
    act("精密射撃可能か")
    local blend_type, lower_state = GetHalfBlendInfo()
    if SwordArtsChargeShotCommonFunction(blend_type) == TRUE then
        return 
    else
        local request = GetAttackRequest(FALSE)
        if (request == ATTACK_REQUEST_ARROW_FIRE_RIGHT or request == ATTACK_REQUEST_ARROW_FIRE_RIGHT2) and 0 < env(1001) then
            if IsExistArrow() == TRUE then
                ExecEventAllBody("W_NoArrow")
                return 
            else
                SetSwordArtsPointInfo(ACTION_ARM_R1, TRUE)
                ExecEventHalfBlend(Event_ChargeShotRightHoldStart, ALLBODY)
                return 
            end
        elseif env(301, 0) == TRUE and env(1108, ACTION_ARM_L2) <= 0 then
            ExecEventHalfBlend(Event_ChargeShotRightEnd, ALLBODY)
            return 
        elseif env("アニメ終了か", 1) == TRUE then
            ExecEventHalfBlend(Event_ChargeShotRightLoop, ALLBODY)
            return 
        else
            return 
        end
    end
end

function ChargeShotRightLoop_Upper_onUpdate()
    act("精密射撃可能か")
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 90, 90)
    end
    if SwordArtsChargeShotCommonFunction(blend_type) == TRUE then
        return 
    elseif env(1108, ACTION_ARM_L2) <= 0 then
        ExecEventHalfBlend(Event_ChargeShotRightEnd, ALLBODY)
        return 
    else
        local request = GetAttackRequest(FALSE)
        if (request == ATTACK_REQUEST_ARROW_FIRE_RIGHT or request == ATTACK_REQUEST_ARROW_FIRE_RIGHT2) and 0 < env(1001) then
            if IsExistArrow() == TRUE then
                ExecEventAllBody("W_NoArrow")
                return 
            else
                SetSwordArtsPointInfo(ACTION_ARM_R1, TRUE)
                ExecEventHalfBlend(Event_ChargeShotRightHoldStart, ALLBODY)
                return 
            end
        elseif HalfBlendLowerCommonFunction(Event_ChargeShotRightLoop, lower_state, FALSE, FALSE) == TRUE then
            return 
        else
            return 
        end
    end
end

function ChargeShotRightHoldStart_Upper_onUpdate()
    act("精密射撃可能か")
    local blend_type, lower_state = GetHalfBlendInfo()
    if SwordArtsChargeShotCommonFunction(blend_type) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        if env("弓矢スロット取得", 0) == 0 then
            if env(1108, ACTION_ARM_R1) <= 0 then
                ExecEventAllBody("W_ChargeShotRightFire")
                return 
            end
        elseif env(1108, ACTION_ARM_R2) <= 0 then
            ExecEventAllBody("W_ChargeShotRightFire")
            return 
        end
        ExecEventHalfBlend(Event_ChargeShotRightHoldLoop, ALLBODY)
        return 
    elseif HalfBlendLowerCommonFunction(Event_ChargeShotRightHoldStart, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ChargeShotRightHoldLoop_Upper_onUpdate()
    act("精密射撃可能か")
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 90, 90)
    end
    if SwordArtsChargeShotCommonFunction(blend_type) == TRUE then
        return 
    elseif env("弓矢スロット取得", 0) == 0 then
        if env(1108, ACTION_ARM_R1) <= 0 then
            ExecEventAllBody("W_ChargeShotRightFire")
            return 
        end
    elseif env(1108, ACTION_ARM_R2) <= 0 then
        ExecEventAllBody("W_ChargeShotRightFire")
        return 
    end
    if HalfBlendLowerCommonFunction(Event_ChargeShotRightHoldLoop, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ChargeShotRightEnd_Upper_onUpdate()
    act("精密射撃可能か")
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function ChargeShotFire_Activate()
    SetInterruptType(INTERRUPT_FINDATTACK)
    return 
end

function ChargeShotRightFire_onUpdate()
    act("精密射撃可能か")
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function CrossbowStepInRightStart_Upper_onUpdate()
    act("精密射撃可能か")
    if SwordArtsCrossbowStepInFunction() == TRUE then
        return 
    end
    local request = GetAttackRequest(FALSE)
    if 0 < env(1001) then
        if request == ATTACK_REQUEST_RIGHT_CROSSBOW or request == ATTACK_REQUEST_RIGHT_CROSSBOW2 then
            if IsExistBolt(HAND_RIGHT) == TRUE then
                ExecEventHalfBlend(Event_AttackCrossbowRightEmpty, ALLBODY)
                return 
            elseif env("ボルト装填状態取得", 1) == TRUE then
                ExecEventAllBody("W_CrossbowStepInFire")
                return 
            else
                ExecEventAllBody("W_CrossbowStepInReload")
                return 
            end
        elseif request == ATTACK_REQUEST_BOTHRIGHT_CROSSBOW or request == ATTACK_REQUEST_BOTHRIGHT_CROSSBOW2 then
            if IsExistBolt(HAND_RIGHT) == TRUE then
                ExecEventHalfBlend(Event_AttackCrossbowBothRightEmpty, ALLBODY)
                return 
            elseif env("ボルト装填状態取得", 1) == TRUE then
                ExecEventAllBody("W_CrossbowStepInFire")
                return 
            else
                ExecEventAllBody("W_CrossbowStepInReload")
                return 
            end
        end
    end
    if env("アニメ終了か", 1) == TRUE then
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function CrossbowStepInFire_onUpdate()
    act("精密射撃可能か")
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function CrossbowStepInReload_onUpdate()
    act("精密射撃可能か")
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function HeadHunt_Activate()
    SetInterruptType(INTERRUPT_FINDATTACK)
    return 
end

function HeadHunt_Upper_onUpdate()
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE, TRUE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function OneShot_Upper_Activate()
    SetInterruptType(INTERRUPT_FINDATTACK)
    return 
end

function OneShot_Upper_onUpdate()
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE, TRUE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function OneShotFull_Activate()
    SetInterruptType(INTERRUPT_FINDATTACK)
    return 
end

function OneShotFullRightStart_onUpdate()
    SetVariable("IndexThrowHand", HAND_RIGHT)
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE, TRUE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function OneShotFullBothStart_onUpdate()
    SetVariable("IndexThrowHand", HAND_RIGHT)
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE, TRUE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function RandomOneShot1_onUpdate()
    local r2 = "W_RandomOneShotNext1"
    local b2 = "W_RandomOneShotNext1"
    local rand = math.random(0, 100)
    
    local sp_kind_right = env(345, HAND_RIGHT)
    local sp_kind_left = env(345, HAND_LEFT)
    
    -- Crucifix of the Mad King
    if sp_kind_right == 261 or sp_kind_left == 261 then
        local next3active = env(1116, 130092600)
        local next4active = env(1116, 130092632)
        local ignorenext4 = env(1116, 18000)
        if next3active == TRUE and next4active == TRUE then
            r2 = "W_RandomOneShotNext1"
            b2 = "W_RandomOneShotNext1"
        elseif next3active == TRUE then
            if ignorenext4 == TRUE then
                r2 = "W_RandomOneShotNext1"
                b2 = "W_RandomOneShotNext1"
            elseif 50 < rand then
                r2 = "W_RandomOneShotNext1"
                b2 = "W_RandomOneShotNext1"
            else
                r2 = "W_RandomOneShotNext4"
                b2 = "W_RandomOneShotNext4"
            end
        elseif next4active == TRUE then
            if 50 < rand then
                r2 = "W_RandomOneShotNext1"
                b2 = "W_RandomOneShotNext1"
            else
                r2 = "W_RandomOneShotNext3"
                b2 = "W_RandomOneShotNext3"
            end
        elseif ignorenext4 == TRUE then
            if 50 < rand then
                r2 = "W_RandomOneShotNext1"
                b2 = "W_RandomOneShotNext1"
            else
                r2 = "W_RandomOneShotNext3"
                b2 = "W_RandomOneShotNext3"
            end
        elseif 66 < rand then
            r2 = "W_RandomOneShotNext4"
            b2 = "W_RandomOneShotNext4"
        elseif 33 < rand then
            r2 = "W_RandomOneShotNext3"
            b2 = "W_RandomOneShotNext3"
        else
            r2 = "W_RandomOneShotNext1"
            b2 = "W_RandomOneShotNext1"
        end
    elseif sp_kind_right == 295 or sp_kind_left == 295 then -- Manus Catalyst
        if rand <= 25 then
            ExecEventAllBody("W_RandomOneShotNext1")
        elseif rand > 25 and rand <= 50 then
            ExecEventAllBody("W_RandomOneShotNext2")
        elseif rand > 50 and rand <= 75 then
            ExecEventAllBody("W_RandomOneShotNext3")
        else
            ExecEventAllBody("W_RandomOneShotNext4")
        end
    end
    
    if SwordArtsCommonFunction("W_AttackRightLight1", r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", b2, FALSE, TRUE, TRUE, FALSE) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function RandomOneShotNext1_onUpdate()
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE, TRUE, FALSE) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEvent("W_Idle")
        return 
    else
        return 
    end
end

function RandomOneShotNext2_onUpdate()
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE, TRUE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(FALSE, TRUE)
        ExecEvent("W_Idle")
        return 
    else
        return 
    end
end

function RandomOneShotNext3_onUpdate()
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE, TRUE, FALSE) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEvent("W_Idle")
        return 
    else
        return 
    end
end

function RandomOneShotNext4_onUpdate()
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE, TRUE, FALSE) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEvent("W_Idle")
        return 
    else
        return 
    end
end

function SwordArtsLeft_Activate()
    SetAttackHand(HAND_LEFT)
    return 
end

function ParryLeftStart_onUpdate()
    if SwordArtsParryCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function ParryLeftStart_WepBreak_onUpdate()
    if SwordArtsParryCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function MagicBuffLeft_Upper_Activate()
    SetAttackHand(HAND_LEFT)
    return 
end

function MagicBuffLeft_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE, FALSE, FALSE) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_MagicBuffLeftMirror, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function MagicBuffLeft2_onUpdate()
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function MagicBuffLeft3_onUpdate()
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function OneShotFullLeftStart_onUpdate()
    SetVariable("IndexThrowHand", HAND_LEFT)
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE, TRUE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function StormStanceRight_Activate()
    SetInterruptType(INTERRUPT_FINDATTACK)
    return 
end

function StormStanceStart_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if SwordArtsStanceCommonFunction("W_StormStanceLight", "W_StormStanceHeavy", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_StormStanceLight", "W_StormStanceHeavy", blend_type, TRUE, TRUE, FALSE) == TRUE then
        return 
    elseif style == HAND_LEFT_BOTH then
        act(2002, 100901)
    else
        act(2002, 100900)
    end
    if env(1116, 100330) == TRUE and (env(1108, ACTION_ARM_L2) < 200 or env(1107, ACTION_ARM_L2) == TRUE) then
        ExecEventHalfBlend(Event_StormStanceEnd, blend_type)
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEventHalfBlendNoReset(Event_StormStanceLoop, blend_type)
        g_StormStanceHoldTime = env(1108, ACTION_ARM_L2)
        return 
    elseif HalfBlendLowerCommonFunction(Event_StormStanceStart, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function StormStanceLoop_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 90, 90)
    end
    if SwordArtsStanceCommonFunction("W_StormStanceLight", "W_StormStanceHeavy", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_StormStanceLight", "W_StormStanceHeavy", blend_type, TRUE, TRUE, FALSE) == TRUE then
        return 
    elseif style == HAND_LEFT_BOTH then
        act(2002, 100901)
    else
        act(2002, 100900)
    end
    if env(1108, ACTION_ARM_L2) <= 0 or env(1107, ACTION_ARM_L2) == TRUE then
        ExecEventHalfBlend(Event_StormStanceEnd, blend_type)
        return 
    -- 2500
    elseif 500 <= env(1108, ACTION_ARM_L2) - g_StormStanceHoldTime then
        ExecEventHalfBlend(Event_StormStanceFullLoop, blend_type)
        local style = c_Style
        if style == HAND_LEFT_BOTH then
            act(2002, 100911)
            act(2002, 100921)
        else
            act(2002, 100910)
            act(2002, 100920)
        end
    end
    if HalfBlendLowerCommonFunction(Event_StormStanceLoop, lower_state, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function StormStanceChange_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if SwordArtsStanceCommonFunction("W_StormStanceFullLight", "W_StormStanceFullHeavy", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_StormStanceFullLight", "W_StormStanceFullHeavy", blend_type, TRUE, TRUE, FALSE) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE and env(2000) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        return 
    elseif HalfBlendLowerCommonFunction(Event_StormStanceChange, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function StormStanceEnd_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 90, 90)
    end
    if SwordArtsStanceCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", blend_type, FALSE, FALSE, TRUE) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        return 
    elseif HalfBlendLowerCommonFunction(Event_StormStanceEnd, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function StormStanceLight_onUpdate()
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE, FALSE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function StormStanceHeavy_onUpdate()
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE, FALSE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function StormStanceFullStart_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    local r1 = "W_StormStanceFullLight_NonBoss"
    local r2 = "W_StormStanceFullHeavy_NonBoss"
    local b1 = "W_StormStanceFullLight_NonBoss"
    local b2 = "W_StormStanceFullHeavy_NonBoss"
    if env(1116, 4510) == TRUE then
        r1 = "W_StormStanceFullLight"
        r2 = "W_StormStanceFullHeavy"
        b1 = "W_StormStanceFullLight"
        b2 = "W_StormStanceFullHeavy"
    end
    if SwordArtsStanceCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, blend_type, TRUE, TRUE, FALSE) == TRUE then
        return 
    elseif env(1116, 100330) == TRUE and (env(1108, ACTION_ARM_L2) < 200 or env(1107, ACTION_ARM_L2) == TRUE) then
        ExecEventHalfBlend(Event_StormStanceFullEnd, blend_type)
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEventHalfBlendNoReset(Event_StormStanceFullLoop, blend_type)
        return 
    elseif HalfBlendLowerCommonFunction(Event_StormStanceFullStart, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function StormStanceFullLoop_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    local r1 = "W_StormStanceFullLight_NonBoss"
    local r2 = "W_StormStanceFullHeavy_NonBoss"
    local b1 = "W_StormStanceFullLight_NonBoss"
    local b2 = "W_StormStanceFullHeavy_NonBoss"
    if env(1116, 4510) == TRUE then
        r1 = "W_StormStanceFullLight"
        r2 = "W_StormStanceFullHeavy"
        b1 = "W_StormStanceFullLight"
        b2 = "W_StormStanceFullHeavy"
    end
    if SwordArtsStanceCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, blend_type, TRUE, TRUE, FALSE) == TRUE then
        return 
    elseif env(1108, ACTION_ARM_L2) <= 0 or env(1107, ACTION_ARM_L2) == TRUE then
        ExecEventHalfBlend(Event_StormStanceFullEnd, blend_type)
        return 
    elseif HalfBlendLowerCommonFunction(Event_StormStanceFullLoop, lower_state, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function StormStanceFullEnd_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if SwordArtsStanceCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", blend_type, FALSE, FALSE, TRUE) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        return 
    elseif HalfBlendLowerCommonFunction(Event_StormStanceFullEnd, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function StormStanceFullLight_onUpdate()
    local style = c_Style
    if env(301, 0) == TRUE then
        if style == HAND_LEFT_BOTH then
            act(2002, 100931)
        else
            act(2002, 100930)
        end
    end
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE, FALSE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function StormStanceFullHeavy_onUpdate()
    local style = c_Style
    if env(301, 0) == TRUE then
        if style == HAND_LEFT_BOTH then
            act(2002, 100931)
        else
            act(2002, 100930)
        end
    end
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE, FALSE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function StormStanceFullLight_NonBoss_onUpdate()
    local style = c_Style
    if env(301, 0) == TRUE then
        if style == HAND_LEFT_BOTH then
            act(2002, 100931)
        else
            act(2002, 100930)
        end
    end
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE, FALSE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function StormStanceFullHeavy_NonBoss_onUpdate()
    local style = c_Style
    if env(301, 0) == TRUE then
        if style == HAND_LEFT_BOTH then
            act(2002, 100931)
        else
            act(2002, 100930)
        end
    end
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, FALSE, FALSE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function FourWayAttackRight_Activate()
    SetInterruptType(INTERRUPT_FINDATTACK)
    return 
end

function FourWayAttackStart_onUpdate()
    local r1 = "W_AttackRightLight1"
    local b1 = "W_AttackBothLight1"
    local r2 = "W_FourWayAttackHeavy"
    local b2 = "W_FourWayAttackHeavy"
    local sp_kind = env("装備武器特殊カテゴリ番号取得", c_SwordArtsHand)
    if sp_kind == 263 or sp_kind == 277 or sp_kind == 755 then
        r1 = "W_FourWayAttackLight"
        b1 = "W_FourWayAttackLight"
    end
    if GetVariable("IsLockon") == true and IsNodeActive("Move_Upper Selector") == TRUE and env(301, 1) == TRUE then
        local angle = GetVariable("RollingAngle")
        local front, back, left, right = false
        if 135 < math.abs(angle) then
            back = true
        elseif 45 < angle then
            right = true
        elseif angle < -45 then
            left = true
        else
            front = true
        end
        SetVariable("EnableTAE_FourWayAttackStartFront", front)
        SetVariable("EnableTAE_FourWayAttackStartBack", back)
        SetVariable("EnableTAE_FourWayAttackStartLeft", left)
        SetVariable("EnableTAE_FourWayAttackStartRight", right)
        if 0 <= angle then
            SetVariable("FourWayAttackStartDirection", 1)
        else
            SetVariable("FourWayAttackStartDirection", 0)
        end
        SetVariable("FourWayAttackStartAngle", angle)
    end
    local rolling_angle = GetVariable("CircleStepAngle")
    local addratio = 0.300000011920929
    local endratio = 1
    act(2001, math.abs(1 + addratio * math.abs(math.sin(math.rad(2 * rolling_angle)))))
    if SwordArtsCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, FALSE, TRUE, TRUE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function FourWayAttackStart_SelfTrans_onUpdate()
    local r1 = "W_AttackRightLight1"
    local b1 = "W_AttackBothLight1"
    local r2 = "W_FourWayAttackHeavy"
    local b2 = "W_FourWayAttackHeavy"
    local sp_kind = env("装備武器特殊カテゴリ番号取得", c_SwordArtsHand)
    if sp_kind == 263 or sp_kind == 277 or sp_kind == 755 then
        r1 = "W_FourWayAttackLight"
        b1 = "W_FourWayAttackLight"
    end
    local rolling_angle = GetVariable("CircleStepAngle")
    local addratio = 0.300000011920929
    local endratio = 1
    act(2001, math.abs(1 + addratio * math.abs(math.sin(math.rad(2 * rolling_angle)))))
    if SwordArtsCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", b1, b2, FALSE, TRUE, TRUE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function FourWayAttackLight_onUpdate()
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE, TRUE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function FourWayAttackHeavy_onUpdate()
    local hand = HAND_RIGHT
    local style = c_Style
    
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	if sp_kind == 754 then
        act(2001, 2)
    end	
	
	if sp_kind == 755 then
        act(2001, 1.5)
    end		
	
    if SwordArtsCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE, TRUE, GEN_TRANS_LEFT) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function GatlingStanceRightNoSync_Activate()
    SetInterruptType(INTERRUPT_FINDATTACK)
    return 
end

function GatlingStanceRightStart_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 90, 90)
    end
    if GatlingStanceCommonFunction(blend_type, TRUE) == TRUE then
        return 
    elseif env(1116, 100330) == TRUE and (env(1108, ACTION_ARM_L2) < 200 or env(1107, ACTION_ARM_L2) == TRUE) then
        ExecEventHalfBlend(Event_GatlingStanceRightEnd, blend_type)
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEventHalfBlendNoReset(Event_GatlingStanceRightLoop, blend_type)
        if GetVariable("LocomotionState") == 1 then
            ExecEvent("W_Move")
        end
        return 
    elseif HalfBlendLowerCommonFunction(Event_GatlingStanceRightStart, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function GatlingStanceRightLoop_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 90, 90)
    end
    if GatlingStanceCommonFunction(blend_type, TRUE) == TRUE then
        return 
    elseif env(1108, ACTION_ARM_L2) <= 0 or env(1107, ACTION_ARM_L2) == TRUE then
        ExecEventHalfBlend(Event_GatlingStanceRightEnd, blend_type)
        return 
    elseif HalfBlendLowerCommonFunction(Event_GatlingStanceRightLoop, lower_state, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function GatlingStanceRightEnd_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 90, 90)
    end
    if GatlingStanceCommonFunction(blend_type, FALSE) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        return 
    elseif HalfBlendLowerCommonFunction(Event_GatlingStanceRightEnd, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function GatlingStanceRightFireStart_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE and env(301, 1) == FALSE then
        act("ロックオン時システム旋回不可角度", 90, 90)
    end
    if GetVariable("IsLockon") == true then
        if IsLowerQuickTurn() == TRUE then
            SetVariable("LookAtTwist60_NewTargetGain", 1)
            SetVariable("LookAtTwist70_NewTargetGain", 1)
            SetVariable("LookAtTwist70_OnGain", 0.300000011920929)
        else
            SetVariable("LookAtTwist60_NewTargetGain", 0.200000002980232)
            SetVariable("LookAtTwist70_NewTargetGain", 0.200000002980232)
            SetVariable("LookAtTwist70_OnGain", 0.300000011920929)
        end
    else
        SetVariable("LookAtTwist60_NewTargetGain", 0.5)
        SetVariable("LookAtTwist70_NewTargetGain", 0.400000005960464)
        SetVariable("LookAtTwist70_OnGain", 0.300000011920929)
    end
    local can_fire = FALSE
    if 0 < env(1108, ACTION_ARM_L2) then
        can_fire = TRUE
    end
    if GatlingStanceCommonFunction(blend_type, can_fire) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_GatlingStanceRightFireStart, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function GatlingStanceRightFireStartLeft_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 15, 15)
    end
    if GetVariable("IsLockon") == true then
        SetVariable("LookAtTwist60_NewTargetGain", 0.100000001490116)
        SetVariable("LookAtTwist70_NewTargetGain", 0.100000001490116)
    else
        SetVariable("LookAtTwist60_NewTargetGain", 0.899999976158142)
        SetVariable("LookAtTwist70_NewTargetGain", 0.200000002980232)
    end
    local can_fire = FALSE
    if 0 < env(1108, ACTION_ARM_L2) then
        can_fire = TRUE
    end
    if GatlingStanceCommonFunction(blend_type, can_fire) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        SetArtsGeneratorTransitionIndex(GEN_TRANS_LEFT, TRUE)
        return 
    elseif HalfBlendLowerCommonFunction(Event_GatlingStanceRightFireStartLeft, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function WeaponChangeStart_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if WeaponChangeCommonFunction(blend_type) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEventHalfBlendNoReset(Event_WeaponChangeEnd, blend_type)
        return 
    elseif HalfBlendLowerCommonFunction(Event_WeaponChangeStartMirror, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function WeaponChangeEnd_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if WeaponChangeCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_WeaponChangeEndMirror, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function HandChangeStart_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if HandChangeCommonFunction(blend_type) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEventHalfBlendNoReset(Event_HandChangeEnd, blend_type)
        return 
    elseif HalfBlendLowerCommonFunction(Event_HandChangeStartMirror, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function HandChangeEnd_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if HandChangeCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_HandChangeEndMirror, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function QuickItemEnchantNormal_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if QuickItemCommonFunction(g_r1, g_r2, g_l1, g_l2, g_b1, g_b2, blend_type, QUICKTYPE_NORMAL) == TRUE then
        return 
    elseif blend_type ~= UPPER and ExecQuickTurn(LOWER) == TRUE then
        return TRUE
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        ClearAttackQueue()
        return 
    elseif HalfBlendLowerCommonFunction(Event_QuickItemEnchantNormal, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function QuickItemEnchantDash_Upper_onActivate()
    act("ロックオン中角度固定解除")
    return 
end

function QuickItemEnchantDash_Upper_onUpdate()
    act("ロックオン中角度固定解除")
    local r1 = "W_AttackRightLight1"
    local r2 = "W_AttackRightHeavy1Start"
    local b1 = "W_AttackBothLight1"
    local b2 = "W_AttackBothHeavy1Start"
    if 1 <= GetVariable("MoveSpeedIndex") then
        r1 = "W_AttackRightLightDash"
        r2 = "W_AttackRightHeavyKick"
        b1 = "W_AttackBothDash"
        b2 = "W_AttackBothHeavyKick"
    end
    local blend_type, lower_state = GetHalfBlendInfo()
    if QuickItemCommonFunction(r1, r2, g_l1, g_l2, b1, b2, blend_type, QUICKTYPE_NORMAL) == TRUE then
        return 
    elseif env(1116, 100220) == FALSE and HalfBlendLowerCommonFunction(Event_DashStop, lower_state, FALSE, FALSE) == TRUE then
        SetVariable("MoveSpeedLevelReal", 0)
        return 
    elseif env(2000) == TRUE then
        ExecEvent("W_Idle")
        return 
    else
        return 
    end
end

function QuickItemEnchantStep_Upper_onUpdate()
    if QuickItemCommonFunction(g_r1, g_r2, g_l1, g_l2, g_b1, g_b2, ALLBODY, QUICKTYPE_NORMAL) == TRUE then
        return 
    else
        return 
    end
end

function QuickItemEnchantAttackRight_Upper_onUpdate()
    if QuickItemCommonFunction(g_r1, g_r2, g_l1, g_l2, g_b1, g_b2, ALLBODY, QUICKTYPE_NORMAL) == TRUE then
        return 
    else
        return 
    end
end

function QuickItemEnchantAttackLeft_Upper_onUpdate()
    if QuickItemCommonFunction(g_r1, g_r2, g_l1, g_l2, g_b1, g_b2, ALLBODY, QUICKTYPE_NORMAL) == TRUE then
        return 
    else
        return 
    end
end

function QuickItemThrowKnifeNormal_Upper_onUpdate()
    if QuickItemCommonFunction(g_r1, g_r2, g_l1, g_l2, g_b1, g_b2, ALLBODY, QUICKTYPE_COMBO) == TRUE then
        return 
    else
        return 
    end
end

function QuickItemThrowKnifeDash_Upper_onActivate()
    act("ロックオン中角度固定解除")
    return 
end

function QuickItemThrowKnifeDash_Upper_onUpdate()
    act("ロックオン中角度固定解除")
    if QuickItemCommonFunction(g_r1, g_r2, g_l1, g_l2, g_b1, g_b2, ALLBODY, QUICKTYPE_COMBO) == TRUE then
        return 
    else
        return 
    end
end

function QuickItemThrowKnifeStep_Upper_onUpdate()
    if QuickItemCommonFunction(g_r1, g_r2, g_l1, g_l2, g_b1, g_b2, ALLBODY, QUICKTYPE_COMBO) == TRUE then
        return 
    else
        return 
    end
end

function QuickItemThrowKnifeAttackRight_Upper_onUpdate()
    if QuickItemCommonFunction(g_r1, g_r2, g_l1, g_l2, g_b1, g_b2, ALLBODY, QUICKTYPE_COMBO) == TRUE then
        return 
    else
        return 
    end
end

function QuickItemThrowKnifeAttackRight2_Upper_onUpdate()
    if QuickItemCommonFunction(g_r1, g_r2, g_l1, g_l2, g_b1, g_b2, ALLBODY, QUICKTYPE_ATTACK) == TRUE then
        return 
    else
        return 
    end
end

function QuickItemThrowKnifeAttackLeft_Upper_onUpdate()
    if QuickItemCommonFunction(g_r1, g_r2, g_l1, g_l2, g_b1, g_b2, ALLBODY, QUICKTYPE_COMBO) == TRUE then
        return 
    else
        return 
    end
end

function QuickItemThrowKnifeAttackLeft2_Upper_onUpdate()
    if QuickItemCommonFunction(g_r1, g_r2, g_l1, g_l2, g_b1, g_b2, ALLBODY, QUICKTYPE_ATTACK) == TRUE then
        return 
    else
        return 
    end
end

function Item_Activate()
    ActivateRightArmAdd(START_FRAME_NONE)
    return 
end

function Item_Update()
    UpdateRightArmAdd()
    return 
end

function NormalItem_Upper_Activate()
    local upper_state = GetVariable("UpperDefaultState02")
    if upper_state == ITEMDRINKSTART_DEF2 or upper_state == ITEMDRINKSTARTMP_DEF2 then
        SetInterruptType(INTERRUPT_USEITEM)
    end
    return 
end

function ItemRecover_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemRecover, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemWeaponEnchant_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemWeaponEnchant, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemThrowKnife_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemThrowKnife, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemThrowBottle_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemThrowBottle, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemMeganeStart_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEventHalfBlend(Event_ItemMeganeLoop, blend_type)
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemMeganeStart, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemMeganeLoop_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemMeganeLoop, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemMeganeEnd_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemMeganeEnd, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemWeaponRepair_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemWeaponRepair, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemSoul_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemSoul, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemMessage_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemMessage, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemPray_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemPray, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemTrap_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemTrap, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemDrinkStart_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif env(301, 0) == TRUE then
        ExecEventHalfBlendNoReset(Event_ItemDrinking, blend_type)
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemDrinkStart, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function DragonHeadStartBefore_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEventHalfBlendNoReset(Event_DragonHeadEndBefore, blend_type)
        return 
    elseif HalfBlendLowerCommonFunction(Event_DragonHeadStartBefore, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function DragonHeadEndBefore_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_DragonHeadEndBefore, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function DragonHeadStartAfter_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEventHalfBlendNoReset(Event_DragonHeadLoopAfter, blend_type)
        return 
    elseif HalfBlendLowerCommonFunction(Event_DragonHeadStartAfter, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function DragonHeadLoopAfter_Upper_onUpdate()
    local dT = GetDeltaTime()
    dash_dt_sum = dash_dt_sum + dT
    if 0.100000001490116 < dash_dt_sum then
        dash_dt_sum = 0
        act(1001, -1)
    end
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif env(1108, ACTION_ARM_USE_ITEM) <= 0 then
        ExecEventHalfBlend(Event_DragonHeadEndAfter, blend_type)
    elseif env(1001) <= 0 then
        ExecEventHalfBlend(Event_DragonHeadEndAfter, blend_type)
    end
    if HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_DragonHeadLoopAfter, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function DragonHeadEndAfter_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_DragonHeadEndAfter, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function DragonHeadStartAfterLVL2_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEventHalfBlendNoReset(Event_DragonHeadLoopAfterLVL2, blend_type)
        return 
    elseif HalfBlendLowerCommonFunction(Event_DragonHeadStartAfterLVL2, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function DragonHeadLoopAfterLVL2_Upper_onUpdate()
    local dT = GetDeltaTime()
    dash_dt_sum = dash_dt_sum + dT
    if 0.0649999976158142 < dash_dt_sum then
        dash_dt_sum = 0
        act(1001, -1)
    end
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif env(1108, ACTION_ARM_USE_ITEM) <= 0 then
        ExecEventHalfBlend(Event_DragonHeadEndAfterLVL2, blend_type)
    elseif env(1001) <= 0 then
        ExecEventHalfBlend(Event_DragonHeadEndAfterLVL2, blend_type)
    end
    if HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_DragonHeadLoopAfterLVL2, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function DragonHeadEndAfterLVL2_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_DragonHeadEndAfterLVL2, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function DragonFullStartBefore_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEventHalfBlendNoReset(Event_DragonFullEndBefore, blend_type)
        return 
    elseif HalfBlendLowerCommonFunction(Event_DragonFullStartBefore, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function DragonFullEndBefore_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_DragonFullEndBefore, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function DragonFullStartAfter_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_DragonFullStartAfter, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function DragonFullStartAfterLVL2_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_DragonFullStartAfterLVL2, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemDrinkNothing_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemDrinkNothing, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemDrinking_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEventHalfBlendNoReset(Event_ItemDrinkEnd, blend_type)
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemDrinkingMirror, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemDrinkEnd_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemDrinkEnd, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemShockWeaveStart_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemShockWeaveStart, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemShockWeaveEnd_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemShockWeaveEnd, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemDrinkStartMP_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif env(301, 0) == TRUE then
        ExecEventHalfBlendNoReset(Event_ItemDrinkingMP, blend_type)
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemDrinkStartMP, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemDrinkingMP_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEventHalfBlendNoReset(Event_ItemDrinkEndMP, blend_type)
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemDrinkingMPMirror, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemDrinkEndMP_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemDrinkEndMP, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemDrinkNothingMP_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemDrinkNothingMP, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemDrinkStartSake_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif env(301, 0) == TRUE then
        ExecEventHalfBlendNoReset(Event_ItemDrinkingSake, blend_type)
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemDrinkStartSake, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemDrinkingSake_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEventHalfBlendNoReset(Event_ItemDrinkEndSake, blend_type)
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemDrinkingSakeMirror, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemDrinkEndSake_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemDrinkEndSake, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemDrinkEmpty_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemDrinkEmpty, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemBackBottle_Upper_onUpdate()
    act("ロックオン中角度固定解除")
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif lower_state == LOWER_IDLE and env(301, 0) == TRUE then
        ExecEventAllBody("W_Idle")
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemBackBottle, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemChameleon_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemChameleon, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemOldMonk_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemOldMonk, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemInvalid_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if ItemCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_ItemInvalid, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemLadderRecoverRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_RIGHT)
    if LadderItemCommonFunction(HAND_STATE_RIGHT, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemLadderSoulRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_RIGHT)
    if LadderItemCommonFunction(HAND_STATE_RIGHT, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemLadderDrinkStartRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_RIGHT)
    if LadderItemCommonFunction(HAND_STATE_RIGHT, TRUE) == TRUE then
        return 
    elseif env(301, 0) == TRUE then
        ExecEvent("W_ItemLadderDrinkingRight")
        return 
    else
        return 
    end
end

function ItemLadderDrinkingRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_RIGHT)
    if LadderItemCommonFunction(HAND_STATE_RIGHT, TRUE) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEvent("W_ItemLadderDrinkEndRight")
        return 
    else
        return 
    end
end

function ItemLadderDrinkEndRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_RIGHT)
    if LadderItemCommonFunction(HAND_STATE_RIGHT, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemLadderDrinkStartMPRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_RIGHT)
    if LadderItemCommonFunction(HAND_STATE_RIGHT, TRUE) == TRUE then
        return 
    elseif env(301, 0) == TRUE then
        ExecEvent("W_ItemLadderDrinkingMPRight")
        return 
    else
        return 
    end
end

function ItemLadderDrinkingMPRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_RIGHT)
    if LadderItemCommonFunction(HAND_STATE_RIGHT, TRUE) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEvent("W_ItemLadderDrinkEndMPRight")
        return 
    else
        return 
    end
end

function ItemLadderDrinkEndMPRight_onUpdate()
    ItemLadderDrinkEndRight_onUpdate()
    return 
end

function ItemLadderDrinkNothingMPRight_onUpdate()
    ItemLadderDrinkNothingRight_onUpdate()
    return 
end

function ItemLadderDrinkStartSakeRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_RIGHT)
    if LadderItemCommonFunction(HAND_STATE_RIGHT, TRUE) == TRUE then
        return 
    elseif env(301, 0) == TRUE then
        ExecEvent("W_ItemLadderDrinkingSakeRight")
        return 
    else
        return 
    end
end

function ItemLadderDrinkingSakeRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_RIGHT)
    if LadderItemCommonFunction(HAND_STATE_RIGHT, TRUE) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEvent("W_ItemLadderDrinkEndSakeRight")
        return 
    else
        return 
    end
end

function ItemLadderDrinkEndSakeRight_onUpdate()
    ItemLadderDrinkEndRight_onUpdate()
    return 
end

function ItemLadderDrinkEmptyRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_RIGHT)
    if LadderItemCommonFunction(HAND_STATE_RIGHT, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemLadderDrinkNothingRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_RIGHT)
    if LadderItemCommonFunction(HAND_STATE_RIGHT, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemLadderInvalidRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_RIGHT)
    if LadderItemCommonFunction(HAND_STATE_RIGHT, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemLadderRecoverLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_LEFT)
    if LadderItemCommonFunction(HAND_STATE_LEFT, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemLadderSoulLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_LEFT)
    if LadderItemCommonFunction(HAND_STATE_LEFT, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemLadderDrinkStartLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_LEFT)
    if LadderItemCommonFunction(HAND_STATE_LEFT, TRUE) == TRUE then
        return 
    elseif env(301, 0) == TRUE then
        ExecEvent("W_ItemLadderDrinkingLeft")
        return 
    else
        return 
    end
end

function ItemLadderDrinkingLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_LEFT)
    if LadderItemCommonFunction(HAND_STATE_LEFT, TRUE) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEvent("W_ItemLadderDrinkEndLeft")
        return 
    else
        return 
    end
end

function ItemLadderDrinkEndLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_LEFT)
    if LadderItemCommonFunction(HAND_STATE_LEFT, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemLadderDrinkStartMPLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_LEFT)
    if LadderItemCommonFunction(HAND_STATE_LEFT, TRUE) == TRUE then
        return 
    elseif env(301, 0) == TRUE then
        ExecEvent("W_ItemLadderDrinkingMPLeft")
        return 
    else
        return 
    end
end

function ItemLadderDrinkingMPLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_LEFT)
    if LadderItemCommonFunction(HAND_STATE_LEFT, TRUE) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEvent("W_ItemLadderDrinkEndMPLeft")
        return 
    else
        return 
    end
end

function ItemLadderDrinkEndMPLeft_onUpdate()
    ItemLadderDrinkEndLeft_onUpdate()
    return 
end

function ItemLadderDrinkNothingMPLeft_onUpdate()
    ItemLadderDrinkNothingLeft_onUpdate()
    return 
end

function ItemLadderDrinkEmptyLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_LEFT)
    if LadderItemCommonFunction(HAND_STATE_LEFT, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemLadderDrinkNothingLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_LEFT)
    if LadderItemCommonFunction(HAND_STATE_LEFT, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ItemLadderDrinkStartSakeLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_LEFT)
    if LadderItemCommonFunction(HAND_STATE_LEFT, TRUE) == TRUE then
        return 
    elseif env(301, 0) == TRUE then
        ExecEvent("W_ItemLadderDrinkingSakeLeft")
        return 
    else
        return 
    end
end

function ItemLadderDrinkingSakeLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_LEFT)
    if LadderItemCommonFunction(HAND_STATE_LEFT, TRUE) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEvent("W_ItemLadderDrinkEndSakeLeft")
        return 
    else
        return 
    end
end

function ItemLadderDrinkEndSakeLeft_onUpdate()
    ItemLadderDrinkEndLeft_onUpdate()
    return 
end

function ItemLadderInvalidLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_LEFT)
    if LadderItemCommonFunction(HAND_STATE_LEFT, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function Gesture_Activate()
    ActivateRightArmAdd(START_FRAME_NONE)
    return 
end

function Gesture_Update()
    UpdateRightArmAdd()
    return 
end

function GestureStart_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if GestureCommonFunction(blend_type) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_GestureStart, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function GestureLoopStart_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if GestureLoopCommonFunction(blend_type, lower_state, TRUE) == TRUE then
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        ExecEventHalfBlend(Event_GestureLoop, blend_type)
        return 
    elseif HalfBlendLowerCommonFunction(Event_GestureLoopStart, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function GestureLoop_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if GestureLoopCommonFunction(blend_type, lower_state, FALSE) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_GestureLoop, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function GestureEnd_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if GestureCommonFunction() == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_GestureEnd, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function Magic_Upper_Activate()
    if IsAttackMagic(GetVariable("IndexMagicType")) then
        SetInterruptType(INTERRUPT_FINDATTACK)
    end
    return 
end

function MagicRight_Upper_Activate()
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        SetAttackHand(HAND_LEFT)
    else
        SetAttackHand(HAND_RIGHT)
    end
    return 
end

function MagicLeft_Upper_Activate()
    SetAttackHand(HAND_LEFT)
    return 
end

function MagicLaunchRight_Upper_onActivate()
    act("魔法ID切り替え無効")
    return 
end

function MagicLaunchRight_Upper_onUpdate()
    act("魔法ID切り替え無効")
    local blend_type, lower_state = GetHalfBlendInfo()
    if MagicCommonFunction(blend_type, QUICKTYPE_NORMAL) == TRUE then
        return 
    elseif blend_type ~= UPPER and ExecQuickTurn(LOWER) == TRUE then
        return TRUE
    elseif env(313) == TRUE or env("アニメ終了か", 1) == TRUE then
        local style = c_Style
        local hand = HAND_RIGHT
        if style == HAND_LEFT_BOTH then
            hand = HAND_LEFT
        end
        local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
        local button = ACTION_ARM_R1
        
        if sp_kind == 178 or sp_kind == 207 or sp_kind == 217 or sp_kind == 220 or sp_kind == 234 or sp_kind == 257 then
            button = ACTION_ARM_R2
        end
        
        if IsHoldMagic() == TRUE then
            if 0 < env(1108, button) then
                -- Generic Hold Magic
                local magic_type = env(227)
                
                if magic_type == 0 or magic_type == 5 or magic_type == 8 or magic_type == 9 or magic_type == 12 or magic_type == 18 or magic_type == 19 or magic_type == 22 or magic_type == 25 or magic_type == 31 or magic_type == 32 or magic_type == 33 or magic_type == 35 or magic_type == 36 or magic_type == 37 or magic_type == 39 or magic_type == 40 or magic_type == 41 or magic_type == 42 or magic_type == 43 or magic_type == 44 or magic_type == 47 then
                    ExecEventHalfBlend("W_Idle", blend_type)
                else
                    ExecEventHalfBlend(Event_MagicLoopRight, blend_type)
                end
                
                return 
            else
                ExecEventHalfBlend(Event_MagicFireRight, blend_type)
                return 
            end
        elseif IsQuickMagic() == TRUE then
            ExecEventHalfBlend(Event_QuickMagicFireRightNormal, blend_type)
            return 
        else
            ExecEventHalfBlend(Event_MagicFireRight, blend_type)
            return 
        end
    elseif HalfBlendLowerCommonFunction(Event_MagicLaunchRight, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function MagicLaunchRightSA_Upper_onActivate()
    act("魔法ID切り替え無効")
    return 
end

function MagicLaunchRightSA_Upper_onUpdate()
    act("魔法ID切り替え無効")
    local blend_type, lower_state = GetHalfBlendInfo()
    if MagicCommonFunction(blend_type, QUICKTYPE_NORMAL) == TRUE then
        return 
    elseif blend_type ~= UPPER and ExecQuickTurn(LOWER) == TRUE then
        return TRUE
    elseif env(313) == TRUE or env("アニメ終了か", 1) == TRUE then
        if IsHoldMagic() == TRUE then
            if 0 < env(1108, ACTION_ARM_L2) then
                -- Generic Hold Magic
                local magic_type = env(227)
                if magic_type == 0 or magic_type == 5 or magic_type == 8 or magic_type == 9 or magic_type == 12 or magic_type == 18 or magic_type == 19 or magic_type == 22 or magic_type == 25 or magic_type == 31 or magic_type == 32 or magic_type == 33 or magic_type == 35 or magic_type == 36 or magic_type == 37 or magic_type == 39 or magic_type == 40 or magic_type == 41 or magic_type == 42 or magic_type == 43 or magic_type == 44 or magic_type == 47 then
                    ExecEventHalfBlend("W_Idle", blend_type)
                else
                    ExecEventHalfBlend(Event_MagicLoopRightSA, blend_type)
                end

                return 
            else
                ExecEventHalfBlend(Event_MagicFireRight, blend_type)
                return 
            end
        else
            ExecEventHalfBlend(Event_MagicFireRight, blend_type)
            return 
        end
    elseif HalfBlendLowerCommonFunction(Event_MagicLaunchRightSA, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function MagicLoopRight_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 45, 45)
    end
    if MagicCommonFunction(blend_type, QUICKTYPE_NORMAL) == TRUE then
        return 
    end
    local magic_type = env(227)
    if 254 <= magic_type then
        ExecEventHalfBlend(Event_MagicFireRight, blend_type)
        return 
    end
    local style = c_Style
    local hand = HAND_RIGHT
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
    local button = ACTION_ARM_R1
    if sp_kind == 178 or sp_kind == 207 or sp_kind == 217 or sp_kind == 220 or sp_kind == 234 or sp_kind == 257 then
        button = ACTION_ARM_R2
    end
    if env(1108, button) <= 0 then
        ExecEventHalfBlend(Event_MagicFireRight, blend_type)
        return 
    elseif HalfBlendLowerCommonFunction(Event_MagicLoopRight, lower_state, FALSE, FALSE) == TRUE then
        return 
    elseif magic_type == MAGIC_REQUEST_SLASHHOLD and env(313) == TRUE then
        ExecEventHalfBlend(Event_MagicLoopRightLvl2, blend_type)
    end
    return 
end

function MagicLoopRightSA_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 45, 45)
    end
    if MagicCommonFunction(blend_type, QUICKTYPE_NORMAL) == TRUE then
        return 
    elseif 254 <= env(227) then
        ExecEventHalfBlend(Event_MagicFireRight, blend_type)
        return 
    elseif env(1108, ACTION_ARM_L2) <= 0 then
        ExecEventHalfBlend(Event_MagicFireRight, blend_type)
        return 
    elseif HalfBlendLowerCommonFunction(Event_MagicLoopRightSA, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function MagicLoopRightLvl2_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 45, 45)
    end
    if MagicCommonFunction(blend_type, QUICKTYPE_NORMAL) == TRUE then
        return 
    elseif 254 <= env(227) then
        ExecEventHalfBlend(Event_MagicFireRightLvl2, blend_type)
        return 
    end
    local style = c_Style
    local hand = HAND_RIGHT
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
    local button = ACTION_ARM_R1
    if sp_kind == 178 or sp_kind == 207 or sp_kind == 217 or sp_kind == 220 or sp_kind == 234 or sp_kind == 257 then
        button = ACTION_ARM_R2
    end
    if env(1108, button) <= 0 then
        ExecEventHalfBlend(Event_MagicFireRightLvl2, blend_type)
        return 
    elseif HalfBlendLowerCommonFunction(Event_MagicLoopRightLvl2, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function MagicFireRight_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_TURN or lower_state == LOWER_END_TURN then
        act("魔法ID切り替え無効")
    end
    SetVariable("IndexThrowHand", HAND_RIGHT)
    ApplyEffectsAfterCast()
    if MagicCommonFunction(ALLBODY, QUICKTYPE_NORMAL) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_MagicFireRight, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function MagicFireRight2_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_TURN or lower_state == LOWER_END_TURN then
        act("魔法ID切り替え無効")
    end
    SetVariable("IndexThrowHand", HAND_RIGHT)
    ApplyEffectsAfterCast()
    if MagicCommonFunction(ALLBODY, QUICKTYPE_NORMAL) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_MagicFireRight2, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function MagicFireRight3_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_TURN or lower_state == LOWER_END_TURN then
        act("魔法ID切り替え無効")
    end
    SetVariable("IndexThrowHand", HAND_RIGHT)
    ApplyEffectsAfterCast()
    if MagicCommonFunction(ALLBODY, QUICKTYPE_NORMAL) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_MagicFireRight2, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function MagicFireRightLvl2_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_TURN or lower_state == LOWER_END_TURN then
        act("魔法ID切り替え無効")
    end
    SetVariable("IndexThrowHand", HAND_RIGHT)
    ApplyEffectsAfterCast()
    if MagicCommonFunction(ALLBODY, QUICKTYPE_NORMAL) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_MagicFireRightLvl2, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function MagicLaunchLeft_Upper_onActivate()
    act("魔法ID切り替え無効")
    return 
end

function MagicLaunchLeft_Upper_onUpdate()
    act("魔法ID切り替え無効")
    local blend_type, lower_state = GetHalfBlendInfo()
    if MagicCommonFunction(blend_type, QUICKTYPE_NORMAL) == TRUE then
        return 
    elseif blend_type ~= UPPER and ExecQuickTurn(LOWER) == TRUE then
        return TRUE
    elseif env(313) == TRUE or env("アニメ終了か", 1) == TRUE then
        local sp_kind = env("装備武器特殊カテゴリ番号取得", HAND_LEFT)
        local button = ACTION_ARM_L1
        if sp_kind == 178 or sp_kind == 207 or sp_kind == 217 or sp_kind == 220 or sp_kind == 234 or sp_kind == 257 then
            button = ACTION_ARM_L2
        end
        if IsHoldMagic() == TRUE then
            if 0 < env(1108, button) then
                -- Generic Hold Magic
                local magic_type = env(227)
                if magic_type == 0 or magic_type == 5 or magic_type == 8 or magic_type == 9 or magic_type == 12 or magic_type == 18 or magic_type == 19 or magic_type == 22 or magic_type == 25 or magic_type == 31 or magic_type == 32 or magic_type == 33 or magic_type == 35 or magic_type == 36 or magic_type == 37 or magic_type == 39 or magic_type == 40 or magic_type == 41 or magic_type == 42 or magic_type == 43 or magic_type == 44 or magic_type == 47 then
                    ExecEventHalfBlend("W_Idle", blend_type)
                else
                    ExecEventHalfBlend(Event_MagicLoopLeft, blend_type)
                end

                return 
            else
                ExecEventHalfBlend(Event_MagicFireLeft, blend_type)
                return 
            end
        elseif IsQuickMagic() == TRUE then
            ExecEventHalfBlend(Event_QuickMagicFireLeftNormal, blend_type)
            return 
        else
            ExecEventHalfBlend(Event_MagicFireLeft, blend_type)
            return 
        end
    elseif HalfBlendLowerCommonFunction(Event_MagicLaunchLeft, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function MagicLaunchLeftSA_Upper_onActivate()
    act("魔法ID切り替え無効")
    return 
end

function MagicLaunchLeftSA_Upper_onUpdate()
    act("魔法ID切り替え無効")
    local blend_type, lower_state = GetHalfBlendInfo()
    if MagicCommonFunction(blend_type, QUICKTYPE_NORMAL) == TRUE then
        return 
    elseif blend_type ~= UPPER and ExecQuickTurn(LOWER) == TRUE then
        return TRUE
    elseif env(313) == TRUE or env("アニメ終了か", 1) == TRUE then
        if IsHoldMagic() == TRUE then
            if 0 < env(1108, ACTION_ARM_L2) then
                -- Generic Hold Magic
                local magic_type = env(227)
                if magic_type == 0 or magic_type == 5 or magic_type == 8 or magic_type == 9 or magic_type == 12 or magic_type == 18 or magic_type == 19 or magic_type == 22 or magic_type == 25 or magic_type == 31 or magic_type == 32 or magic_type == 33 or magic_type == 35 or magic_type == 36 or magic_type == 37 or magic_type == 39 or magic_type == 40 or magic_type == 41 or magic_type == 42 or magic_type == 43 or magic_type == 44 or magic_type == 47 then
                    ExecEventHalfBlend("W_Idle", blend_type)
                else
                    ExecEventHalfBlend(Event_MagicLoopLeftSA, blend_type)
                end
                
                return 
            else
                ExecEventHalfBlend(Event_MagicFireLeft, blend_type)
                return 
            end
        else
            ExecEventHalfBlend(Event_MagicFireLeft, blend_type)
            return 
        end
    elseif HalfBlendLowerCommonFunction(Event_MagicLaunchLeftSA, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function MagicLoopLeft_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 45, 45)
    end
    if MagicCommonFunction(blend_type, QUICKTYPE_NORMAL) == TRUE then
        return 
    end
    local magic_type = env(227)
    if 254 <= magic_type then
        ExecEventHalfBlend(Event_MagicFireRight, blend_type)
        return 
    end
    local sp_kind = env("装備武器特殊カテゴリ番号取得", HAND_LEFT)
    local button = ACTION_ARM_L1
    if sp_kind == 178 or sp_kind == 207 or sp_kind == 217 or sp_kind == 220 or sp_kind == 234 or sp_kind == 257 then
        button = ACTION_ARM_L2
    end
    if env(1108, button) <= 0 then
        ExecEventHalfBlend(Event_MagicFireLeft, blend_type)
        return 
    elseif HalfBlendLowerCommonFunction(Event_MagicLoopLeft, lower_state, FALSE, FALSE) == TRUE then
        return 
    elseif magic_type == MAGIC_REQUEST_SLASHHOLD and env(313) == TRUE then
        ExecEventHalfBlend(Event_MagicLoopLeftLvl2, blend_type)
    end
    return 
end

function MagicLoopLeftSA_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 45, 45)
    end
    if MagicCommonFunction(blend_type, QUICKTYPE_NORMAL) == TRUE then
        return 
    elseif 254 <= env(227) then
        ExecEventHalfBlend(Event_MagicFireLeft, blend_type)
        return 
    elseif env(1108, ACTION_ARM_L2) <= 0 then
        ExecEventHalfBlend(Event_MagicFireLeft, blend_type)
        return 
    elseif HalfBlendLowerCommonFunction(Event_MagicLoopLeftSA, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function MagicLoopLeftLvl2_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 45, 45)
    end
    if MagicCommonFunction(blend_type, QUICKTYPE_NORMAL) == TRUE then
        return 
    elseif 254 <= env(227) then
        ExecEventHalfBlend(Event_MagicFireLeftLvl2, blend_type)
        return 
    end
    local sp_kind = env("装備武器特殊カテゴリ番号取得", HAND_LEFT)
    local button = ACTION_ARM_L1
    if sp_kind == 178 or sp_kind == 207 or sp_kind == 217 or sp_kind == 220 or sp_kind == 234 or sp_kind == 257 then
        button = ACTION_ARM_L2
    end
    if env(1108, button) <= 0 then
        ExecEventHalfBlend(Event_MagicFireLeftLvl2, blend_type)
        return 
    elseif HalfBlendLowerCommonFunction(Event_MagicLoopLeftLvl2, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function MagicFireLeft_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_TURN or lower_state == LOWER_END_TURN then
        act("魔法ID切り替え無効")
    end
    SetVariable("IndexThrowHand", HAND_LEFT)
    ApplyEffectsAfterCast()
    if MagicCommonFunction(ALLBODY, QUICKTYPE_NORMAL) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_MagicFireLeft, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function MagicFireLeft2_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_TURN or lower_state == LOWER_END_TURN then
        act("魔法ID切り替え無効")
    end
    SetVariable("IndexThrowHand", HAND_LEFT)
    ApplyEffectsAfterCast()
    if MagicCommonFunction(ALLBODY, QUICKTYPE_NORMAL) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_MagicFireLeft2, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function MagicFireLeft3_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_TURN or lower_state == LOWER_END_TURN then
        act("魔法ID切り替え無効")
    end
    SetVariable("IndexThrowHand", HAND_LEFT)
    ApplyEffectsAfterCast()
    if MagicCommonFunction(ALLBODY, QUICKTYPE_NORMAL) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_MagicFireLeft2, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function MagicFireLeftLvl2_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_TURN or lower_state == LOWER_END_TURN then
        act("魔法ID切り替え無効")
    end
    SetVariable("IndexThrowHand", HAND_LEFT)
    ApplyEffectsAfterCast()
    if MagicCommonFunction(ALLBODY, QUICKTYPE_NORMAL) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_MagicFireLeftLvl2, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function QuickMagicFireRightNormal_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    ApplyEffectsAfterCast()
    if lower_state == LOWER_TURN or lower_state == LOWER_END_TURN then
        act("魔法ID切り替え無効")
    end
    if MagicCommonFunction(blend_type, QUICKTYPE_COMBO) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_QuickMagicFireRightNormal, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function QuickMagicFireRightDash_Upper_onActivate()
    act("ロックオン中角度固定解除")
    return 
end

function QuickMagicFireRightDash_Upper_onUpdate()
    act("ロックオン中角度固定解除")
    ApplyEffectsAfterCast()
    local blend_type, lower_state = GetHalfBlendInfo()
    if lower_state == LOWER_TURN or lower_state == LOWER_END_TURN then
        act("魔法ID切り替え無効")
    end
    if MagicCommonFunction(blend_type, QUICKTYPE_COMBO) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_QuickMagicFireRightDash, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function QuickMagicFireRightStep_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    ApplyEffectsAfterCast()
    if lower_state == LOWER_TURN or lower_state == LOWER_END_TURN then
        act("魔法ID切り替え無効")
    end
    if MagicCommonFunction(blend_type, QUICKTYPE_COMBO) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_QuickMagicFireRightStep, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function QuickMagicFireRightAttackRight_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    ApplyEffectsAfterCast()
    if lower_state == LOWER_TURN or lower_state == LOWER_END_TURN then
        act("魔法ID切り替え無効")
    end
    if MagicCommonFunction(blend_type, QUICKTYPE_COMBO) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_QuickMagicFireRightAttackRight, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function QuickMagicFireRightAttackRight2_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    ApplyEffectsAfterCast()
    if lower_state == LOWER_TURN or lower_state == LOWER_END_TURN then
        act("魔法ID切り替え無効")
    end
    if MagicCommonFunction(blend_type, QUICKTYPE_ATTACK) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_QuickMagicFireRightAttackRight2, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function QuickMagicFireRightAttackLeft_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    ApplyEffectsAfterCast()
    if lower_state == LOWER_TURN or lower_state == LOWER_END_TURN then
        act("魔法ID切り替え無効")
    end
    if MagicCommonFunction(blend_type, QUICKTYPE_COMBO) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_QuickMagicFireRightAttackLeft, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function QuickMagicFireRightAttackLeft2_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    ApplyEffectsAfterCast()
    if lower_state == LOWER_TURN or lower_state == LOWER_END_TURN then
        act("魔法ID切り替え無効")
    end
    if MagicCommonFunction(blend_type, QUICKTYPE_ATTACK) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_QuickMagicFireRightAttackLeft2, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function QuickMagicFireLeftNormal_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    ApplyEffectsAfterCast()
    if lower_state == LOWER_TURN or lower_state == LOWER_END_TURN then
        act("魔法ID切り替え無効")
    end
    if MagicCommonFunction(blend_type, QUICKTYPE_COMBO) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_QuickMagicFireLeftNormal, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function QuickMagicFireLeftDash_Upper_onActivate()
    act("ロックオン中角度固定解除")
    return 
end

function QuickMagicFireLeftDash_Upper_onUpdate()
    act("ロックオン中角度固定解除")
    local blend_type, lower_state = GetHalfBlendInfo()
    ApplyEffectsAfterCast()
    if lower_state == LOWER_TURN or lower_state == LOWER_END_TURN then
        act("魔法ID切り替え無効")
    end
    if MagicCommonFunction(blend_type, QUICKTYPE_COMBO) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_QuickMagicFireLeftDash, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function QuickMagicFireLeftStep_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    ApplyEffectsAfterCast()
    if lower_state == LOWER_TURN or lower_state == LOWER_END_TURN then
        act("魔法ID切り替え無効")
    end
    if MagicCommonFunction(blend_type, QUICKTYPE_COMBO) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_QuickMagicFireLeftStep, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function QuickMagicFireLeftAttackRight_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    ApplyEffectsAfterCast()
    if lower_state == LOWER_TURN or lower_state == LOWER_END_TURN then
        act("魔法ID切り替え無効")
    end
    if MagicCommonFunction(blend_type, QUICKTYPE_COMBO) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_QuickMagicFireLeftAttackRight, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function QuickMagicFireLeftAttackRight2_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    ApplyEffectsAfterCast()
    if lower_state == LOWER_TURN or lower_state == LOWER_END_TURN then
        act("魔法ID切り替え無効")
    end
    if MagicCommonFunction(blend_type, QUICKTYPE_ATTACK) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_QuickMagicFireLeftAttackRight2, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function QuickMagicFireLeftAttackLeft_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    ApplyEffectsAfterCast()
    if lower_state == LOWER_TURN or lower_state == LOWER_END_TURN then
        act("魔法ID切り替え無効")
    end
    if MagicCommonFunction(blend_type, QUICKTYPE_COMBO) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_QuickMagicFireLeftAttackLeft, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function QuickMagicFireLeftAttackLeft2_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    ApplyEffectsAfterCast()
    if lower_state == LOWER_TURN or lower_state == LOWER_END_TURN then
        act("魔法ID切り替え無効")
    end
    if MagicCommonFunction(blend_type, QUICKTYPE_ATTACK) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_QuickMagicFireLeftAttackLeft2, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function MagicInvalidRight_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if MagicCommonFunction(ALLBODY, QUICKTYPE_NORMAL) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_MagicInvalidRightMirror, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function MagicInvalidLeft_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if MagicCommonFunction(ALLBODY, QUICKTYPE_NORMAL) == TRUE then
        return 
    elseif HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_MagicInvalidLeftMirror, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function ThrowBackStab_Activate()
    act("バックスタブ発動")
    local style = c_Style
    
    if style == HAND_LEFT_BOTH then
        SetAttackHand(HAND_LEFT)
    else
        SetAttackHand(HAND_RIGHT)
    end
    return 
end

function ThrowBackStab_onUpdate()
    if env(1112) == FALSE then
        if BackStabCommonFunction() == TRUE then
            return 
        else
            return 
        end
    else
        ResetRequest()
        return 
    end
end

function Throw_Activate()
    ResetRequest()
    SetVariable("MoveSpeedLevelReal", 0)
    SetThrowInvalid()
    local id = env(273)
    local style = c_Style
    if 0 <= id then
        SetVariable("ThrowID", id)
    end
    if IsNodeActive("MagicFireLeft_Upper_Selector", "OneShotFullLeftStart Selector") == TRUE then
        SetAttackHand(HAND_LEFT)
    elseif IsNodeActive("MagicFireRight_Upper_Selector", "OneShotFullRightStart Selector") == TRUE then
        if style == HAND_LEFT_BOTH then
            SetAttackHand(HAND_LEFT)
        else
            SetAttackHand(HAND_RIGHT)
        end
    else
        local style = c_Style
        if style == HAND_LEFT_BOTH then
            SetAttackHand(HAND_LEFT)
        else
            SetAttackHand(HAND_RIGHT)
        end
    end
    SetVariable("ThrowHoldBlendWeight", 0)
    SetVariable("ThrowHolding", false)
    SetVariable("ThrowNoRegistTime", 0)
    
    local hand = HAND_RIGHT
    
    -- Handle weapon hand position
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    else
        hand = HAND_RIGHT
    end
    
    -- Hornet Ring
    if IsHornetRing() == TRUE then
        if env(1116, 112700) == TRUE then
            act(2002, 112710)
        elseif env(1116, 112701) == TRUE then
            act(2002, 112711)
        elseif env(1116, 112702) == TRUE then
            act(2002, 112712)
        elseif env(1116, 112703) == TRUE then
            act(2002, 112713)
        elseif env(1116, 112704) == TRUE then
            act(2002, 112714)
        elseif env(1116, 112705) == TRUE then
            act(2002, 112715)
        end
    end
    
    -- Assassin's Mark
    if IsAssassinsMark() == TRUE then
        if env(225, hand) == WEAPON_CATEGORY_SHORT_SWORD then
            if env(1116, 112720) == TRUE then
                act(2002, 112730)
            elseif env(1116, 112721) == TRUE then
                act(2002, 112731)
            elseif env(1116, 112722) == TRUE then
                act(2002, 112732)
            elseif env(1116, 112723) == TRUE then
                act(2002, 112733)
            elseif env(1116, 112724) == TRUE then
                act(2002, 112734)
            elseif env(1116, 112725) == TRUE then
                act(2002, 112735)
            end
        end
    end
    
    -- Elden Ring
    if IsEldenRing() == TRUE then
        if env(225, hand) == WEAPON_CATEGORY_HALBERD then
            if env(1116, 112740) == TRUE then
                act(2002, 112750)
            elseif env(1116, 112741) == TRUE then
                act(2002, 112751)
            elseif env(1116, 112742) == TRUE then
                act(2002, 112752)
            elseif env(1116, 112743) == TRUE then
                act(2002, 112753)
            elseif env(1116, 112744) == TRUE then
                act(2002, 112754)
            elseif env(1116, 112745) == TRUE then
                act(2002, 112755)
            end
        end
    end
    
    return 
end

function Throw_Update()
    SetThrowInvalid()
    return 
end

function Throw_Deactivate()
    act(139)
    return 
end

function ThrowAtk_onActivate()
    Replanning()
    return 
end

function ThrowAtk_onUpdate()
    if ThrowCommonFunction(FALSE) == TRUE then
        act(139)
        return 
    else
        return 
    end
end

function ThrowDef_onActivate()
    Replanning()
    return 
end

function ThrowDef_onUpdate()
    SetThrowDefBlendWeight()
    if env(276) == TRUE then
        ExecEvent("ThrowDeath")
        return 
    elseif env(277) == TRUE then
        ExecEvent("W_ThrowEscape")
        return 
    elseif ThrowCommonFunction(ESTEP_DOWN) == TRUE then
        act(139)
        return 
    else
        return 
    end
end

function ThrowEscape_onUpdate()
    if ThrowCommonFunction() == TRUE then
        act(139)
        return 
    else
        return 
    end
end

function ThrowDeath_onActivate()
    act(136, THROW_TYPE_DEATH)
    return 
end

function ThrowDeathIdle_onActivate()
    act(136, THROW_TYPE_INVALID)
    return 
end

function Event_Activate()
    ResetEventState()
    ActivateRightArmAdd(START_FRAME_NONE)
    SetVariable("IsEventActivate", true)
    return 
end

function Event_RightArmAddStartFrame_Activate()
    ResetEventState()
    ActivateRightArmAdd(START_FRAME_ALL)
    SetVariable("IsEventActivate", true)
    return 
end

function Event_Update()
    if GetVariable("IsEventActivate") == false then
        UpdateRightArmAdd()
    end
    SetVariable("IsEventActivate", false)
    return 
end

function Event26001_onActivate()
    act(9105, 90)
    return 
end

function Event26001_onUpdate()
    act(9104)
    if env(301, 0) == FALSE then
        act(9102)
    end
    if QuickTurnCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event26011_onActivate()
    act(9105, 90)
    return 
end

function Event26011_onUpdate()
    act(9104)
    if env(301, 0) == FALSE then
        act(9102)
    end
    if QuickTurnCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event26021_onActivate()
    act(9105, 180)
    return 
end

function Event26021_onUpdate()
    act(9104)
    if env(301, 0) == FALSE then
        act(9102)
    end
    if QuickTurnCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event26031_onActivate()
    act(9105, 180)
    return 
end

function Event26031_onUpdate()
    act(9104)
    if env(301, 0) == FALSE then
        act(9102)
    end
    if QuickTurnCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60000_onUpdate()
    act(138, TRUE)
    if EventCommonFunction() == TRUE then
        act(138, FALSE)
        return 
    else
        return 
    end
end

function Event60000_onDeactivate()
    act(138, FALSE)
    return 
end

function Event60001_onUpdate()
    act(138, TRUE)
    if EventCommonFunction() == TRUE then
        act(138, FALSE)
        return 
    else
        return 
    end
end

function Event60001_onDeactivate()
    act(138, FALSE)
    return 
end

function Event60002_onUpdate()
    act(138, TRUE)
    if EventCommonFunction() == TRUE then
        act(138, FALSE)
        return 
    else
        return 
    end
end

function Event60002_onDeactivate()
    act(138, FALSE)
    return 
end

function Event60003_onUpdate()
    act(138, TRUE)
    if EventCommonFunction() == TRUE then
        act(138, FALSE)
        return 
    else
        return 
    end
end

function Event60003_onDeactivate()
    act(138, FALSE)
    return 
end

function Event60010_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60020_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60030_onUpdate()
    act(138, TRUE)
    if EventCommonFunction() == TRUE then
        act(138, FALSE)
        return 
    else
        return 
    end
end

function Event60030_onDeactivate()
    act(138, FALSE)
    return 
end

function Event60040_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60060_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60070_onUpdate()
    act(138, TRUE)
    if EventCommonFunction() == TRUE then
        act(138, FALSE)
        return 
    else
        return 
    end
end

function Event60070_onDeactivate()
    act(138, FALSE)
    return 
end

function Event60080_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60090_onUpdate()
    act(138, TRUE)
    if EventCommonFunction() == TRUE then
        act(138, FALSE)
        return 
    else
        return 
    end
end

function Event60090_onDeactivate()
    act(138, FALSE)
    return 
end

function Event60100_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60160_onUpdate()
    act(138, TRUE)
    if EventCommonFunction() == TRUE then
        act(138, FALSE)
        return 
    else
        return 
    end
end

function Event60160_onDeactivate()
    act(138, FALSE)
    return 
end

function Event60170_onUpdate()
    act(138, TRUE)
    if EventCommonFunction() == TRUE then
        act(138, FALSE)
        return 
    else
        return 
    end
end

function Event60170_onDeactivate()
    act(138, FALSE)
    return 
end

function Event60180_onUpdate()
    act(138, TRUE)
    if EventCommonFunction() == TRUE then
        act(138, FALSE)
        return 
    else
        return 
    end
end

function Event60180_onDeactivate()
    act(138, FALSE)
    return 
end

function Event60190_onUpdate()
    act(138, TRUE)
    if EventCommonFunction() == TRUE then
        act(138, FALSE)
        return 
    else
        return 
    end
end

function Event60190_onDeactivate()
    act(138, FALSE)
    return 
end

function Event60200_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60202_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60210_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60220_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60230_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60231_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60240_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60241_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60250_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60260_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60270_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60370_onUpdate()
    act(138, TRUE)
    if EventCommonFunction() == TRUE then
        act(138, FALSE)
        return 
    else
        return 
    end
end

function Event60380_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60390_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60400_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60410_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60420_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60430_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60440_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60750_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60760_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60780_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60790_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60800_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event60810_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event61000_Upper_onUpdate()
    local blend_type, lower_state = GetHalfBlendInfo()
    if DamageHalfBlendCommonFunction(blend_type) == TRUE then
        return 
    elseif lower_state == LOWER_IDLE then
        act("ロックオン時システム旋回不可角度", 90, 90)
    end
    if HalfBlendUpperCommonFunction(lower_state) == TRUE then
        return 
    elseif HalfBlendLowerCommonFunction(Event_Event61000Mirror, lower_state, FALSE, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function Event63000_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event63010_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event63020_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event63060_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event63070_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event65012_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event65013_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event69000_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event69001_onUpdate()
    act(138, TRUE)
    if EventCommonFunction() == TRUE then
        act(138, FALSE)
        return 
    else
        return 
    end
end

function Event69001_onDeactivate()
    act(138, FALSE)
    return 
end

function Event69002_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event69003_onUpdate()
    act(138, TRUE)
    if EventCommonFunction() == TRUE then
        act(138, FALSE)
        return 
    else
        return 
    end
end

function Event69003_onDeactivate()
    act(138, FALSE)
    return 
end

function Event69010_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event69030_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event69040_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event69050_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event69060_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event69070_onUpdate()
    act(9102)
    return 
end

function Event90360_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90361_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90370_onUpdate()
    act(9102)
    return 
end

function Event90970_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90430_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    elseif env(1117) == TRUE then
        ExecEvent("W_Event90450")
        return 
    else
        return 
    end
end

function Event90460_onUpdate()
    act(9102)
    if IsDead() == TRUE then
        ExecEvent("W_Event90510")
        return 
    elseif DAMAGE_LEVEL_NONE < env(236) then
        ExecEvent("W_Event90500")
        return 
    else
        return 
    end
end

function Event90470_onUpdate()
    Event90460_onUpdate()
    return 
end

function Event90480_onUpdate()
    Event90460_onUpdate()
    return 
end

function Event90490_onUpdate()
    act(9102)
    return 
end

function Event90500_onUpdate()
    Event90460_onUpdate()
    return 
end

function Event90510_onUpdate()
    act(9102)
    return 
end

function Event90550_onUpdate()
    act(9102)
    if IsDead() == TRUE then
        ExecEvent("W_Event90600")
        return 
    elseif DAMAGE_LEVEL_NONE < env(236) then
        ExecEvent("W_Event90590")
        return 
    else
        return 
    end
end

function Event90560_onUpdate()
    Event90550_onUpdate()
    return 
end

function Event90570_onUpdate()
    act(9102)
    if IsDead() == TRUE then
        ExecEvent("W_Event90600")
        return 
    elseif DAMAGE_LEVEL_NONE < env(236) then
        ExecEvent("W_Event90590")
        return 
    elseif env(1117) == TRUE then
        ExecEvent("W_Event90560")
        return 
    else
        return 
    end
end

function Event90580_onUpdate()
    act(9102)
    return 
end

function Event90590_onUpdate()
    Event90550_onUpdate()
    return 
end

function Event90600_onUpdate()
    act(9102)
    return 
end

function Event90610_onUpdate()
    act(9102)
    if IsDead() == TRUE then
        ExecEvent("W_Event90990")
        return 
    elseif DAMAGE_LEVEL_NONE < env(236) then
        ExecEvent("W_Event90930")
        return 
    else
        return 
    end
end

function Event90620_onUpdate()
    Event90610_onUpdate()
    return 
end

function Event90630_onUpdate()
    Event90610_onUpdate()
    return 
end

function Event90640_onUpdate()
    act(9102)
    return 
end

function Event90641_onUpdate()
    act(9102)
    return 
end

function Event90680_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90690_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90960_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90691_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90710_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90720_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90721_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90390_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90400_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    elseif env(1117) == TRUE then
        ExecEvent("W_Event90390")
        return 
    else
        return 
    end
end

function Event90410_onUpdate()
    act(9102)
    return 
end

function Event90420_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90450_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90650_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90660_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90671_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90810_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90820_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90900_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90300_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90730_onUpdate()
    Event90610_onUpdate()
    return 
end

function Event90930_onUpdate()
    Event90610_onUpdate()
    return 
end

function Event90980_onUpdate()
    Event90550_onUpdate()
    return 
end

function Event90990_onUpdate()
    act(9102)
    return 
end

function Event90991_onDeactivate()
    function Event90830_onUpdate()
        if EventCommonFunction() == TRUE then
            return 
        else
            return 
        end
    end

    function Event90831_onUpdate()
        if EventCommonFunction() == TRUE then
            return 
        else
            return 
        end
    end

    return 
end

function Event90840_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90841_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90850_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90851_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90860_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90861_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90870_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90890_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90740_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90750_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90760_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90780_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90800_onUpdate()
    act(9102)
    if IsDead() == TRUE then
        ExecEvent("W_Event90950")
        return 
    elseif DAMAGE_LEVEL_NONE < env(236) then
        ExecEvent("W_Event90940")
        return 
    else
        return 
    end
end

function Event90801_onUpdate()
    Event90800_onUpdate()
    return 
end

function Event90940_onUpdate()
    Event90800_onUpdate()
    return 
end

function Event90950_onUpdate()
    act(9102)
    return 
end

function Event90340_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event99999_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90250_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90260_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90270_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event90280_onUpdate()
    act(9102)
    act(138, TRUE)
    return 
end

function Event90290_onUpdate()
    act(9102)
    act(138, TRUE)
    return 
end

function Event90291_onUpdate()
    act(138, TRUE)
    if EventCommonFunction() == TRUE then
        act(138, FALSE)
        return 
    else
        return 
    end
end

function Event90291_onDeactivate()
    act(138, FALSE)
    return 
end

function Event91010_onUpdate()
    act(9102)
    act(138, TRUE)
    return 
end

function Event91011_onUpdate()
    act(9102)
    act(138, TRUE)
    return 
end

function Event91012_onUpdate()
    act(138, TRUE)
    if EventCommonFunction() == TRUE then
        act(138, FALSE)
        return 
    else
        return 
    end
end

function Event91012_onDeactivate()
    act(138, FALSE)
    return 
end

function Event91013_onUpdate()
    act(9102)
    act(138, TRUE)
    return 
end

function Event91020_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event91030_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event91040_onUpdate()
    act(9102)
    return 
end

function Event91050_onUpdate()
    act(9102)
    return 
end

function Event91051_onUpdate()
    act(9102)
    return 
end

function Event91052_onUpdate()
    act(9102)
    return 
end

function Event91060_onUpdate()
    act(9102)
    if IsDead() == TRUE then
        ExecEvent("W_Event91061")
        return 
    elseif DAMAGE_LEVEL_NONE < env(236) and env(256) == TRUE then
        ExecEvent("W_Event91070")
        return 
    else
        return 
    end
end

function Event91061_onUpdate()
    act(9102)
    return 
end

function Event91070_onUpdate()
    act(9102)
    if IsDead() == TRUE then
        ExecEvent("W_Event91061")
        return 
    elseif DAMAGE_LEVEL_NONE < env(236) and env(256) == TRUE then
        ExecEvent("W_Event91070")
        return 
    else
        return 
    end
end

function Event91080_onUpdate()
    act(9102)
    SetThrowDefInvalid()
    if IsDead() == TRUE then
        ExecDeath()
        return 
    elseif DAMAGE_LEVEL_NONE < env(236) and env(256) == TRUE then
        ExecEvent("W_Event91090")
        return 
    else
        return 
    end
end

function Event91090_onActivate()
    SetThrowDefInvalid()
    return 
end

function Event91090_onUpdate()
    SetThrowDefInvalid()
    act(9102)
    return 
end

function Event91100_onUpdate()
    act(9102)
    if DAMAGE_LEVEL_NONE < env(236) and env(256) == TRUE then
        ExecEvent("W_Event91110")
        return 
    else
        return 
    end
end

function Event91120_onUpdate()
    act(9102)
    if IsDead() == TRUE then
        ExecEvent("W_Event91061")
        return 
    elseif DAMAGE_LEVEL_NONE < env(236) and env(256) == TRUE then
        ExecEvent("W_Event91070")
        return 
    else
        return 
    end
end

function Event91130_onUpdate()
    act(9102)
    if IsDead() == TRUE then
        ExecEvent("W_Event91061")
        return 
    elseif DAMAGE_LEVEL_NONE < env(236) and env(256) == TRUE then
        ExecEvent("W_Event91070")
        return 
    else
        return 
    end
end

function Event91140_onUpdate()
    act(9102)
    if IsDead() == TRUE then
        ExecEvent("W_Event91061")
        return 
    elseif DAMAGE_LEVEL_NONE < env(236) and env(256) == TRUE then
        ExecEvent("W_Event91070")
        return 
    else
        return 
    end
end

function Event91150_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event91160_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event91170_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event91180_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event91190_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event91200_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event91210_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event91220_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function Event91230_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function BonfireInitialize_onUpdate()
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function BonfireStart_onActivate()
    act("貪欲者の印スリップダメージ無効")
    return 
end

function BonfireStart_onUpdate()
    act("貪欲者の印スリップダメージ無効")
    if env("アニメ終了か", 1) == FALSE then
        act(9102)
    end
    return 
end

function BonfireLoop_onActivate()
    act("貪欲者の印スリップダメージ無効")
    return 
end

function BonfireLoop_onUpdate()
    act("貪欲者の印スリップダメージ無効")
    act(9102)
    act(138, TRUE)
    return 
end

function BonfireLoop_onDeactivate()
    act(138, FALSE)
    return 
end

function BonfireEnd_onActivate()
    act("貪欲者の印スリップダメージ無効")
    return 
end

function BonfireEnd_onUpdate()
    act("貪欲者の印スリップダメージ無効")
    if EventCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function BonfireGiveHeroPoint_onActivate()
    act("貪欲者の印スリップダメージ無効")
    return 
end

function BonfireGiveHeroPoint_onUpdate()
    act("貪欲者の印スリップダメージ無効")
    act(9102)
    return 
end

function BonfireWarp_onActivate()
    act("貪欲者の印スリップダメージ無効")
    return 
end

function BonfireWarp_onUpdate()
    act("貪欲者の印スリップダメージ無効")
    act(9102)
    return 
end

function BonfireWarp2_onActivate()
    act("貪欲者の印スリップダメージ無効")
    return 
end

function BonfireWarp2_onUpdate()
    act("貪欲者の印スリップダメージ無効")
    act(9102)
    return 
end

function BonfireWarpEnd_onActivate()
    act("貪欲者の印スリップダメージ無効")
    return 
end

function BonfireWarpEnd_onUpdate()
    act("貪欲者の印スリップダメージ無効")
    act(9102)
    return 
end

function BonfireHumanRestore_onActivate()
    act("貪欲者の印スリップダメージ無効")
    return 
end

function BonfireHumanRestore_onUpdate()
    act("貪欲者の印スリップダメージ無効")
    if env("アニメ終了か", 1) == FALSE then
        act(9102)
    end
    return 
end

function Ladder_Activate()
    act(145)
    Flag_LadderDamage = LADDER_DAMAGE_NONE
    Flag_LadderJump = LADDER_JUMP_INVALID
    SetThrowInvalid()
    return 
end

function Ladder_Update()
    SetThrowInvalid()
    LadderSetActionState(INVALID)
    return 
end

function LadderAttachBottom_onUpdate()
    if env(322) == TRUE then
        return 
    else
        ExecEvent("W_LadderStartBottom")
        return 
    end
end

function LadderAttachTop_onUpdate()
    if env(322) == TRUE then
        return 
    else
        ExecEvent("W_LadderStartTop")
        return 
    end
end

function LadderStartTop_onActivate()
    act(145)
    return 
end

function LadderStartTop_onUpdate()
    LadderSetActionState(LADDER_ACTION_START_TOP)
    if LadderMoveCommonFunction(HAND_STATE_LEFT, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function LadderStartBottom_onActivate()
    act(145)
    return 
end

function LadderStartBottom_onUpdate()
    LadderSetActionState(LADDER_ACTION_START_BOTTOM)
    if LadderMoveCommonFunction(HAND_STATE_LEFT, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function LadderUpRight_onActivate()
    LadderSendCommand(LADDER_CALL_UP)
    return 
end

function LadderUpRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_UP_RIGHT)
    if LadderMoveCommonFunction(HAND_STATE_LEFT, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function LadderUpLeft_onActivate()
    LadderSendCommand(LADDER_CALL_UP)
    return 
end

function LadderUpLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_UP_LEFT)
    if LadderMoveCommonFunction(HAND_STATE_RIGHT, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function LadderDownLeft_onActivate()
    LadderSendCommand(LADDER_CALL_DOWN)
    return 
end

function LadderDownLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_DOWN_LEFT)
    if LadderMoveCommonFunction(HAND_STATE_RIGHT, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function LadderDownRight_onActivate()
    LadderSendCommand(LADDER_CALL_DOWN)
    return 
end

function LadderDownRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_DOWN_RIGHT)
    if LadderMoveCommonFunction(HAND_STATE_LEFT, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function LadderEndBottomLeft_onActivate()
    LadderSendCommand(LADDER_EVENT_COMMAND_EXIT)
    return 
end

function LadderEndBottomLeft_onUpdate()
    if LadderEndCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function LadderEndBottomRight_onActivate()
    LadderSendCommand(LADDER_CALL_DOWN)
    return 
end

function LadderEndBottomRight_onUpdate()
    if LadderEndCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function LadderEndTopLeft_onActivate()
    LadderSendCommand(LADDER_CALL_UP)
    return 
end

function LadderEndTopLeft_onUpdate()
    if LadderEndCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function LadderEndTopRight_onActivate()
    LadderSendCommand(LADDER_CALL_UP)
    return 
end

function LadderEndTopRight_onUpdate()
    if LadderEndCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function LadderIdleLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_LEFT)
    if LadderIdleCommonFunction(HAND_STATE_LEFT) == TRUE then
        return 
    else
        return 
    end
end

function LadderIdleRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_RIGHT)
    if LadderIdleCommonFunction(HAND_STATE_RIGHT) == TRUE then
        return 
    else
        return 
    end
end

function LadderAttackUpRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_ATTACK_UP_RIGHT)
    if LadderAttackCommonFunction(HAND_STATE_RIGHT) == TRUE then
        return 
    else
        return 
    end
end

function LadderAttackUpLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_ATTACK_UP_LEFT)
    if LadderAttackCommonFunction(HAND_STATE_LEFT) == TRUE then
        return 
    else
        return 
    end
end

function LadderAttackDownRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_ATTACK_DOWN_RIGHT)
    if LadderAttackCommonFunction(HAND_STATE_RIGHT) == TRUE then
        return 
    else
        return 
    end
end

function LadderAttackDownLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_ATTACK_DOWN_RIGHT)
    if LadderAttackCommonFunction(HAND_STATE_LEFT) == TRUE then
        return 
    else
        return 
    end
end

function LadderCoastStart_onUpdate()
    LadderSetActionState(LADDER_ACTION_COAST_START)
    if LadderCoastCommonFunction(HAND_STATE_LEFT, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function LadderCoastRight_onActivate()
    LadderSendCommand(LADDER_CALL_DOWN)
    return 
end

function LadderCoastRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_COAST_RIGHT)
    if LadderCoastCommonFunction(HAND_STATE_LEFT, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function LadderCoastLeft_onActivate()
    LadderSendCommand(LADDER_CALL_DOWN)
    return 
end

function LadderCoastLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_COAST_LEFT)
    if LadderCoastCommonFunction(HAND_STATE_RIGHT, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function LadderCoastStopLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_COAST_STOP)
    if LadderMoveCommonFunction(HAND_STATE_LEFT, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function LadderCoastStopRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_COAST_STOP)
    if LadderMoveCommonFunction(HAND_STATE_RIGHT, FALSE) == TRUE then
        return 
    else
        return 
    end
end

function LadderCoastLanding_onActivate()
    LadderSendCommand(LADDER_CALL_DOWN)
    return 
end

function LadderCoastLanding_onUpdate()
    if LadderEndCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function LadderDamageLargeRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_DAMAGE_LARGE)
    if LadderDamageCommonFunction(HAND_STATE_RIGHT) == TRUE then
        return 
    else
        return 
    end
end

function LadderDamageSmallRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_DAMAGE_SMALL)
    if LadderDamageCommonFunction(HAND_STATE_RIGHT) == TRUE then
        return 
    else
        return 
    end
end

function LadderDamageLargeLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_DAMAGE_LARGE)
    if LadderDamageCommonFunction(HAND_STATE_LEFT) == TRUE then
        return 
    else
        return 
    end
end

function LadderDamageSmallLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_DAMAGE_SMALL)
    if LadderDamageCommonFunction(HAND_STATE_LEFT) == TRUE then
        return 
    else
        return 
    end
end

function LadderDeathStart_onActivate()
    LadderSendCommand(LADDER_EVENT_COMMAND_EXIT)
    return 
end

function LadderDeathLoop_onUpdate()
    if env(201) == TRUE then
        ExecEvent("LadderDeathLand")
    end
    local height = env(224) / 100
    if 60 < height then
        ExecEvent("W_LadderDeathIdle")
    end
    return 
end

function LadderDeathIdle_onActivate()
    act(126, TRUE)
    return 
end

function LadderDeathIdle_onDeactivate()
    act(126, FALSE)
    return 
end

function LadderFallStart_onActivate()
    LadderSendCommand(LADDER_EVENT_COMMAND_EXIT)
    return 
end

function LadderFallLoop_onUpdate()
    if FallCommonFunction(TRUE, FALSE, FALL_LADDER) == TRUE then
        return 
    else
        return 
    end
end

function LadderFallLanding_onUpdate()
    if LandCommonFunction() == TRUE then
        return 
    else
        return 
    end
end

function LadderDrop_onUpdate()
    act(2001, math.random(160, 200) / 100)
    act(147)
    if env(200) == TRUE then
        ExecEventAllBody("W_FallLoop")
        return 
    else
        return 
    end
end

function SlideStart_onActivate()
    SetVariable("SlideAngle", 0)
    act(142, TRUE)
    return 
end

function SlideStart_onUpdate()
    act(142, TRUE)
    if SlideCommonFunction(TRUE) == TRUE then
        act(142, FALSE)
        return TRUE
    elseif env("アニメ終了か", 0) == TRUE or env(301, 0) == TRUE then
        ExecEvent("W_SlideLoop")
        return 
    else
        return 
    end
end

function SlideLoop_onUpdate()
    if SlideCommonFunction(TRUE) == TRUE then
        act(142, FALSE)
        return TRUE
    end
    local turn_angle = hkbGetVariable("TurnAngle")
    local target_val = nil
    if 90 < turn_angle then
        target_val = 90
    elseif turn_angle < -90 then
        target_val = -90
    else
        target_val = turn_angle
    end
    SetVariable("SlideAngle", ConvergeValue(target_val, hkbGetVariable("SlideAngle"), 180, 180))
    return 
end

function SlideEnd_onActivate()
    act(142, FALSE)
    return TRUE
end

function SlideEnd_onUpdate()
    if SlideCommonFunction(FALSE) == TRUE then
        return TRUE
    else
        return 
    end
end

function Init_onUpdate()
    ResetDamageCount()
    if env(1007) == TRUE then
        local event_id = env(105, 1)
        if event_id == 800 then
            ExecEvent("W_Event90700")
            return 
        elseif event_id == 1200 then
            ExecEvent("W_Event90380")
            return 
        elseif event_id == 1300 then
            ExecEvent("W_Event91000")
            return 
        elseif event_id == 1700 then
            ExecEvent("W_Event90670")
            return 
        elseif event_id == 1900 then
            ExecEvent("W_Event90770")
            return 
        elseif event_id == 1901 then
            ExecEvent("W_Event90790")
            return 
        end
    end
    ExecEvent("W_Idle")
    return 
end

function SetThrowAtkInvalid()
    act(102, THROW_STATE_INVALID)
    return 
end

function SetThrowDefInvalid()
    act(103, THROW_STATE_INVALID)
    return 
end

function SetThrowInvalid()
    act(102, THROW_STATE_INVALID)
    act(103, THROW_STATE_INVALID)
    return 
end

function CultStart1_onActivate()
    ResetEventState()
    act(138, FALSE)
    return 
end

function CultStart1_onUpdate()
    if CultCommonFunction(1, FALSE) == TRUE then
        act(138, TRUE)
        return 
    else
        return 
    end
end

function CultCont1_onActivate()
    act(138, FALSE)
    return 
end

function CultCont1_onUpdate()
    if CultCommonFunction(1, FALSE) == TRUE then
        act(138, TRUE)
        return 
    else
        return 
    end
end

function CultEnd1_onActivate()
    act(138, FALSE)
    return 
end

function CultEnd1_onUpdate()
    if CultCommonFunction(1, TRUE) == TRUE then
        act(138, TRUE)
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        act(138, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function CultInterrupt1_onActivate()
    act(138, FALSE)
    return 
end

function CultInterrupt1_onUpdate()
    if CultCommonFunction(1, TRUE) == TRUE then
        act(138, TRUE)
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        act(138, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function CultStart2_onActivate()
    ResetEventState()
    act(138, FALSE)
    return 
end

function CultStart2_onUpdate()
    if CultCommonFunction(1, FALSE) == TRUE then
        act(138, TRUE)
        return 
    else
        return 
    end
end

function CultCont2_onActivate()
    act(138, FALSE)
    return 
end

function CultCont2_onUpdate()
    if CultCommonFunction(1, FALSE) == TRUE then
        act(138, TRUE)
        return 
    else
        return 
    end
end

function CultEnd2_onActivate()
    act(138, FALSE)
    return 
end

function CultEnd2_onUpdate()
    if CultCommonFunction(1, TRUE) == TRUE then
        act(138, TRUE)
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        act(138, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function CultInterrupt2_onActivate()
    act(138, FALSE)
    return 
end

function CultInterrupt2_onUpdate()
    if CultCommonFunction(1, TRUE) == TRUE then
        act(138, TRUE)
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        act(138, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function CultStart3_onActivate()
    ResetEventState()
    act(138, FALSE)
    return 
end

function CultStart3_onUpdate()
    if CultCommonFunction(1, FALSE) == TRUE then
        act(138, TRUE)
        return 
    else
        return 
    end
end

function CultCont3_onActivate()
    act(138, FALSE)
    return 
end

function CultCont3_onUpdate()
    if CultCommonFunction(1, FALSE) == TRUE then
        act(138, TRUE)
        return 
    else
        return 
    end
end

function CultEnd3_onActivate()
    act(138, FALSE)
    return 
end

function CultEnd3_onUpdate()
    if CultCommonFunction(1, TRUE) == TRUE then
        act(138, TRUE)
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        act(138, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function CultInterrupt3_onActivate()
    act(138, FALSE)
    return 
end

function CultInterrupt3_onUpdate()
    if CultCommonFunction(1, TRUE) == TRUE then
        act(138, TRUE)
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        act(138, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function CultStart4_onActivate()
    ResetEventState()
    act(138, FALSE)
    return 
end

function CultStart4_onUpdate()
    if CultCommonFunction(1, FALSE) == TRUE then
        act(138, TRUE)
        return 
    else
        return 
    end
end

function CultCont4_onActivate()
    act(138, FALSE)
    return 
end

function CultCont4_onUpdate()
    if CultCommonFunction(1, FALSE) == TRUE then
        act(138, TRUE)
        return 
    else
        return 
    end
end

function CultEnd4_onActivate()
    act(138, FALSE)
    return 
end

function CultEnd4_onUpdate()
    if CultCommonFunction(1, TRUE) == TRUE then
        act(138, TRUE)
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        act(138, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function CultInterrupt4_onActivate()
    act(138, FALSE)
    return 
end

function CultInterrupt4_onUpdate()
    if CultCommonFunction(1, TRUE) == TRUE then
        act(138, TRUE)
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        act(138, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function CultStart5_onActivate()
    ResetEventState()
    act(138, FALSE)
    return 
end

function CultStart5_onUpdate()
    if CultCommonFunction(1, FALSE) == TRUE then
        act(138, TRUE)
        return 
    else
        return 
    end
end

function CultCont5_onActivate()
    act(138, FALSE)
    return 
end

function CultCont5_onUpdate()
    if CultCommonFunction(1, FALSE) == TRUE then
        act(138, TRUE)
        return 
    else
        return 
    end
end

function CultEnd5_onActivate()
    act(138, FALSE)
    return 
end

function CultEnd5_onUpdate()
    if CultCommonFunction(1, TRUE) == TRUE then
        act(138, TRUE)
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        act(138, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function CultInterrupt5_onActivate()
    act(138, FALSE)
    return 
end

function CultInterrupt5_onUpdate()
    if CultCommonFunction(1, TRUE) == TRUE then
        act(138, TRUE)
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        act(138, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function CultStart6_onActivate()
    ResetEventState()
    act(138, FALSE)
    return 
end

function CultStart6_onUpdate()
    if CultCommonFunction(1, FALSE) == TRUE then
        act(138, TRUE)
        return 
    else
        return 
    end
end

function CultCont6_onActivate()
    act(138, FALSE)
    return 
end

function CultCont6_onUpdate()
    if CultCommonFunction(1, FALSE) == TRUE then
        act(138, TRUE)
        return 
    else
        return 
    end
end

function CultEnd6_onActivate()
    act(138, FALSE)
    return 
end

function CultEnd6_onUpdate()
    if CultCommonFunction(1, TRUE) == TRUE then
        act(138, TRUE)
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        act(138, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function CultInterrupt6_onActivate()
    act(138, FALSE)
    return 
end

function CultInterrupt6_onUpdate()
    if CultCommonFunction(1, TRUE) == TRUE then
        act(138, TRUE)
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        act(138, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function CultStart7_onActivate()
    ResetEventState()
    act(138, FALSE)
    return 
end

function CultStart7_onUpdate()
    if CultCommonFunction(1, FALSE) == TRUE then
        act(138, TRUE)
        return 
    else
        return 
    end
end

function CultCont7_onActivate()
    act(138, FALSE)
    return 
end

function CultCont7_onUpdate()
    if CultCommonFunction(1, FALSE) == TRUE then
        act(138, TRUE)
        return 
    else
        return 
    end
end

function CultEnd7_onActivate()
    act(138, FALSE)
    return 
end

function CultEnd7_onUpdate()
    if CultCommonFunction(1, TRUE) == TRUE then
        act(138, TRUE)
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        act(138, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function CultInterrupt7_onActivate()
    act(138, FALSE)
    return 
end

function CultInterrupt7_onUpdate()
    if CultCommonFunction(1, TRUE) == TRUE then
        act(138, TRUE)
        return 
    elseif env("アニメ終了か", 1) == TRUE then
        act(138, TRUE)
        ExecEventAllBody("W_Idle")
        return 
    else
        return 
    end
end

function AddDamageDefault_onUpdate()
    SetVariable("AddDamageBlend", 0)
    return 
end

function AddDamageDefaultGuard_onUpdate()
    SetVariable("AddDamageGuardBlend", 0)
    return 
end

function SAMagic_Default_onUpdate()
    SetVariable("SAMagicBlendRate", 0)
    return 
end

function DamageDirNoAdd_onUpdate()
    SetVariable("DamageDirBlendRate", 0)
    return 
end

function SpeedUpdate()
    local stick_level = GetVariable("MoveSpeedLevel")
    local move_angle = GetVariable("MoveAngle")
    local is_aim = env(234)
    local move_id = env(257)
    if is_aim == TRUE then
        stick_level = 0
    elseif move_id == WEIGHT_OVERWEIGHT or move_id == WEIGHT_OVERWEIGHT + 20 or move_id == WEIGHT_OVERWEIGHT + 40 or move_id == WEIGHT_OVERWEIGHT + 60 then
        stick_level = 0
    elseif env(1116, 130110) == TRUE then
        if 1.10000002384186 < stick_level then
            stick_level = 1
        end
    elseif env(305, CONDITION_TYPE_GRAVITY_MEDIUM) == TRUE then
        stick_level = 0
    elseif env(305, CONDITION_TYPE_GRAVITY_WEAK) == TRUE then
        if 1.10000002384186 < stick_level then
            stick_level = 1
        elseif 0 < stick_level then
            stick_level = 0
        end
    elseif env(1116, 100220) == TRUE then
        stick_level = 2
    elseif env(1116, 100020) == TRUE then
        if 1.10000002384186 < stick_level then
            stick_level = 1
        end
    elseif GetVariable("MoveType") ~= 3 and 0.5 < stick_level then
        stick_level = 0.5
    end
    
    -- Restraint: Sprint
    if env(1116, 112921) == TRUE then
        if stick_level > 1 then
            stick_level = 1
        end
    end
    
    -- Restraint: Run
    if env(1116, 112922) == TRUE then
        if stick_level > 0.5 then
            stick_level = 0.5
        end
    end
    
    if 1.10000002384186 < stick_level then
        if GetVariable("MoveType") == 3 then
            act("ロックオン中角度固定解除")
        end
        SetVariable("MoveSpeedIndex", 2)
    elseif 0.600000023841858 < stick_level then
        SetVariable("MoveSpeedIndex", 1)
    else
        SetVariable("MoveSpeedIndex", 0)
    end
    
    local speed = GetMoveSpeed(stick_level)
    SetVariable("MoveSpeedLevelReal", speed)

    if env(1001) <= 0 then
        act(2002, 100020)
    end
    
    if env(1116, 100002) == TRUE then
        act(110)
        local dT = GetDeltaTime()
        dash_dt_sum = dash_dt_sum + dT
        if 0.0649999976158142 < dash_dt_sum then
            dash_dt_sum = 0
            
            act(1001, -1)
        end
    end
    return 
end

function Update()
    GetConstVariable()
    SetStyleSpecialEffect()
    
    -- Cinders
    AnimationMonitor()
    UpdateFP()
    UpdateBloodthirstCharges()
    UpdateImpermanenceCurseEffect()
    PsychedelicPhantomEffect()
    PsychedelicTintEffect()
    UpdateVitalityMasteryEffect()
    UpdateHawkRingEffect()
    UpdateCatalystAffinityEffect()
    
    -- Rings
    UpdateSigilEffect()
    UpdateYoungDragonRingEffect()
    UpdateGreatSwampRingEffect()
    UpdateMornesRingEffect()
    UpdateDeepRingEffect()
    
    -- Lifegem
    UpdateStackableItem(116000, 116001, 116002, 116003, 116004, 116005, -1, -1, -1, -1, -1) 
    
    -- Radiant Lifegem
    UpdateStackableItem(116010, 116011, 116012, 116013, 116014, 116015, -1, -1, -1, -1, -1) 
    
    -- Old Radiant Lifegem
    UpdateStackableItem(116020, 116021, 116022, 116023, 116024, 116025, -1, -1, -1, -1, -1) 
    
    -- Elizabeth Mushroom
    UpdateStackableItem(116030, 116031, 116032, 116033, 116034, 116035, -1, -1, -1, -1, -1) 
    
    -- Dried Root 
    UpdateStackableItem(116040, 116041, 116042, 116043, 116044, 116045, -1, -1, -1, -1, -1) 
    
    -- Brightbug
    UpdateStackableItem(116050, 116051, 116052, 116053, -1, -1, -1, -1, -1, -1, -1) 
    
    -- Tarnished Coin
    UpdateStackableItem(116060, 116061, 116062, 116063, -1, -1, -1, -1, -1, -1, -1)  
    
    -- Cursed Tarnished Coin
    UpdateStackableItem(116080, 116081, 116082, 116083, -1, -1, -1, -1, -1, -1, -1) 
    
    -- Henbane
    UpdateHenbaneEffect()
    
    UpdateOldMonkState()
    act(101, FALSE)
    act("ロックオン時システム旋回不可角度", 0, 0)
    SetVariable("LocomotionState", GetLocomotionState())
    SetVariable("ArtsTransition", 0)
    SetMoveType()
    if IsLowerQuickTurn() == TRUE then
        SetVariable("LookAtTwist30_OnGain", 1)
        SetVariable("LookAtTwist60_OnGain", 1)
    else
        SetVariable("LookAtTwist30_OnGain", 0.100000001490116)
        SetVariable("LookAtTwist60_OnGain", 0.200000002980232)
    end
    SetSwordArtsCancelType()
    SetGender()
    if IsNodeActive("QuickItem_Script", "SwordArtsRight_Script") == FALSE then
        ClearAttackQueue()
    end
    SetTimeActEditorVariable()
    UpdateFemaleBlend()
    UpdateShoulderTwist()
    UpdateWristTwist()
    g_FrameCount = g_FrameCount + 1
    return 
end

function ModifiersLayer_onGenerate()
    return 
end

function Master_onGenerate()
    return 
end

-- Cinders
function IsSidearm()
    local sp_kind = env(345, HAND_LEFT)
    
    if sp_kind == 285 or sp_kind == 286 or sp_kind == 287 or sp_kind == 288 or sp_kind == 289 or sp_kind == 290 or sp_kind == 291 or sp_kind == 292 then
        return TRUE
    end
    
    return FALSE
end

function IsCannon()
    local sp_kind = env(345, HAND_LEFT)
    
    if sp_kind == 285 then
        return TRUE
    end
    
    return FALSE
end

function IsChurchCannon()
    local sp_kind = env(345, HAND_LEFT)
    
    if sp_kind == 286 then
        return TRUE
    end
    
    return FALSE
end

function IsHunterPistol()
    local sp_kind = env(345, HAND_LEFT)
    
    if sp_kind == 287 then
        return TRUE
    end
    
    return FALSE
end

function IsRepeatingPistol()
    local sp_kind = env(345, HAND_LEFT)
    
    if sp_kind == 288 then
        return TRUE
    end
    
    return FALSE
end

function IsEvelynn()
    local sp_kind = env(345, HAND_LEFT)
    
    if sp_kind == 289 then
        return TRUE
    end
    
    return FALSE
end

function IsBlunderbuss()
    local sp_kind = env(345, HAND_LEFT)
    
    if sp_kind == 290 then
        return TRUE
    end
    
    return FALSE
end

function IsRosamarinus()
    local sp_kind = env(345, HAND_LEFT)
    
    if sp_kind == 291 then
        return TRUE
    end
    
    return FALSE
end

function IsFistOfGratia()
    local sp_kind = env(345, HAND_LEFT)
    
    if sp_kind == 292 then
        return TRUE
    end
    
    return FALSE
end

function UpdateStackableItem(trg_eff, sk_eff_1, sk_eff_2, sk_eff_3, sk_eff_4, sk_eff_5, sk_eff_6, sk_eff_7, sk_eff_8, sk_eff_9, sk_eff_10)
    -- Trigger effect
    if env(1116, trg_eff) == TRUE then
        -- Add stacks, or just fresh first instance if at limit
        if env(1116, sk_eff_1) == FALSE then
            act(2002, sk_eff_1)
        elseif sk_eff_2 ~= -1 and env(1116, sk_eff_2) == FALSE then
            act(2002, sk_eff_2)
        elseif sk_eff_3 ~= -1 and env(1116, sk_eff_3) == FALSE then
            act(2002, sk_eff_3)
        elseif sk_eff_4 ~= -1 and  env(1116, sk_eff_4) == FALSE then
            act(2002, sk_eff_4)
        elseif sk_eff_5 ~= -1 and env(1116, sk_eff_5) == FALSE then
            act(2002, sk_eff_5)
        elseif sk_eff_6 ~= -1 and env(1116, sk_eff_6) == FALSE then
            act(2002, sk_eff_6)
        elseif sk_eff_7 ~= -1 and env(1116, sk_eff_7) == FALSE then
            act(2002, sk_eff_7)
        elseif sk_eff_8 ~= -1 and env(1116, sk_eff_8) == FALSE then
            act(2002, sk_eff_8)
        elseif sk_eff_9 ~= -1 and env(1116, sk_eff_9) == FALSE then
            act(2002, sk_eff_9)
        elseif sk_eff_10 ~= -1 and env(1116, sk_eff_10) == FALSE then
            act(2002, sk_eff_10)
        else
            act(2002, sk_eff_1)
        end
    end
end

function UpdateHenbaneEffect()
    if env(1116, 116100) == TRUE then
        if env(1000) > 100 then
            act(2002, 116103)
        elseif env(1000) > 10 then
            act(2002, 116102)
        elseif env(1000) > 1 then
            act(2002, 116101)
        end
    end
end

-- FP Regen
function UpdateFP()
    -- End if AI player
    if env(1007) == TRUE then
        return
    end
    
    local skip = false
    local skip_base = false
    local cooldown = false
    
    if env(1116, 113000) == TRUE or env(1116, 113070) == TRUE then
        cooldown = true
    end
    
    if cooldown == false then
        if env(1116, 113001) == TRUE or env(1116, 113002) == TRUE or env(1116, 113003) == TRUE or env(1116, 113004) == TRUE or env(1116, 113005) == TRUE or env(1116, 113006) == TRUE   or env(1116, 113007) == TRUE or env(1116, 113008) == TRUE or env(1116, 113009) == TRUE or env(1116, 113010) == TRUE or env(1116, 113011) == TRUE or env(1116, 113012) == TRUE or env(1116, 113013) == TRUE or env(1116, 113014) == TRUE or env(1116, 113015) == TRUE or env(1116, 113020) == TRUE or env(1116, 113025) == TRUE or env(1116, 113030) == TRUE or env(1116, 113035) == TRUE or env(1116, 113040) == TRUE or env(1116, 113045) == TRUE or env(1116, 113050) == TRUE or env(1116, 113055) == TRUE or env(1116, 113060) == TRUE then
            skip = true
        end
        
        -- Curse of Simplicity
        if env(1116, 113205) == TRUE then
            skip_base = true
        end
        
        if skip == false then
            if env(1116, 112622) == TRUE then
                act(2002, 113070) -- Base Interval
            else
                act(2002, 113000) -- Base Interval
            end
            
            -- Attunement Mastery
            if env(1116, 112430) == TRUE then
                if skip_base == false then
                    act(2002, 113130) -- Attunement Mastery - Base
                end
            else
                if skip_base == false then
                    act(2002, 113100) -- Normal - Base
                end
            end
            
            if env(1116, 113200) == TRUE then
                act(2002, 113101) -- Enchanted
            end
            
            if env(1116, 113201) == TRUE then
                act(2002, 113102) -- Clarity
            end
                        
            if env(1116, 113203) == TRUE then
                act(2002, 113103) -- Pulsating
            end
            
            if env(1116, 113210) == TRUE then
                act(2002, 113110) -- Darkmoon Ring
            end
            
            if env(1116, 113211) == TRUE then
                act(2002, 113111) -- Darkmoon Ring+1
            end
            
            if env(1116, 113212) == TRUE then
                act(2002, 113112) -- Darkmoon Ring+2
            end
            
            if env(1116, 113213) == TRUE then
                act(2002, 113113) -- Darkmoon Ring+3
            end
            
            if env(1116, 113214) == TRUE then
                act(2002, 113114) -- Darkmoon Ring+4
            end
            
            if env(1116, 113215) == TRUE then
                act(2002, 113115) -- Darkmoon Ring+5
            end
            
            -- Darkmoon Faithful
            if env(1116, 113240) == TRUE then
                act(2002, 113140) -- I
            end
            
            if env(1116, 113241) == TRUE then
                act(2002, 113141) -- II
            end
            
            if env(1116, 113242) == TRUE then
                act(2002, 113142) -- III
            end
            
            if env(1116, 113243) == TRUE then
                act(2002, 113143) -- IV
            end
            
            if env(1116, 113244) == TRUE then
                act(2002, 113144) -- V
            end
            
            ---------------------
            -- Focusing Ring
            ---------------------
            local stop_speed = GetVariable("MoveSpeedLevelReal")
            
            if stop_speed < 0.1 then
                if env(1116, 113220) == TRUE then
                    act(2002, 113120) -- Focusing Ring
                end
                
                if env(1116, 113221) == TRUE then
                    act(2002, 113121) -- Focusing Ring+1
                end
                
                if env(1116, 113222) == TRUE then
                    act(2002, 113122) -- Focusing Ring+2
                end
                
                if env(1116, 113223) == TRUE then
                    act(2002, 113123) -- Focusing Ring+3
                end
                
                if env(1116, 113224) == TRUE then
                    act(2002, 113124) -- Focusing Ring+4
                end
                
                if env(1116, 113225) == TRUE then
                    act(2002, 113125) -- Focusing Ring+5
                end
            end
        end
    end
end

-- Bloodthirst Charges
function UpdateBloodthirstCharges()
    -- End if AI player
    if env(1007) == TRUE then
        return
    end
    
    local cooldown = false
    
    if env(1116, 113500) == TRUE then
        cooldown = true
    end
    
    if cooldown == false then
        act(2002, 113500) -- Base Interval
        act(2002, 113501) -- Baseline Regen
    end
end

-- Fool's Sigil
function UpdateSigilEffect()
    -- End if AI player
    if env(1007) == TRUE then
        return
    end
    -- Has Fool's Sigil equipped
    if IsFoolsSigil() == TRUE then  
        local roll = math.random(0, 100)
        local movement_roll = math.random(0, 100)
    
        -- Apply every 10 seconds
        if env(1116, 114000) ~= TRUE then
            act(2002, 114000)
            
            -- +0
            if env(1116, 112030) == TRUE then
                if roll <= 25 then
                    act(2002, 114010)
                elseif roll > 25 and roll <= 50 then
                    act(2002, 114011)
                elseif roll > 50 and roll <= 75 then
                    act(2002, 114012)
                else
                    act(2002, 114013)
                end
            end
            
            -- +1
            if env(1116, 112031) == TRUE then
                if roll <= 25 then
                    act(2002, 114020)
                elseif roll > 25 and roll <= 50 then
                    act(2002, 114021)
                elseif roll > 50 and roll <= 75 then
                    act(2002, 114022)
                else
                    act(2002, 114023)
                end
            end
            
            -- +2
            if env(1116, 112032) == TRUE then
                if roll <= 25 then
                    act(2002, 114030)
                elseif roll > 25 and roll <= 50 then
                    act(2002, 114031)
                elseif roll > 50 and roll <= 75 then
                    act(2002, 114032)
                else
                    act(2002, 114033)
                end
            end
            
            -- +3
            if env(1116, 112033) == TRUE then
                if roll <= 25 then
                    act(2002, 114040)
                elseif roll > 25 and roll <= 50 then
                    act(2002, 114041)
                elseif roll > 50 and roll <= 75 then
                    act(2002, 114042)
                else
                    act(2002, 114043)
                end
            end
            
            -- +4
            if env(1116, 112034) == TRUE then
                if roll <= 25 then
                    act(2002, 114050)
                elseif roll > 25 and roll <= 50 then
                    act(2002, 114051)
                elseif roll > 50 and roll <= 75 then
                    act(2002, 114052)
                else
                    act(2002, 114053)
                end
            end
            
            -- +5
            if env(1116, 112035) == TRUE then
                if roll <= 25 then
                    act(2002, 114060)
                elseif roll > 25 and roll <= 50 then
                    act(2002, 114061)
                elseif roll > 50 and roll <= 75 then
                    act(2002, 114062)
                else
                    act(2002, 114063)
                end
            end
            
            -- Set movement speed for this cycle
            if movement_roll <= 10 then
                act(2002, 114100)
            elseif movement_roll > 10 and movement_roll <= 20 then
                act(2002, 114101)
            elseif movement_roll > 20 and movement_roll <= 30 then
                act(2002, 114102)
            elseif movement_roll > 30 and movement_roll <= 40 then
                act(2002, 114103)
            elseif movement_roll > 40 and movement_roll <= 50 then
                act(2002, 114104)
            elseif movement_roll > 50 and movement_roll <= 60 then
                act(2002, 114105)
            elseif movement_roll > 60 and movement_roll <= 70 then
                act(2002, 114106)
            elseif movement_roll > 70 and movement_roll <= 80 then
                act(2002, 114107)
            elseif movement_roll > 80 and movement_roll <= 90 then
                act(2002, 114108)
            else
                act(2002, 114109)
            end
        end
    end
end

-- Curse of Impermanence
function UpdateImpermanenceCurseEffect()
    -- End if AI player
    if env(1007) == TRUE then
        return
    end
    
    -- Curse is active
    if env(1116, 112130) == TRUE then
        if env(1116, 112131) ~= TRUE then -- Cooldown for roll
            act(2002, 112131) -- Cooldown
            
            local roll = math.random(0, 100)
            
            if roll < 10 then
                act(2002, 112132) -- Right Durability loss
                act(2002, 112133) -- Left Durability loss
            end
        end
    end
end

-- Psychedelic Phantom
function PsychedelicPhantomEffect()
    -- End if AI player
    if env(1007) == TRUE then
        return
    end
    
    if env(1116, 112140) == TRUE then
        if env(1116, 112150) ~= TRUE then
            act(2002, 112150) -- Cooldown
            act(2002, 112152) -- Effect
        end
    end
end

-- Psychedelic Tint
function PsychedelicTintEffect()
    -- End if AI player
    if env(1007) == TRUE then
        return
    end
    
    if env(1116, 112115) == TRUE then
        if env(1116, 112116) ~= TRUE then
            act(2002, 112116) -- Cooldown
            act(2002, 112117) -- Effect
        end
    end
end

-- Young Dragon Ring
function UpdateYoungDragonRingEffect()  
    -- End if AI player
    if env(1007) == TRUE then
        return
    end
    
    if env(1116, 112160) == TRUE then
        if env(1116, 112170) ~= TRUE then
            act(2002, 112170) -- Timer
            act(2002, 112161) -- Effect
        end
    end
end

-- Great Swamp Ring
function UpdateGreatSwampRingEffect()  
    -- End if AI player
    if env(1007) == TRUE then
        return
    end
    
    if env(1116, 112162) == TRUE then
        if env(1116, 112171) ~= TRUE then
            act(2002, 112171) -- Timer
            act(2002, 112163) -- Effect
        end
    end
end

-- Morne's Ring
function UpdateMornesRingEffect()  
    -- End if AI player
    if env(1007) == TRUE then
        return
    end
    
    if env(1116, 112164) == TRUE then
        if env(1116, 112172) ~= TRUE then
            act(2002, 112172) -- Timer
            act(2002, 112165) -- Effect
        end
    end
end

-- Deep Ring
function UpdateDeepRingEffect()  
    -- End if AI player
    if env(1007) == TRUE then
        return
    end
    
    if env(1116, 112166) == TRUE then
       if env(1116, 112173) ~= TRUE then
            act(2002, 112173) -- Timer
            act(2002, 112167) -- Effect
        end
    end
end

function AnimationMonitor()
    -- End if AI player
    if env(1007) == TRUE then
        return
    end
    
    -- Short Leap
    if env(1116, 112410) == TRUE then
        ExecEventAllBody("W_Event65030")
    end
    -- Long Leap
    if env(1116, 112411) == TRUE then
        ExecEventAllBody("W_Event60750")
    end
end

function UpdateVitalityMasteryEffect()
    -- End if AI player
    if env(1007) == TRUE then
        return
    end
    
    -- Vitality Mastery enabled
    if env(1116, 112421) == TRUE then
        if env(1116, 112422) ~= TRUE then
            act(2002, 112422)
            act(2002, 112420)
        end
    end
end

function UpdateHawkRingEffect()
    local style = c_Style
    local hand = HAND_RIGHT
    
    -- Handle weapon hand position
    if style == HAND_LEFT_BOTH or env(225, HAND_LEFT) == WEAPON_CATEGORY_CROSSBOW then
        hand = HAND_LEFT
    else
        hand = HAND_RIGHT
    end
    
    -- Assassin's Mark
	local sp_kind = env(345, hand)
    if env(225, hand) == WEAPON_CATEGORY_SMALL_ARROW or env(225, hand) == WEAPON_CATEGORY_LARGE_ARROW or env(225, hand) == WEAPON_CATEGORY_CROSSBOW or sp_kind == 754 then
    
        -- Hawk Ring 0
        if env(1116, 112480) == TRUE then
            act(2002, 112481)
        end
        
        -- Hawk Ring 1
        if env(1116, 112482) == TRUE then
            act(2002, 112483)
        end
        
        -- Hawk Ring 2
        if env(1116, 112484) == TRUE then
            act(2002, 112485)
        end
        
        -- Hawk Ring 3
        if env(1116, 112486) == TRUE then
            act(2002, 112487)
        end
        
        -- Hawk Ring 4
        if env(1116, 112488) == TRUE then
            act(2002, 112489)
        end
        
        -- Hawk Ring 5
        if env(1116, 112490) == TRUE then
            act(2002, 112491)
        end
    end
end

function UpdateCatalystAffinityEffect()
    -- Cast
    if env(1116, 113420) == TRUE or env(1116, 113421) == TRUE then
        -- Physical
        if env(1116, 113400) == TRUE then
            if env(1116, 113401) == FALSE and env(1116, 113402) == FALSE and env(1116, 113403) == FALSE and env(1116, 113404) == FALSE then 
                act(2002, 113450)
            end
        -- Magic
        elseif env(1116, 113401) == TRUE then
            if env(1116, 113400) == FALSE and env(1116, 113402) == FALSE and env(1116, 113403) == FALSE and env(1116, 113404) == FALSE then 
                act(2002, 113451)
            end
        -- Fire
        elseif env(1116, 113402) == TRUE then
            if env(1116, 113400) == FALSE and env(1116, 113401) == FALSE and env(1116, 113403) == FALSE and env(1116, 113404) == FALSE then 
                act(2002, 113452)
            end
        -- Lightning
        elseif env(1116, 113403) == TRUE then
            if env(1116, 113400) == FALSE and env(1116, 113401) == FALSE and env(1116, 113402) == FALSE and env(1116, 113404) == FALSE then 
                act(2002, 113453)
            end
        -- Dark
        elseif env(1116, 113404) == TRUE then
            if env(1116, 113400) == FALSE and env(1116, 113401) == FALSE and env(1116, 113402) == FALSE and env(1116, 113403) == FALSE then 
                act(2002, 113454)
            end
        end
    end
    
    -- Add Torch effect to Fire affinitry
    if env(1116, 113402) == TRUE then
        act(2002, 401)
    end
end

function ApplyEffectsAfterCast()
    magic_type = env(227)
    
    -- Unstable Catalyst
    if env(1116, 113522) == FALSE then
        if env(1116, 113520) == TRUE then
            act(2002, 113521)
            act(2002, 113522)
        end
    end
end

------------------------------------------
-- Utility
------------------------------------------
function IsBBDashWeapon()
    if env(1116, 112415) == TRUE and env(1116, 112414) == TRUE then
        return TRUE
    else
        return FALSE
    end
end

function IsRingOfMomentum()
    if env(1116, 112560) == TRUE or env(1116, 112561) == TRUE or env(1116, 112562) == TRUE or env(1116, 112563) == TRUE or env(1116, 112564) == TRUE or env(1116, 112565) == TRUE then
        return TRUE
    else
        return FALSE
    end
end

function IsBellOfGrace()
    if env(1116, 112550) == TRUE or env(1116, 112551) == TRUE or env(1116, 112552) == TRUE or env(1116, 112553) == TRUE or env(1116, 112554) == TRUE or env(1116, 112555) == TRUE then
        return TRUE
    else
        return FALSE
    end
end

function IsDashmastersString()
    if env(1116, 112540) == TRUE or env(1116, 112541) == TRUE or env(1116, 112542) == TRUE or env(1116, 112543) == TRUE or env(1116, 112544) == TRUE or env(1116, 112545) == TRUE then
        return TRUE
    else
        return FALSE
    end
end

function IsRingOfRetreat()
    if env(1116, 112530) == TRUE or env(1116, 112531) == TRUE or env(1116, 112532) == TRUE or env(1116, 112533) == TRUE or env(1116, 112534) == TRUE or env(1116, 112535) == TRUE then
        return TRUE
    else
        return FALSE
    end
end

function IsGowersRingOfRetribution()
    if env(1116, 112500) == TRUE or env(1116, 112501) == TRUE or env(1116, 112502) == TRUE or env(1116, 112503) == TRUE or env(1116, 112504) == TRUE or env(1116, 112505) == TRUE then
        return TRUE
    else
        return FALSE
    end
end

function IsOldMansGambit()
    if env(1116, 112360) == TRUE or env(1116, 112361) == TRUE or env(1116, 112362) == TRUE or env(1116, 112363) == TRUE or env(1116, 112364) == TRUE or env(1116, 112365) == TRUE then
        return TRUE
    else
        return FALSE
    end
end

function IsHornetRing()
    if env(1116, 112700) == TRUE or env(1116, 112701) == TRUE or env(1116, 112702) == TRUE or env(1116, 112703) == TRUE or env(1116, 112704) == TRUE or env(1116, 112705) == TRUE then
        return TRUE
    else
        return FALSE
    end
end

function IsAssassinsMark()
    if env(1116, 112720) == TRUE or env(1116, 112721) == TRUE or env(1116, 112722) == TRUE or env(1116, 112723) == TRUE or env(1116, 112724) == TRUE or env(1116, 112725) == TRUE then
        return TRUE
    else
        return FALSE
    end
end

function IsEldenRing()
    if env(1116, 112740) == TRUE or env(1116, 112741) == TRUE or env(1116, 112742) == TRUE or env(1116, 112743) == TRUE or env(1116, 112744) == TRUE or env(1116, 112745) == TRUE then
        return TRUE
    else
        return FALSE
    end
end

function IsCarthusMilkRing()
    if env(1116, 112010) == TRUE or env(1116, 112011) == TRUE or env(1116, 112012) == TRUE or env(1116, 112013) == TRUE or env(1116, 112014) == TRUE or env(1116, 112015) == TRUE then
        return TRUE
    else
        return FALSE
    end
end

function IsGreatwoodRemnants()
    if env(1116, 112020) == TRUE or env(1116, 112021) == TRUE or env(1116, 112022) == TRUE or env(1116, 112023) == TRUE or env(1116, 112024) == TRUE or env(1116, 112025) == TRUE then
        return TRUE
    else
        return FALSE
    end
end

function IsFoolsSigil()
    if env(1116, 112030) == TRUE or env(1116, 112031) == TRUE or env(1116, 112032) == TRUE or env(1116, 112033) == TRUE or env(1116, 112034) == TRUE or env(1116, 112035) == TRUE then
        return TRUE
    else
        return FALSE
    end
end


------------------------------------------
-- Cat's Stuff
------------------------------------------
function AttackRightLight1Alt_onUpdate()
	local r1 = "W_AttackRightLight2Alt"
    local r2 = "W_AttackRightHeavy1SubStartAlt"
    local hand = HAND_RIGHT
       
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	
    if IsWarcrySpAtk() == TRUE then
        r2 = "W_AttackRightHeavySpecial2Start"
    end	
	
    if AttackCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight2", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackRightLight2Alt_onUpdate()
	local r1 = "W_AttackRightLight3Alt"
    local r2 = "W_AttackRightHeavy1StartAlt"
    local hand = HAND_RIGHT
       
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	
    if IsWarcrySpAtk() == TRUE then
        r2 = "W_AttackRightHeavySpecial2Start"
    end		
	
    if AttackCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight3", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackRightLight3Alt_onUpdate()
	local r1 = "W_AttackRightLight2Alt"
    local r2 = "W_AttackRightHeavy1SubStartAlt"
    local hand = HAND_RIGHT
       
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	
    if sp_kind == 752 or sp_kind == 754 then
        r1 = "W_AttackRightLight4Alt"
    end

    if IsWarcrySpAtk() == TRUE then
        r2 = "W_AttackRightHeavySpecial2Start"
    end		
	
    if AttackCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight2", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackRightLight4Alt_onUpdate()
	local r1 = "W_AttackRightLight2Alt"
    local r2 = "W_AttackRightHeavy1StartAlt"
    local hand = HAND_RIGHT
       
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	
    if sp_kind == 752 then
        r2 = "W_AttackRightHeavy2StartAlt"
    end	
	
    if IsWarcrySpAtk() == TRUE then
        r2 = "W_AttackRightHeavySpecial2Start"
    end	
	
    if AttackCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight3", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackRightLight5Alt_onUpdate()
	local r1 = "W_AttackRightLight3Alt"
    local r2 = "W_AttackRightHeavy2StartAlt"
    local hand = HAND_RIGHT
       
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	
    if IsWarcrySpAtk() == TRUE then
        r2 = "W_AttackRightHeavySpecial2Start"
    end		
					
    if AttackCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight3", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackRightLightDashAlt_onUpdate()
    local r1 = "W_AttackRightLight1Alt"
	local r2 = "W_AttackRightHeavy1StartAlt"
    local hand = HAND_RIGHT
       
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	
	if sp_kind == 752 then
		r1 = "W_AttackRightLight2Alt"
	end	

	if sp_kind == 754 then
		r1 = "W_AttackRightLight3Alt"   
	end		
	
    if IsWarcrySpAtk() == TRUE then
        r2 = "W_AttackRightHeavySpecial2Start"
    end		
	
    if AttackCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackRightHeavy1SubStartAlt_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy2Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy2Start", FALSE, TRUE) == TRUE then
        return 
    elseif env(301, 0) == TRUE or env("アニメ終了か", 1) == TRUE then -- GetEventEzStateFlag or IsAnimEnd
        act("特殊補間設定", 0, TRUE) -- Special interpolation setting
        ExecEventAllBody("W_AttackRightHeavy1StartAlt")
        return 
    else
        return 
    end
end

function AttackRightHeavy1StartAlt_onUpdate()
    act("特殊補間設定", 0, FALSE) -- Special interpolation setting
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy2Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy2Start", FALSE, TRUE) == TRUE then
        return 
    elseif env(1108, ACTION_ARM_R2) <= 0 and env(1116, 100280) == TRUE then -- ActionDuration 
        ExecEventAllBody("W_AttackRightHeavy1EndAlt")
        return		
    else
		return
    end
end

function AttackRightHeavy1EndAlt_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy2Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy2Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackRightHeavy2StartAlt_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    elseif env(1108, ACTION_ARM_R2) <= 0 and env(1116, 100280) == TRUE then -- ActionDuration 
        ExecEventAllBody("W_AttackRightHeavy2EndAlt")
        return		
    elseif env(1116, 100710) == TRUE then
        ExecEventAllBody("W_AttackRightHeavySpecial1SubStart")
        return
	else
    end
end

function AttackRightHeavy2EndAlt_onUpdate()
	local r1 = "W_AttackRightLight1Alt"
    local hand = HAND_RIGHT
	
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	
    if AttackCommonFunction(r1, "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackRightLightStepAlt_onUpdate()
    local r1 = "W_AttackRightLight1Alt"
	local r2 = "W_AttackRightHeavy1StartAlt"
    local hand = HAND_RIGHT
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	
    if IsWarcrySpAtk() == TRUE then
        r2 = "W_AttackRightHeavySpecial1SubStart"
    end		
	
	if sp_kind == 754 then
		r1 = "W_AttackRightLight2Alt"
	end	
    
    if AttackCommonFunction(r1, r2, "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothLight1Alt_onUpdate()
    local b1 = "W_AttackBothLight2Alt"
    local b2 = "W_AttackBothHeavy1SubStartAlt"
	local l1 = "W_AttackBothLeft2"
    local hand = HAND_RIGHT
    local style = c_Style
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
	
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	
    if IsWarcrySpAtk() == TRUE then
        b2 = "W_AttackBothHeavySpecial2Start"
    end	

	if sp_kind == 754 then 
		l1 = "W_AttackBothLeft1"
	end	
	
    if AttackCommonFunction("W_AttackRightLight2", "W_AttackRightHeavy1Start", l1, "W_AttackLeftHeavy1", b1, b2, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothLight2Alt_onUpdate()
    local b1 = "W_AttackBothLight3Alt"
    local b2 = "W_AttackBothHeavy1StartAlt"
    local l1 = "W_AttackBothLeft3"	
    local hand = HAND_RIGHT
    local style = c_Style
    
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end
    
    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)

    if IsWarcrySpAtk() == TRUE then
        b2 = "W_AttackBothHeavySpecial2Start"
    end	

	if sp_kind == 754 then 
		l1 = "W_AttackBothLeft1"
	end	
    
    if AttackCommonFunction("W_AttackRightLight3", "W_AttackRightHeavy1Start", l1, "W_AttackLeftHeavy1", b1, b2, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothLight3Alt_onUpdate()
    local b1 = "W_AttackBothLight2Alt"
    local b2 = "W_AttackBothHeavy1SubStartAlt"	
	local l1 = "W_AttackBothLeft2"
    local hand = HAND_RIGHT
    local style = c_Style
    
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end

    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
    	
	if sp_kind == 752 or sp_kind == 754 or sp_kind == 751 then
		b1 = "W_AttackBothLight4Alt"
	end
	
	if sp_kind == 754 then 
		l1 = "W_AttackBothLeft1"
	end		
    if IsWarcrySpAtk() == TRUE then
        b2 = "W_AttackBothHeavySpecial2Start"
    end			   	

    if AttackCommonFunction("W_AttackRightLight2", "W_AttackRightHeavy1Start", l1, "W_AttackLeftHeavy1", b1, b2, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothLight4Alt_onUpdate()
    local b1 = "W_AttackBothLight2Alt"
    local b2 = "W_AttackBothHeavy2StartAlt"	
	local l1 = "W_AttackBothLeft1"
    local hand = HAND_RIGHT
    local style = c_Style
    
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end

    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)

    if IsWarcrySpAtk() == TRUE then
        b2 = "W_AttackBothHeavySpecial2Start"
    end	
	
	if sp_kind == 754 then
		b1 = "W_AttackBothLight5Alt"
		l1 = "W_AttackBothLeft1"		
	end	
    if AttackCommonFunction("W_AttackRightLight2", "W_AttackRightHeavy1Start", l1, "W_AttackLeftHeavy1", b1, b2, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothLight5Alt_onUpdate()
    local b1 = "W_AttackBothLight3Alt"
    local b2 = "W_AttackBothHeavy1SubStartAlt"	
	local l1 = "W_AttackBothLeft2"
    local hand = HAND_RIGHT
    local style = c_Style
    
    if style == HAND_LEFT_BOTH then
        hand = HAND_LEFT
    end

    local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	
    if IsWarcrySpAtk() == TRUE then
        b2 = "W_AttackBothHeavySpecial2Start"
    end		
	
	if sp_kind == 754 then 
		l1 = "W_AttackBothLeft1"
	end	

    if AttackCommonFunction("W_AttackRightLight2", "W_AttackRightHeavy1Start", l1, "W_AttackLeftHeavy1", b1, b2, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothHeavy1SubStartAlt_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackBothLeft1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy2Start", FALSE, TRUE) == TRUE then
        return 
    elseif env(301, 0) == TRUE or env("アニメ終了か", 1) == TRUE then
        act("特殊補間設定", 0, TRUE)
        ExecEventAllBody("W_AttackBothHeavy1StartAlt")
        return 
    else
        return 
    end
end

function AttackBothHeavy1StartAlt_onUpdate()
    act("特殊補間設定", 0, FALSE)
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackBothLeft1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy2Start", FALSE, TRUE) == TRUE then
        return 
    elseif env(1108, ACTION_ARM_R2) <= 0 and env(1116, 100280) == TRUE then
        ExecEventAllBody("W_AttackBothHeavy1EndAlt")
        return 
    elseif env(1116, 100715) == TRUE then
        ExecEventAllBody("W_AttackBothHeavySpecial1SubStart")
        return 	 
    end
end

function AttackBothHeavy1EndAlt_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackBothLeft1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy2Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothHeavy2StartAlt_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackBothLeft1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    elseif env(1108, ACTION_ARM_R2) <= 0 and env(1116, 100280) == TRUE then
        ExecEventAllBody("W_AttackBothHeavy2EndAlt")
        return
    else
        return 
    end
end

function AttackBothHeavy2EndAlt_onUpdate()
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackBothLeft1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1Start", FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothDashAlt_onUpdate()
	local l1 = "W_AttackBothLeft1"
	local b1 = "W_AttackBothLight1Alt"
	local b2 = "W_AttackBothHeavy1StartAlt"
   	local hand = HAND_RIGHT
   	local style = c_Style
	
   	if style == HAND_LEFT_BOTH then
      	hand = HAND_LEFT
    end
	
	local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	    	
	if sp_kind == 752 or sp_kind == 751 then
		b1 = "W_AttackBothLight2Alt"
	end		
	
    if IsWarcrySpAtk() == TRUE then
        b2 = "W_AttackBothHeavySpecial2Start"
    end		
	
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", l1, "W_AttackLeftHeavy1", b1, b2, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

function AttackBothLightStepAlt_onUpdate()
	local l1 = "W_AttackBothLeft1"
	local b1 = "W_AttackBothLight1Alt"
	local b2 = "W_AttackBothHeavy1StartAlt"
   	local hand = HAND_RIGHT
   	local style = c_Style
	
   	if style == HAND_LEFT_BOTH then
      	hand = HAND_LEFT
    end
	
	local sp_kind = env("装備武器特殊カテゴリ番号取得", hand)
	
    if IsWarcrySpAtk() == TRUE then
        b2 = "W_AttackBothHeavySpecial1SubStart"
    end	

	if sp_kind == 754 then
		b1 = "W_AttackBothLight2Alt"
	end	

	if sp_kind == 751 then
		b1 = "W_AttackBothLight4Alt"
	end		
	
    if AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", l1, "W_AttackLeftHeavy1", b1, b2, FALSE, TRUE) == TRUE then
        return 
    else
        return 
    end
end

------------------------------------------
------------------------------------------
global = {}
function dummy()
    return 
end

global.__index = function (table, element)
    return dummy
end

setmetatable(_G, global)
return 
