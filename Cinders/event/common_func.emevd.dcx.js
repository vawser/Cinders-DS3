// ==EMEVD==
// @docs    ds3-common.emedf.json
// @compress    DarkSouls3
// @game    DarkSouls3
// @string    
// @linked    []
// ==/EMEVD==

//--------------------------------------
// Wakeup - Alerted by Player in Region
//--------------------------------------
Event(20005110, Restart, function(X0_4, X4_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterAIState(X0_4, Disabled);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X4_4, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfCharacterDamagedBy(OR_02, X0_4, 10000);
    IfConditionGroup(OR_02, PASS, AND_01);
    IfConditionGroup(MAIN, PASS, OR_02);
    SetCharacterAIState(X0_4, Enabled);
});

//--------------------------------------
// Wakeup - Alerted by Player in Region - Play Animation on Alert
//--------------------------------------
Event(20005111, Restart, function(X0_4, X4_4, X8_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterAIState(X0_4, Disabled);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X8_4, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfCharacterDamagedBy(OR_02, X0_4, 10000);
    IfConditionGroup(OR_02, PASS, AND_01);
    IfConditionGroup(MAIN, PASS, OR_02);
    ForceAnimationPlayback(X0_4, X4_4, false, false, true, 0, 1);
    SetCharacterAIState(X0_4, Enabled);
});

//--------------------------------------
// Wakeup - Alerted by Player in Region - Enable Gravity on Alert
//--------------------------------------
Event(20005112, Restart, function(X0_4, X4_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterAIState(X0_4, Disabled);
    SetCharacterGravity(X0_4, Disabled);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X4_4, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfCharacterDamagedBy(OR_02, X0_4, 10000);
    IfConditionGroup(OR_02, PASS, AND_01);
    IfConditionGroup(MAIN, PASS, OR_02);
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterAIState(X0_4, Enabled);
});

//--------------------------------------
// Wakeup - Alerted by Player in Region - Delayed Alert, Enable Gravity on Alert, Unknown Effect
//--------------------------------------
Event(20005113, Restart, function(X0_4, X4_4, X8_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterAIState(X0_4, Disabled);
    SetCharacterGravity(X0_4, Disabled);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X4_4, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfCharacterDamagedBy(OR_02, X0_4, 10000);
    IfConditionGroup(OR_02, PASS, AND_01);
    IfConditionGroup(MAIN, PASS, OR_02);
    SetAutogeneratedEventspecificEventFlag2Unknown200375(2, 1);
    SkipIfConditionGroupStateCompiled(1, FAIL, AND_01);
    WaitFixedTimeSeconds(X8_4);
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterAIState(X0_4, Enabled);
});

//--------------------------------------
// Wakeup - Alerted by Player in Region - Delayed Alert, Unknown Effect
//--------------------------------------
Event(20005114, Restart, function(X0_4, X4_4, X8_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterAIState(X0_4, Disabled);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X4_4, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfCharacterDamagedBy(OR_02, X0_4, 10000);
    IfConditionGroup(OR_02, PASS, AND_01);
    IfConditionGroup(MAIN, PASS, OR_02);
    SetAutogeneratedEventspecificEventFlag2Unknown200375(2, 1);
    SkipIfConditionGroupStateCompiled(1, FAIL, AND_01);
    WaitFixedTimeSeconds(X8_4);
    SetCharacterAIState(X0_4, Enabled);
});

//--------------------------------------
// Wakeup - Alerted by Player in Region - Play Animation
//--------------------------------------
Event(20005115, Restart, function(X0_4, X4_4, X8_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterAIState(X0_4, Disabled);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X8_4, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfCharacterDamagedBy(OR_02, X0_4, 10000);
    IfConditionGroup(OR_02, PASS, AND_01);
    IfConditionGroup(MAIN, PASS, OR_02);
    ForceAnimationPlayback(X0_4, X4_4, false, false, true, 0, 1);
    SetCharacterAIState(X0_4, Enabled);
});

//--------------------------------------
// Wakeup - Alerted by Player in Multiple Regions
//--------------------------------------
Event(20005119, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterAIState(X0_4, Disabled);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X4_4, 1);
    SkipIfComparison(1, ComparisonType.Equal, X8_4, 0);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X8_4, 1);
    SkipIfComparison(1, ComparisonType.Equal, X12_4, 0);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X12_4, 1);
    SkipIfComparison(1, ComparisonType.Equal, X16_4, 0);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X16_4, 1);
    SkipIfComparison(1, ComparisonType.Equal, X20_4, 0);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X20_4, 1);
    SkipIfComparison(1, ComparisonType.Equal, X24_4, 0);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X24_4, 1);
    SkipIfComparison(1, ComparisonType.Equal, X28_4, 0);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X28_4, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfConditionGroup(AND_01, PASS, OR_02);
    IfConditionGroup(OR_03, PASS, AND_01);
    IfCharacterDamagedBy(OR_03, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_03);
    SetCharacterAIState(X0_4, Enabled);
});

//--------------------------------------
// Wakeup - Alerted by Player at Distance
//--------------------------------------
Event(20005120, Restart, function(X0_4, X4_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterAIState(X0_4, Disabled);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfEntityInoutsideRadiusOfEntity(AND_01, InsideOutsideState.Inside, 10000, X0_4, X4_4, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfCharacterDamagedBy(OR_02, X0_4, 10000);
    IfConditionGroup(OR_02, PASS, AND_01);
    IfConditionGroup(MAIN, PASS, OR_02);
    SetCharacterAIState(X0_4, Enabled);
});

//--------------------------------------
// Wakeup - Alerted by Player at Distance - Delayed Alert
//--------------------------------------
Event(20005121, Restart, function(X0_4, X4_4, X8_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterAIState(X0_4, Disabled);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfEntityInoutsideRadiusOfEntity(AND_01, InsideOutsideState.Inside, 10000, X0_4, X4_4, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfCharacterDamagedBy(OR_02, X0_4, 10000);
    IfConditionGroup(OR_02, PASS, AND_01);
    IfConditionGroup(MAIN, PASS, OR_02);
    SetAutogeneratedEventspecificEventFlag2Unknown200375(2, 1);
    SkipIfConditionGroupStateCompiled(1, FAIL, AND_01);
    WaitFixedTimeSeconds(X8_4);
    SetCharacterAIState(X0_4, Enabled);
});

//--------------------------------------
// Wakeup - Alerted by Player at Distance - Play Animation
//--------------------------------------
Event(20005122, Restart, function(X0_4, X4_4, X8_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterAIState(X0_4, Disabled);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfEntityInoutsideRadiusOfEntity(AND_01, InsideOutsideState.Inside, 10000, X0_4, X8_4, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfCharacterDamagedBy(OR_02, X0_4, 10000);
    IfConditionGroup(OR_02, PASS, AND_01);
    IfConditionGroup(MAIN, PASS, OR_02);
    ForceAnimationPlayback(X0_4, X4_4, false, false, true, 0, 1);
    SetCharacterAIState(X0_4, Enabled);
});

//--------------------------------------
// Wakeup - Alerted by Player at Distance AND In Region
//--------------------------------------
Event(20005130, Restart, function(X0_4, X4_4, X8_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterAIState(X0_4, Disabled);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfEntityInoutsideRadiusOfEntity(AND_01, InsideOutsideState.Inside, 10000, X0_4, X4_4, 1);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X8_4, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfCharacterDamagedBy(OR_03, X0_4, 10000);
    IfConditionGroup(OR_03, PASS, AND_01);
    IfConditionGroup(MAIN, PASS, OR_03);
    SetCharacterAIState(X0_4, Enabled);
});

//--------------------------------------
// Wakeup - Alerted by Player at Distance AND In Region - Play Animation
//-------------------------------------- 
Event(20005131, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterAIState(X0_4, Disabled);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfEntityInoutsideRadiusOfEntity(AND_01, InsideOutsideState.Inside, 10000, X0_4, X8_4, 1);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X12_4, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfCharacterDamagedBy(OR_03, X0_4, 10000);
    IfConditionGroup(OR_03, PASS, AND_01);
    IfConditionGroup(MAIN, PASS, OR_03);
    ForceAnimationPlayback(X0_4, X4_4, false, false, true, 0, 1);
    SetCharacterAIState(X0_4, Enabled);
});

//--------------------------------------
// Wakeup - Alerted by Player at Distance OR In Region
//--------------------------------------
Event(20005132, Restart, function(X0_4, X4_4, X8_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterAIState(X0_4, Disabled);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfEntityInoutsideRadiusOfEntity(OR_02, InsideOutsideState.Inside, 10000, X0_4, X4_4, 1);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X8_4, 1);
    IfConditionGroup(AND_01, PASS, OR_02);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfCharacterDamagedBy(OR_03, X0_4, 10000);
    IfConditionGroup(OR_03, PASS, AND_01);
    IfConditionGroup(MAIN, PASS, OR_03);
    SetCharacterAIState(X0_4, Enabled);
});

//--------------------------------------
// Wakeup - Alerted by Player at Distance OR In Region - Play Animation
//--------------------------------------
Event(20005133, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterAIState(X0_4, Disabled);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfEntityInoutsideRadiusOfEntity(OR_02, InsideOutsideState.Inside, 10000, X0_4, X8_4, 1);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X12_4, 1);
    IfConditionGroup(AND_01, PASS, OR_02);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfCharacterDamagedBy(OR_03, X0_4, 10000);
    IfConditionGroup(OR_03, PASS, AND_01);
    IfConditionGroup(MAIN, PASS, OR_03);
    ForceAnimationPlayback(X0_4, X4_4, false, false, true, 0, 1);
    SetCharacterAIState(X0_4, Enabled);
});

//--------------------------------------
// Wakeup - Alerted by Player at Distance OR In Region - Play Animation if not in secondary region
//--------------------------------------
Event(20005134, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterAIState(X0_4, Disabled);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfEntityInoutsideRadiusOfEntity(OR_02, InsideOutsideState.Inside, 10000, X0_4, X8_4, 1);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X12_4, 1);
    IfConditionGroup(AND_01, PASS, OR_02);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfCharacterDamagedBy(OR_04, X0_4, 10000);
    IfConditionGroup(OR_04, PASS, AND_01);
    IfConditionGroup(MAIN, PASS, OR_04);
    IfInoutsideArea(OR_09, InsideOutsideState.Inside, 10000, X12_4, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, FAIL, OR_09);
    ForceAnimationPlayback(X0_4, X4_4, false, false, true, 0, 1);
    Label0();
    SetCharacterAIState(X0_4, Enabled);
});

//--------------------------------------
// Wakeup - Alerted by Player in Region
//--------------------------------------
Event(20005140, Restart, function(X0_4, X4_4, X8_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterAIState(X0_4, Disabled);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X4_4, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfCharacterAIState(OR_03, X8_4, AIStateType.Combat, ComparisonType.Equal, 1);
    IfCharacterDamagedBy(OR_03, X0_4, 10000);
    IfConditionGroup(OR_03, PASS, AND_01);
    IfConditionGroup(MAIN, PASS, OR_03);
    SetCharacterAIState(X0_4, Enabled);
});

//--------------------------------------
// Wakeup - Alerted by Damage
//--------------------------------------
Event(20005150, Restart, function(X0_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterAIState(X0_4, Disabled);
    IfCharacterDamagedBy(MAIN, X0_4, 10000);
    SetCharacterAIState(X0_4, Enabled);
});

//--------------------------------------
// Remove Sight - Restore if Player is in Region
//--------------------------------------
Event(20005192, Restart, function(X0_4, X4_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetSpeffect(X0_4, 99006);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X4_4, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfCharacterDamagedBy(OR_02, X0_4, 10000);
    IfConditionGroup(OR_02, PASS, AND_01);
    IfConditionGroup(MAIN, PASS, OR_02);
    ClearSpeffect(X0_4, 99006);
});


//--------------------------------------
// Remove Sight - Restore if Player is at Distance
//--------------------------------------
Event(20005190, Restart, function(X0_4, X4_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetSpeffect(X0_4, 99006);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfEntityInoutsideRadiusOfEntity(AND_01, InsideOutsideState.Inside, 10000, X0_4, X4_4, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfCharacterDamagedBy(OR_02, X0_4, 10000);
    IfConditionGroup(OR_02, PASS, AND_01);
    IfConditionGroup(MAIN, PASS, OR_02);
    ClearSpeffect(X0_4, 99006);
});

//--------------------------------------
// Remove Sight - Restore if Damaged
//--------------------------------------
Event(20005191, Restart, function(X0_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetSpeffect(X0_4, 99006);
    IfCharacterDamagedBy(MAIN, X0_4, 10000);
    ClearSpeffect(X0_4, 99006);
});

//--------------------------------------
// Loop Animation - Remove if Player is in Region
//--------------------------------------
Event(20005200, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X12_4, 1);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfConditionGroup(OR_02, PASS, AND_01);
    IfCharacterDamagedBy(OR_02, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_02);
    
    WaitFixedTimeSeconds(0.1);
    
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    EndIfConditionGroupStateUncompiled(EventEndType.End, PASS, AND_02);
    
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
});

//--------------------------------------
// Loop Animation - Remove if Player is in Region - Unknown Effect
//--------------------------------------
Event(20005201, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X12_4, 1);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfConditionGroup(OR_02, PASS, AND_01);
    IfCharacterDamagedBy(OR_02, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_02);
    
    WaitFixedTimeSeconds(0.1);
    
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    EndIfConditionGroupStateUncompiled(EventEndType.End, PASS, AND_02);
    
    SetAutogeneratedEventspecificEventFlag2Unknown200375(2, 1);
    SkipIfConditionGroupStateCompiled(1, FAIL, AND_01);
    WaitFixedTimeSeconds(X16_4);
    
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
});

//--------------------------------------
// Hang Animation - Remove if Player is in Region
//--------------------------------------
Event(20005202, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterGravity(X0_4, Disabled);
    SetCharacterMaphit(X0_4, true);
    ForceAnimationPlayback(X0_4, X4_4, true, false, true, 0, 1);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X12_4, 1);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfConditionGroup(OR_02, PASS, AND_01);
    IfCharacterDamagedBy(OR_02, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_02);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_02);
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
    EndUnconditionally(EventEndType.End);
    Label0();
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
});

//--------------------------------------
// Loop Animation - Remove if Player is in Multiple Regions
//--------------------------------------
Event(20005203, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4, X32_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X12_4, 1);
    SkipIfComparison(1, ComparisonType.Equal, X16_4, 0);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X16_4, 1);
    SkipIfComparison(1, ComparisonType.Equal, X20_4, 0);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X20_4, 1);
    SkipIfComparison(1, ComparisonType.Equal, X24_4, 0);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X24_4, 1);
    SkipIfComparison(1, ComparisonType.Equal, X28_4, 0);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X28_4, 1);
    SkipIfComparison(1, ComparisonType.Equal, X32_4, 0);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X32_4, 1);
    IfConditionGroup(AND_01, PASS, OR_02);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfConditionGroup(OR_03, PASS, AND_01);
    IfCharacterDamagedBy(OR_03, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_03);
    WaitFixedTimeSeconds(0.1);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    EndIfConditionGroupStateUncompiled(EventEndType.End, PASS, AND_02);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
});

// Enemy - Wake-up
Event(20005204, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X12_4, 1);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X24_4, 1);
    IfConditionGroup(AND_01, PASS, OR_02);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfConditionGroup(OR_03, PASS, AND_01);
    IfCharacterDamagedBy(OR_03, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_02);
    WaitFixedTimeSeconds(0.1);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    EndIfConditionGroupStateUncompiled(EventEndType.End, PASS, AND_02);
    SetAutogeneratedEventspecificEventFlag2Unknown200375(2, 1);
    IfInoutsideArea(OR_04, InsideOutsideState.Inside, 10000, X24_4, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, OR_04);
    SkipIfConditionGroupStateCompiled(1, FAIL, AND_01);
    WaitFixedTimeSeconds(X16_4);
    ForceAnimationPlayback(X0_4, X8_4, false, true, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
    EndUnconditionally(EventEndType.End);
    Label0();
    SkipIfConditionGroupStateCompiled(1, FAIL, AND_01);
    WaitFixedTimeSeconds(X28_4);
    ForceAnimationPlayback(X0_4, X20_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
    EndUnconditionally(EventEndType.End);
});

// Enemy - Hang until triggered
Event(20005205, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterGravity(X0_4, Disabled);
    SetCharacterMaphit(X0_4, true);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X12_4, 1);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfConditionGroup(OR_02, PASS, AND_01);
    IfCharacterDamagedBy(OR_02, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_02);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_02);
    SetAutogeneratedEventspecificEventFlag2Unknown200375(2, 1);
    SkipIfConditionGroupStateCompiled(1, FAIL, AND_01);
    WaitFixedTimeSeconds(X16_4);
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
    EndUnconditionally(EventEndType.End);
    Label0();
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
});

Event(20005206, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4, X32_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterGravity(X0_4, Disabled);
    SetCharacterMaphit(X0_4, true);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X12_4, 1);
    SkipIfComparison(1, ComparisonType.Equal, X16_4, 0);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X16_4, 1);
    SkipIfComparison(1, ComparisonType.Equal, X20_4, 0);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X20_4, 1);
    SkipIfComparison(1, ComparisonType.Equal, X24_4, 0);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X24_4, 1);
    SkipIfComparison(1, ComparisonType.Equal, X28_4, 0);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X28_4, 1);
    SkipIfComparison(1, ComparisonType.Equal, X32_4, 0);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X32_4, 1);
    IfConditionGroup(AND_01, PASS, OR_02);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfConditionGroup(OR_03, PASS, AND_01);
    IfCharacterDamagedBy(OR_03, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_03);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_02);
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
    EndUnconditionally(EventEndType.End);
    Label0();
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
});

Event(20005207, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterGravity(X0_4, Disabled);
    SetCharacterMaphit(X0_4, true);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X12_4, 1);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X24_4, 1);
    IfConditionGroup(AND_01, PASS, OR_02);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfConditionGroup(OR_03, PASS, AND_01);
    IfCharacterDamagedBy(OR_03, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_03);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL1, PASS, AND_02);
    SetAutogeneratedEventspecificEventFlag2Unknown200375(2, 1);
    IfInoutsideArea(OR_04, InsideOutsideState.Inside, 10000, X24_4, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, OR_04);
    SkipIfConditionGroupStateCompiled(1, FAIL, AND_01);
    WaitFixedTimeSeconds(X16_4);
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
    ForceAnimationPlayback(X0_4, X8_4, false, true, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
    EndUnconditionally(EventEndType.End);
    Label0();
    SkipIfConditionGroupStateCompiled(1, FAIL, AND_01);
    WaitFixedTimeSeconds(X28_4);
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
    ForceAnimationPlayback(X0_4, X20_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
    EndUnconditionally(EventEndType.End);
    Label1();
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
});

//--------------------------------------
// Loop Animation/Toggle AI - Remove if Player is in Region
//--------------------------------------
Event(20005208, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    
    SetCharacterAIState(X0_4, Disabled);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);

    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X12_4, 1);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfConditionGroup(OR_02, PASS, AND_01);
    IfCharacterDamagedBy(OR_02, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_02);
    
    WaitFixedTimeSeconds(0.1);
    
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    SetCharacterAIState(X0_4, Enabled);
    RequestCharacterAIReplan(X0_4);
});

// Enemy - Animate on wakeup
Event(20005210, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfEntityInoutsideRadiusOfEntity(AND_01, InsideOutsideState.Inside, 10000, X0_4, X12_4, 1);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfConditionGroup(OR_02, PASS, AND_01);
    IfCharacterDamagedBy(OR_02, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_02);
    WaitFixedTimeSeconds(0.1);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    EndIfConditionGroupStateUncompiled(EventEndType.End, PASS, AND_02);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
});

Event(20005211, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfEntityInoutsideRadiusOfEntity(AND_01, InsideOutsideState.Inside, 10000, X0_4, X12_4, 1);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfConditionGroup(OR_02, PASS, AND_01);
    IfCharacterDamagedBy(OR_02, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_02);
    WaitFixedTimeSeconds(0.1);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    EndIfConditionGroupStateUncompiled(EventEndType.End, PASS, AND_02);
    SetAutogeneratedEventspecificEventFlag2Unknown200375(2, 1);
    SkipIfConditionGroupStateCompiled(1, FAIL, AND_01);
    WaitFixedTimeSeconds(X16_4);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
});

// Enemy - Wake-up
Event(20005212, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfEntityInoutsideRadiusOfEntity(AND_01, InsideOutsideState.Inside, 10000, X0_4, X12_4, 1);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X16_4, 1);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfConditionGroup(OR_02, PASS, AND_01);
    IfCharacterDamagedBy(OR_02, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_02);
    WaitFixedTimeSeconds(0.1);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    EndIfConditionGroupStateUncompiled(EventEndType.End, PASS, AND_02);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
});

// Enemy - Wake-up
Event(20005213, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfEntityInoutsideRadiusOfEntity(OR_02, InsideOutsideState.Inside, 10000, X0_4, X12_4, 1);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X16_4, 1);
    IfConditionGroup(AND_01, PASS, OR_02);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfConditionGroup(OR_03, PASS, AND_01);
    IfCharacterDamagedBy(OR_03, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_03);
    WaitFixedTimeSeconds(0.1);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    EndIfConditionGroupStateUncompiled(EventEndType.End, PASS, AND_02);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
});

// Enemy -Toggle Gravity
Event(20005214, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterGravity(X0_4, Disabled);
    SetCharacterMaphit(X0_4, true);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfEntityInoutsideRadiusOfEntity(AND_01, InsideOutsideState.Inside, 10000, X0_4, X12_4, 1);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfConditionGroup(OR_02, PASS, AND_01);
    IfCharacterDamagedBy(OR_02, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_02);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_02);
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
    EndUnconditionally(EventEndType.End);
    Label0();
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
});

// Enemy - Toggle Gravity
Event(20005215, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterGravity(X0_4, Disabled);
    SetCharacterMaphit(X0_4, true);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfEntityInoutsideRadiusOfEntity(AND_01, InsideOutsideState.Inside, 10000, X0_4, X12_4, 1);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfConditionGroup(OR_02, PASS, AND_01);
    IfCharacterDamagedBy(OR_02, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_02);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_02);
    SetAutogeneratedEventspecificEventFlag2Unknown200375(2, 1);
    SkipIfConditionGroupStateCompiled(1, FAIL, AND_01);
    WaitFixedTimeSeconds(X16_4);
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
    EndUnconditionally(EventEndType.End);
    Label0();
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
});

// Enemy - Toggle Gravity
Event(20005216, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterGravity(X0_4, Disabled);
    SetCharacterMaphit(X0_4, true);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfEntityInoutsideRadiusOfEntity(AND_01, InsideOutsideState.Inside, 10000, X0_4, X12_4, 1);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X16_4, 1);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfConditionGroup(OR_02, PASS, AND_01);
    IfCharacterDamagedBy(OR_02, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_02);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_02);
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
    EndUnconditionally(EventEndType.End);
    Label0();
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
});

// Enemy - Toggle Gravity
Event(20005217, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterGravity(X0_4, Disabled);
    SetCharacterMaphit(X0_4, true);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfEntityInoutsideRadiusOfEntity(OR_02, InsideOutsideState.Inside, 10000, X0_4, X12_4, 1);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X16_4, 1);
    IfConditionGroup(AND_01, PASS, OR_02);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfConditionGroup(OR_03, PASS, AND_01);
    IfCharacterDamagedBy(OR_03, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_03);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_02);
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
    EndUnconditionally(EventEndType.End);
    Label0();
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
});

// Enemy - Toggle Gravity
Event(20005218, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterGravity(X0_4, Disabled);
    SetCharacterMaphit(X0_4, true);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfEntityInoutsideRadiusOfEntity(AND_01, InsideOutsideState.Inside, 10000, X0_4, X12_4, 1);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X16_4, 1);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfConditionGroup(OR_02, PASS, AND_01);
    IfCharacterDamagedBy(OR_02, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_02);
    SetAutogeneratedEventspecificEventFlag2Unknown200375(2, 1);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_02);
    SkipIfConditionGroupStateCompiled(1, FAIL, AND_01);
    WaitFixedTimeSeconds(X20_4);
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
    EndUnconditionally(EventEndType.End);
    Label0();
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
});

// Enemy - Toggle Gravity
Event(20005219, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterGravity(X0_4, Disabled);
    SetCharacterMaphit(X0_4, true);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfEntityInoutsideRadiusOfEntity(OR_02, InsideOutsideState.Inside, 10000, X0_4, X12_4, 1);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X16_4, 1);
    IfConditionGroup(AND_01, PASS, OR_02);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfConditionGroup(OR_03, PASS, AND_01);
    IfCharacterDamagedBy(OR_03, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_03);
    SetAutogeneratedEventspecificEventFlag2Unknown200375(2, 1);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_02);
    SkipIfConditionGroupStateCompiled(1, FAIL, AND_01);
    WaitFixedTimeSeconds(X20_4);
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
    EndUnconditionally(EventEndType.End);
    Label0();
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
});

// Enemy - Idle State (Attack)
Event(20005220, Restart, function(X0_4, X4_4, X8_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterAIState(OR_02, X0_4, AIStateType.Recognition, ComparisonType.Equal, 1);
    IfCharacterAIState(OR_02, X0_4, AIStateType.Combat, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_02);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_03, PASS, AND_01);
    IfCharacterDamagedBy(OR_03, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_03);
    WaitFixedTimeSeconds(0.1);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    EndIfConditionGroupStateUncompiled(EventEndType.End, PASS, AND_02);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
});

// Enemy - Idle State (Attack/Area)
Event(20005221, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterAIState(OR_01, X0_4, AIStateType.Recognition, ComparisonType.Equal, 1);
    IfCharacterAIState(OR_01, X0_4, AIStateType.Combat, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_02, PASS, AND_09);
    IfCharacterType(OR_02, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_02, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_02, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfConditionGroup(AND_02, PASS, OR_02);
    IfEntityInoutsideRadiusOfEntity(AND_02, InsideOutsideState.Inside, 10000, X0_4, X12_4, 1);
    IfCharacterBackreadStatus(AND_02, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(AND_03, PASS, AND_01);
    IfConditionGroup(AND_03, PASS, AND_02);
    IfConditionGroup(OR_03, PASS, AND_03);
    IfDamageType(OR_03, X0_4, 10000, DamageType.Unspecified);
    IfConditionGroup(MAIN, PASS, OR_03);
    WaitFixedTimeSeconds(0.1);
    IfCharacterHasSpeffect(AND_03, X0_4, 5450, false, ComparisonType.Equal, 1);
    EndIfConditionGroupStateUncompiled(EventEndType.End, PASS, AND_03);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
});

// Enemy - Idle State
Event(20005222, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterAIState(OR_01, X0_4, AIStateType.Recognition, ComparisonType.Equal, 1);
    IfCharacterAIState(OR_01, X0_4, AIStateType.Combat, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_02, PASS, AND_09);
    IfCharacterType(OR_02, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_02, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_02, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfConditionGroup(AND_02, PASS, OR_02);
    IfEntityInoutsideRadiusOfEntity(AND_02, InsideOutsideState.Inside, 10000, X0_4, X12_4, 1);
    IfCharacterBackreadStatus(AND_02, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(AND_03, PASS, AND_01);
    IfConditionGroup(AND_03, PASS, AND_02);
    IfConditionGroup(OR_03, PASS, AND_03);
    IfDamageType(OR_03, X0_4, 10000, DamageType.Unspecified);
    IfConditionGroup(MAIN, PASS, OR_03);
    SetAutogeneratedEventspecificEventFlag2Unknown200375(2, 1);
    WaitFixedTimeSeconds(0.1);
    IfCharacterHasSpeffect(AND_04, X0_4, 5450, false, ComparisonType.Equal, 1);
    EndIfConditionGroupStateUncompiled(EventEndType.End, PASS, AND_04);
    WaitFixedTimeSeconds(X16_4);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
});

// Enemy - Idle State
Event(20005223, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterAIState(OR_02, X0_4, AIStateType.Recognition, ComparisonType.Equal, 1);
    IfCharacterAIState(OR_02, X0_4, AIStateType.Combat, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_02);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_03, PASS, AND_01);
    IfCharacterDamagedBy(OR_03, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_03);
    SetAutogeneratedEventspecificEventFlag2Unknown200375(2, 1);
    WaitFixedTimeSeconds(0.1);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    EndIfConditionGroupStateUncompiled(EventEndType.End, PASS, AND_02);
    WaitFixedTimeSeconds(X12_4);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
});

// Enemy - Idle State
Event(20005224, Restart, function(X0_4, X4_4, X8_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterGravity(X0_4, Disabled);
    SetCharacterMaphit(X0_4, true);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterAIState(OR_02, X0_4, AIStateType.Recognition, ComparisonType.Equal, 1);
    IfCharacterAIState(OR_02, X0_4, AIStateType.Alert, ComparisonType.Equal, 1);
    IfCharacterAIState(OR_02, X0_4, AIStateType.Combat, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_02);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_03, PASS, AND_01);
    IfCharacterDamagedBy(OR_03, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_03);
    WaitFixedTimeSeconds(0.1);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    EndIfConditionGroupStateUncompiled(EventEndType.End, PASS, AND_02);
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
});

Event(20005225, Restart, function(X0_4, X4_4, X8_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterGravity(X0_4, Disabled);
    SetCharacterMaphit(X0_4, true);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterAIState(OR_02, X0_4, AIStateType.Recognition, ComparisonType.Equal, 1);
    IfCharacterAIState(OR_02, X0_4, AIStateType.Combat, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_02);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_03, PASS, AND_01);
    IfCharacterDamagedBy(OR_03, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_03);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_02);
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
    EndUnconditionally(EventEndType.End);
    Label0();
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
});

Event(20005226, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterGravity(X0_4, Disabled);
    SetCharacterMaphit(X0_4, true);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterAIState(OR_01, X0_4, AIStateType.Recognition, ComparisonType.Equal, 1);
    IfCharacterAIState(OR_01, X0_4, AIStateType.Combat, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfCharacterType(OR_02, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_02, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_02, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfConditionGroup(AND_02, PASS, OR_02);
    IfEntityInoutsideRadiusOfEntity(AND_02, InsideOutsideState.Inside, 10000, X0_4, X12_4, 1);
    IfCharacterBackreadStatus(AND_02, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(AND_03, PASS, AND_01);
    IfConditionGroup(AND_03, PASS, AND_02);
    IfConditionGroup(OR_03, PASS, AND_03);
    IfDamageType(OR_03, X0_4, 10000, DamageType.Unspecified);
    IfConditionGroup(MAIN, PASS, OR_03);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_02);
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
    EndUnconditionally(EventEndType.End);
    Label0();
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
});

Event(20005227, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterGravity(X0_4, Disabled);
    SetCharacterMaphit(X0_4, true);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterAIState(OR_01, X0_4, AIStateType.Recognition, ComparisonType.Equal, 1);
    IfCharacterAIState(OR_01, X0_4, AIStateType.Combat, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfCharacterType(OR_02, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_02, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_02, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfConditionGroup(AND_02, PASS, OR_02);
    IfEntityInoutsideRadiusOfEntity(AND_02, InsideOutsideState.Inside, 10000, X0_4, X12_4, 1);
    IfCharacterBackreadStatus(AND_02, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(AND_03, PASS, AND_01);
    IfConditionGroup(AND_03, PASS, AND_02);
    IfConditionGroup(OR_03, PASS, AND_03);
    IfDamageType(OR_03, X0_4, 10000, DamageType.Unspecified);
    IfConditionGroup(MAIN, PASS, OR_03);
    SetAutogeneratedEventspecificEventFlag2Unknown200375(2, 1);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_02);
    WaitFixedTimeSeconds(X16_4);
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
    EndUnconditionally(EventEndType.End);
    Label0();
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
});

Event(20005228, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterGravity(X0_4, Disabled);
    SetCharacterMaphit(X0_4, true);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterAIState(OR_02, X0_4, AIStateType.Recognition, ComparisonType.Equal, 1);
    IfCharacterAIState(OR_02, X0_4, AIStateType.Combat, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_02);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_03, PASS, AND_01);
    IfCharacterDamagedBy(OR_03, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_03);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_02);
    WaitFixedTimeSeconds(X12_4);
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
    EndUnconditionally(EventEndType.End);
    Label0();
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
});

Event(20005229, Restart, function(X0_4, X4_4, X8_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterGravity(X0_4, Disabled);
    SetCharacterMaphit(X0_4, true);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterAIState(OR_02, X0_4, AIStateType.Recognition, ComparisonType.Equal, 1);
    IfCharacterAIState(OR_02, X0_4, AIStateType.Alert, ComparisonType.Equal, 1);
    IfCharacterAIState(OR_02, X0_4, AIStateType.Combat, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_02);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_03, PASS, AND_01);
    IfCharacterDamagedBy(OR_03, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_03);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_02);
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
    EndUnconditionally(EventEndType.End);
    Label0();
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
});

Event(20005270, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterGravity(X0_4, Disabled);
    SetCharacterMaphit(X0_4, true);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterAIState(OR_02, X0_4, AIStateType.Recognition, ComparisonType.Equal, 1);
    IfCharacterAIState(OR_02, X0_4, AIStateType.Combat, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(OR_02, X0_4, X12_4, true, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_02);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_03, PASS, AND_01);
    IfCharacterDamagedBy(OR_03, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_03);
    SetAutogeneratedEventspecificEventFlag2Unknown200375(2, 1);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_02);
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
    EndUnconditionally(EventEndType.End);
    Label0();
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
});

Event(20005230, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfObjectDestroyed(EventEndType.End, DestructionState.Destroyed, X12_4, ComparisonType.Equal, 1);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfObjectDestroyed(AND_01, DestructionState.Destroyed, X12_4, ComparisonType.Equal, 1);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_01);
    IfDamageType(OR_01, X0_4, 10000, DamageType.Unspecified);
    IfConditionGroup(MAIN, PASS, OR_01);
    WaitFixedTimeSeconds(0.1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, false, ComparisonType.Equal, 1);
    EndIfConditionGroupStateUncompiled(EventEndType.End, PASS, AND_01);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
});

Event(20005231, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfObjectDestroyed(EventEndType.End, DestructionState.Destroyed, X12_4, ComparisonType.Equal, 1);
    SetCharacterGravity(X0_4, Disabled);
    SetCharacterMaphit(X0_4, true);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfObjectDestroyed(AND_01, DestructionState.Destroyed, X12_4, ComparisonType.Equal, 1);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_01);
    IfDamageType(OR_01, X0_4, 10000, DamageType.Unspecified);
    IfConditionGroup(MAIN, PASS, OR_01);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, false, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_01);
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
    EndUnconditionally(EventEndType.End);
    Label0();
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
});

Event(20005240, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, X12_4, true, ComparisonType.Equal, 1);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_01);
    IfDamageType(OR_01, X0_4, 10000, DamageType.Unspecified);
    IfConditionGroup(MAIN, PASS, OR_01);
    WaitFixedTimeSeconds(0.1);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    EndIfConditionGroupStateUncompiled(EventEndType.End, PASS, AND_02);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
});

Event(20005241, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterGravity(X0_4, Disabled);
    SetCharacterMaphit(X0_4, true);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, X12_4, true, ComparisonType.Equal, 1);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_01);
    IfDamageType(OR_01, X0_4, 10000, DamageType.Unspecified);
    IfConditionGroup(MAIN, PASS, OR_01);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_02);
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
    EndUnconditionally(EventEndType.End);
    Label0();
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
});

Event(20005243, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    ForceAnimationPlayback(X0_4, X4_4, false, false, false, 0, 1);
    IfCharacterHasSpeffect(AND_01, X12_4, X16_4, true, ComparisonType.Equal, 1);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_01);
    IfDamageType(OR_01, X0_4, 10000, DamageType.Unspecified);
    IfConditionGroup(MAIN, PASS, OR_01);
    SetAutogeneratedEventspecificEventFlag1Unknown200373(2, 1);
    WaitFixedTimeSeconds(0.1);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    EndIfConditionGroupStateUncompiled(EventEndType.End, PASS, AND_02);
    GotoIfConditionGroupStateCompiled(Label.LABEL0, FAIL, AND_01);
    WaitFixedTimeSeconds(X20_4);
    IfCharacterHasSpeffect(OR_03, X0_4, 5450, false, ComparisonType.Equal, 1);
    IfCharacterDeadalive(OR_03, X12_4, DeathState.Dead, ComparisonType.Equal, 1);
    EndIfConditionGroupStateUncompiled(EventEndType.End, PASS, OR_03);
    Label0();
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
});

// Enemy - Wake-up
Event(20005260, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterAIState(AND_01, X12_4, AIStateType.Combat, ComparisonType.Equal, 1);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_01);
    IfDamageType(OR_01, X0_4, 10000, DamageType.Unspecified);
    IfConditionGroup(MAIN, PASS, OR_01);
    WaitFixedTimeSeconds(0.1);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    EndIfConditionGroupStateUncompiled(EventEndType.End, PASS, AND_02);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
});

Event(20005261, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterGravity(X0_4, Disabled);
    SetCharacterMaphit(X0_4, true);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterAIState(AND_01, X12_4, AIStateType.Combat, ComparisonType.Equal, 1);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_01);
    IfDamageType(OR_01, X0_4, 10000, DamageType.Unspecified);
    IfConditionGroup(MAIN, PASS, OR_01);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_02);
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
    EndUnconditionally(EventEndType.End);
    Label0();
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
});

Event(20005265, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfCharacterHasSpeffect(AND_01, X12_4, 5450, false, ComparisonType.Equal, 1);
    IfCharacterBackreadStatus(AND_01, X12_4, true, ComparisonType.Equal, 1);
    IfCharacterAIState(AND_01, X12_4, AIStateType.Combat, ComparisonType.Equal, 1);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, 5450, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_01);
    IfDamageType(OR_01, X0_4, 10000, DamageType.Unspecified);
    IfConditionGroup(MAIN, PASS, OR_01);
    WaitFixedTimeSeconds(0.1);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    EndIfConditionGroupStateUncompiled(EventEndType.End, PASS, AND_02);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
});

// Enemy - Play Animation, Wakeup when attacked
Event(20005290, Restart, function(X0_4, X4_4, X8_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfDamageType(MAIN, X0_4, 10000, DamageType.Unspecified);
    WaitFixedTimeSeconds(0.1);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    EndIfConditionGroupStateUncompiled(EventEndType.End, PASS, AND_02);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
});

Event(20005291, Restart, function(X0_4, X4_4, X8_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfDamageType(MAIN, X0_4, 10000, DamageType.Unspecified);
    WaitFixedTimeSeconds(0.1);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    EndIfConditionGroupStateUncompiled(EventEndType.End, PASS, AND_02);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
});

Event(20005292, Restart, function(X0_4, X4_4, X8_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterGravity(X0_4, Disabled);
    SetCharacterMaphit(X0_4, true);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfDamageType(MAIN, X0_4, 10000, DamageType.Unspecified);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_02);
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
    EndUnconditionally(EventEndType.End);
    Label0();
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
});

Event(20005293, Restart, function(X0_4, X4_4, X8_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterGravity(X0_4, Disabled);
    SetCharacterMaphit(X0_4, true);
    ForceAnimationPlayback(X0_4, X4_4, true, false, false, 0, 1);
    IfDamageType(MAIN, X0_4, 10000, DamageType.Unspecified);
    IfCharacterHasSpeffect(AND_02, X0_4, 5450, false, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_02);
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
    ForceAnimationPlayback(X0_4, X8_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X0_4);
    EndUnconditionally(EventEndType.End);
    Label0();
    SetCharacterGravity(X0_4, Enabled);
    SetCharacterMaphit(X0_4, false);
});

Event(20005300, Restart, function(X0_4) {
    IfCharacterDeadalive(MAIN, X0_4, DeathState.Dead, ComparisonType.Equal, 1);
    SetCharacterAIState(X0_4, Disabled);
    ClearCharactersAITarget(X0_4);
});

Event(2005310, Restart, function(X0_4, X4_4, X8_4) {
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    ClearSpeffect(X0_4, X8_4);
    IfCharacterHasSpeffect(MAIN, X0_4, X4_4, false, ComparisonType.Equal, 1);
    Label0();
    SetSpeffect(X0_4, X8_4);
});

// Patrol - Update based on Area
Event(20005320, Restart, function(X0_4, X4_4, X8_4) {
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X4_4, 1);
    IfConditionGroup(AND_01, PASS, OR_02);
    IfConditionGroup(MAIN, PASS, AND_01);
    Label0();
    ChangeCharacterPatrolBehavior(X0_4, X8_4);
    EndUnconditionally(EventEndType.End);
});

Event(20005321, Restart, function(X0_4, X4_4, X8_4) {
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X4_4, 1);
    IfConditionGroup(AND_01, PASS, OR_02);
    IfConditionGroup(MAIN, PASS, AND_01);
    Label0();
    ChangeCharacterPatrolBehavior(X0_4, X8_4);
    SetSpeffect(X0_4, 5000);
    EndUnconditionally(EventEndType.End);
});

Event(20005322, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X4_4, 1);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X12_4, 1);
    IfConditionGroup(AND_01, PASS, OR_02);
    IfConditionGroup(MAIN, PASS, AND_01);
    IfInoutsideArea(AND_02, InsideOutsideState.Inside, 10000, X4_4, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_02);
    ChangeCharacterPatrolBehavior(X0_4, X16_4);
    EndUnconditionally(EventEndType.End);
    Label0();
    ChangeCharacterPatrolBehavior(X0_4, X8_4);
    EndUnconditionally(EventEndType.End);
});

// Enemy - Wake up and run into combat
Event(20005330, Restart, function(X0_4, X4_4, X8_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X8_4);
    SetCharacterAIState(X0_4, Disabled);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X4_4, 1);
    IfConditionGroup(AND_02, PASS, OR_01);
    IfConditionGroup(AND_02, PASS, AND_01);
    IfConditionGroup(OR_02, PASS, AND_02);
    IfCharacterDamagedBy(OR_02, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_02);
    Label0();
    SetEventFlag(X8_4, ON);
    SetSpeffect(X0_4, 5000);
    SetCharacterAIState(X0_4, Enabled);
    IfCharacterAIState(MAIN, X0_4, AIStateType.Combat, ComparisonType.Equal, 1);
    ClearSpeffect(X0_4, 5000);
});

Event(20005331, Restart, function(X0_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetSpeffect(X0_4, 5000);
    IfCharacterAIState(MAIN, X0_4, AIStateType.Combat, ComparisonType.Equal, 1);
    ClearSpeffect(X0_4, 5000);
});

//-----------------------------------
// Enemy - Disable on Kill
// <defeated flag>, <entity id>
//-----------------------------------
Event(20005340, Restart, function(X0_4, X4_4) {
    GotoIfEventFlag(Label.LABEL0, OFF, TargetEventFlagType.EventFlag, X0_4); // Goto Label 0 if not defeated
    
    // Disable enemy
    ChangeCharacterEnableState(X4_4, Disabled);
    SetCharacterAnimationState(X4_4, Disabled);
    ForceCharacterDeath(X4_4, false);
    EndUnconditionally(EventEndType.End);
    
    // Set defeated flag if enemy is killed
    Label0();
    IfCharacterDeadalive(MAIN, X4_4, DeathState.Dead, ComparisonType.Equal, 1);
    SetEventFlag(X0_4, ON);
    EndUnconditionally(EventEndType.End);
});

//-----------------------------------
// Enemy - Disable on Kill, Award Item on Kill
// <defeated flag>, <entity id>, <itemlot>
//-----------------------------------
Event(20005341, Restart, function(X0_4, X4_4, X8_4) {
    GotoIfEventFlag(Label.LABEL0, OFF, TargetEventFlagType.EventFlag, X0_4); // Goto Label 0 if not defeated
    
    // Disable enemy
    ChangeCharacterEnableState(X4_4, Disabled);
    SetCharacterAnimationState(X4_4, Disabled);
    ForceCharacterDeath(X4_4, false);
    EndUnconditionally(EventEndType.End);
    
    // Award item if enemy is killed
    Label0();
    IfCharacterDeadalive(MAIN, X4_4, DeathState.Dead, ComparisonType.Equal, 1);
    SetEventFlag(X0_4, ON);
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    AwardItemLot(X8_4);
    
    EndUnconditionally(EventEndType.End);
});

//-----------------------------------
// Enemy - Disable on Kill, Force Treasure on reload
// <defeated flag>, <entity id>
//-----------------------------------
Event(20005342, Restart, function(X0_4, X4_4) {
    GotoIfEventFlag(Label.LABEL0, OFF, TargetEventFlagType.EventFlag, X0_4); // Goto Label 0 if not defeated
    
    // Disable enemy, force treasure
    ChangeCharacterEnableState(X4_4, Disabled);
    ForceCharacterTreasure(X4_4);
    EndUnconditionally(EventEndType.End);
    
    // Set defeated flag if enemy is killed
    Label0();
    IfCharacterDeadalive(MAIN, X4_4, DeathState.Dead, ComparisonType.Equal, 1);
    SetEventFlag(X0_4, ON);
});

//-----------------------------------
// Enemy - Disable on Kill, Force Treasure on reload if not already taken
// <defeated flag>, <entity id>, <itemlot flag>
//-----------------------------------
Event(20000343, Restart, function(X0_4, X4_4, X8_4) {
    GotoIfEventFlag(Label.LABEL0, OFF, TargetEventFlagType.EventFlag, X0_4); // Goto Label 0 if not defeated
    
    // Disable enemy
    ChangeCharacterEnableState(X4_4, Disabled);
    SetCharacterAnimationState(X4_4, Disabled);
    
    // Skip force treasure if itemlot has already been taken
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, X8_4);
    ForceCharacterTreasure(X4_4);
    
    ForceCharacterDeath(X4_4, false);
    EndUnconditionally(EventEndType.End);
    
    // Set defeated flag if enemy is killed
    Label0();
    IfCharacterDeadalive(MAIN, X4_4, DeathState.Dead, ComparisonType.Equal, 1);
    SetEventFlag(X0_4, ON);
});

//-----------------------------------
// Enemy - Award Itemlot on initial kill
// <enemy>, <itemlot>, <itemlot flag>
//-----------------------------------
Event(20005350, Default, function(X0_4, X4_4, X8_4) {
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X8_4);
    EndIfConditionGroupStateUncompiled(EventEndType.End, PASS, AND_01);
    IfCharacterDeadalive(MAIN, X0_4, DeathState.Dead, ComparisonType.Equal, 1);
    AwardItemLot(X4_4);
    EndUnconditionally(EventEndType.End);
});

//-----------------------------------
// Enemy - Award Itemlot on initial kill with delay
// <enemy>, <itemlot>, <itemlot flag>, <seconds>
//-----------------------------------
Event(20005351, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X8_4);
    IfCharacterDeadalive(MAIN, X0_4, DeathState.Dead, ComparisonType.Equal, 1);
    WaitFixedTimeSeconds(X12_4);
    AwardItemLot(X4_4);
    EndUnconditionally(EventEndType.End);
});

//-----------------------------------
// Enemy - Set Event Target
//-----------------------------------
Event(20005360, Restart, function(X0_4, X4_4, X8_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    IfCharacterHasSpeffect(AND_01, X0_4, X8_4, true, ComparisonType.Equal, 1);
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, PASS, AND_01);
    SetCharacterEventTarget(X0_4, X4_4);
});

//-----------------------------------
// Enemy - Set Event Target
//-----------------------------------
Event(20005361, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    IfCharacterAIState(OR_01, X0_4, AIStateType.Recognition, ComparisonType.Equal, 1);
    IfCharacterAIState(OR_01, X0_4, AIStateType.Combat, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfCharacterHasSpeffect(AND_01, X0_4, X12_4, true, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, PASS, AND_01);
    SetAutogeneratedEventspecificEventFlag2Unknown200375(2, 1);
    Label0();
    SetSpeffect(X4_4, X16_4);
    SetCharacterEventTarget(X4_4, X8_4);
});

Event(20005380, Restart, function(X0_4, X4_4, X8_1, X9_1) {
    SetNetworkSyncState(Disabled);
    IfCharacterDeadalive(AND_15, X0_4, DeathState.Dead, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_15);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X4_4, 1);
    IfPlayerInoutMap(AND_01, true, X8_1, X9_1);
    IfConditionGroup(MAIN, PASS, AND_01);
    SetCharacterDefaultBackreadState(X0_4, Enabled);
    WaitFixedTimeSeconds(2);
    IfInoutsideArea(OR_01, InsideOutsideState.Outside, 10000, X4_4, 1);
    IfPlayerInoutMap(OR_01, false, X8_1, X9_1);
    IfConditionGroup(MAIN, PASS, OR_01);
    SetCharacterDefaultBackreadState(X0_4, Disabled);
    WaitFixedTimeSeconds(2);
    EndUnconditionally(EventEndType.Restart);
    Label0();
    SetCharacterDefaultBackreadState(X0_4, Disabled);
    EndUnconditionally(EventEndType.End);
});

Event(20005381, Restart, function(X0_4, X4_4, X8_1, X9_1) {
    SetNetworkSyncState(Disabled);
    IfCharacterDeadalive(AND_15, X0_4, DeathState.Dead, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_15);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X4_4, 1);
    IfPlayerInoutMap(AND_01, true, X8_1, X9_1);
    IfConditionGroup(MAIN, PASS, AND_01);
    SetNetworkUpdateRate(X0_4, true, CharacterUpdateFrequency.AlwaysUpdate);
    WaitFixedTimeSeconds(2);
    IfInoutsideArea(OR_01, InsideOutsideState.Outside, 10000, X4_4, 1);
    IfPlayerInoutMap(OR_01, false, X8_1, X9_1);
    IfConditionGroup(MAIN, PASS, OR_01);
    SetNetworkUpdateRate(X0_4, false, CharacterUpdateFrequency.NoUpdate);
    WaitFixedTimeSeconds(2);
    EndUnconditionally(EventEndType.Restart);
    Label0();
    SetNetworkUpdateRate(X0_4, false, CharacterUpdateFrequency.NoUpdate);
    EndUnconditionally(EventEndType.End);
});

//-----------------------------------
// Mimic - Enable Open Action
//-----------------------------------
Event(20005400, Default, function(X0_4) {
    IfCharacterHasSpeffect(AND_01, X0_4, 11700, true, ComparisonType.Equal, 1);
    IfActionButtonInArea(AND_01, 8010, X0_4);
    IfCharacterType(OR_01, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, FAIL, OR_01);
    IfConditionGroup(MAIN, PASS, AND_01);
    WarpCharacterAndCopyFloor(10000, TargetEntityType.Character, X0_4, 100, 10000);
    ForceAnimationPlayback(10000, 60080, false, false, false, 0, 1);
    GotoIfCharacterHasSpeffect(Label.LABEL1, X0_4, 5020, true, ComparisonType.Equal, 1);
    GotoIfCharacterHasSpeffect(Label.LABEL2, X0_4, 5021, true, ComparisonType.Equal, 1);
    EndUnconditionally(EventEndType.End);
    Label1();
    ForceAnimationPlayback(X0_4, 3000, false, false, false, 0, 1);
    EndUnconditionally(EventEndType.Restart);
    Label2();
    RequestCharacterAIReplan(X0_4);
    RequestCharacterAICommand(X0_4, 10, 0);
    IfCharacterHasSpeffect(MAIN, X0_4, 5404, true, ComparisonType.Equal, 1);
    RequestCharacterAICommand(X0_4, -1, 0);
    RequestCharacterAIReplan(X0_4);
    EndUnconditionally(EventEndType.Restart);
});

//-----------------------------------
// Enemy - Dragon Trap
//-----------------------------------
Event(20005410, Restart, function(X0_4, X4_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    IfCharacterAIState(MAIN, X0_4, AIStateType.Combat, ComparisonType.Equal, 1);
    ForceAnimationPlayback(X0_4, X4_4, false, false, false, 0, 1);
    RequestCharacterAICommand(X0_4, 1, 0);
    WaitFixedTimeSeconds(5);
    RequestCharacterAICommand(X0_4, 0, 0);
});

//-----------------------------------
// Enemy - Ladder Gank
//-----------------------------------
Event(20005411, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    ForceAnimationPlayback(X4_4, X8_4, false, false, false, 0, 1);
    IfCharacterHasEventMessage(MAIN, X0_4, 20, true, ComparisonType.Equal, 1);
    WaitFixedTimeSeconds(X16_4);
    GotoIfCharacterHasSpeffect(Label.LABEL0, X4_4, 5450, true, ComparisonType.Equal, 1);
    EndUnconditionally(EventEndType.End);
    Label0();
    ForceAnimationPlayback(X4_4, X12_4, false, false, false, 0, 1);
    RequestCharacterAIReplan(X4_4);
});

//-----------------------------------
// Pus of Man Setup - End Flag, Entity ID, Entity ID, Anim ID 1, Anim ID 2, Area Entity ID, Label1 Flag, Label0 Flag
//-----------------------------------
Event(20005415, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4) {
    CreateNPCPart(X8_4, 10, NPCPartType.Part1, 9999, 1, 1, false, false);
    CreateNPCPart(X8_4, 20, NPCPartType.Part2, 9999, 1, 1, false, false);
    CreateNPCPart(X8_4, 30, NPCPartType.Part3, 9999, 1, 1, false, false);
    CreateNPCPart(X8_4, 40, NPCPartType.Part4, 9999, 1, 1, false, false);
    SetNPCPartSEAndSFX(X8_4, 10, 148, 148);
    SetNPCPartSEAndSFX(X8_4, 20, 148, 148);
    SetNPCPartSEAndSFX(X8_4, 30, 148, 148);
    SetNPCPartSEAndSFX(X8_4, 40, 148, 148);
    ChangeCharacterEnableState(X8_4, Disabled);
    SetCharacterAnimationState(X8_4, Disabled);
    SetCharacterGravity(X8_4, Disabled);
    SetCharacterHPBarDisplay(X8_4, Disabled);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X28_4);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    GotoIfEventFlag(Label.LABEL1, ON, TargetEventFlagType.EventFlag, X24_4);
    ForceAnimationPlayback(X4_4, X12_4, false, false, true, 0, 1);
    IfCharacterAIState(OR_01, X4_4, AIStateType.Recognition, ComparisonType.Equal, 1);
    IfCharacterAIState(OR_01, X4_4, AIStateType.Alert, ComparisonType.Equal, 1);
    IfCharacterAIState(OR_01, X4_4, AIStateType.Combat, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfCharacterBackreadStatus(AND_01, X4_4, true, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, PASS, AND_01);
    IfCharacterHasSpeffect(AND_09, X4_4, 5450, false, ComparisonType.Equal, 1);
    SkipIfConditionGroupStateUncompiled(1, PASS, AND_09);
    ForceAnimationPlayback(X4_4, X16_4, false, true, true, 0, 1);
    SetNetworkconnectedEventFlag(X24_4, ON);
    Label1();
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_02, PASS, AND_09);
    IfCharacterType(OR_02, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_02, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_02, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfConditionGroup(AND_02, PASS, OR_02);
    IfEntityInoutsideRadiusOfEntity(AND_02, InsideOutsideState.Inside, X4_4, 10000, 5, 1);
    IfConditionGroup(OR_03, PASS, AND_02);
    IfCharacterHPRatio(OR_03, X4_4, ComparisonType.Equal, 0, ComparisonType.Equal, 1);
    IfDamageType(OR_03, X4_4, -1, DamageType.Unspecified);
    IfElapsedSeconds(OR_03, 8);
    IfConditionGroup(AND_03, PASS, OR_03);
    IfCharacterBackreadStatus(AND_03, X4_4, true, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, PASS, AND_03);
    ForceAnimationPlayback(X4_4, 3010, false, false, true, 0, 1);
    SetCharacterHPBarDisplay(X4_4, Disabled);
    IfCharacterHasEventMessage(AND_04, X4_4, 100, true, ComparisonType.Equal, 1);
    IfCharacterDeadalive(AND_04, X4_4, DeathState.Alive, ComparisonType.Equal, 1);
    IfCharacterBackreadStatus(AND_04, X4_4, true, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, PASS, AND_04);
    SetNetworkconnectedEventFlag(X28_4, ON);
    ChangeCharacterEnableState(X8_4, Enabled);
    SetCharacterGravity(X8_4, Enabled);
    SetCharacterAnimationState(X8_4, Enabled);
    SetCharacterHPBarDisplay(X8_4, Enabled);
    WarpCharacterAndCopyFloor(X8_4, TargetEntityType.Character, X4_4, 110, X4_4);
    ForceAnimationPlayback(X8_4, 3010, false, false, true, 0, 1);
    ChangeCharacterEnableState(X4_4, Disabled);
    SetCharacterAnimationState(X4_4, Disabled);
    WaitFixedTimeFrames(1);
    SetCharacterHome(X8_4, X20_4);
    EndUnconditionally(EventEndType.End);
    Label0();
    ChangeCharacterEnableState(X8_4, Enabled);
    SetCharacterGravity(X8_4, Enabled);
    SetCharacterAnimationState(X8_4, Enabled);
    SetCharacterHPBarDisplay(X8_4, Enabled);
    WarpCharacterAndCopyFloor(X8_4, TargetEntityType.Character, X4_4, 110, X4_4);
    ChangeCharacterEnableState(X4_4, Disabled);
    SetCharacterAnimationState(X4_4, Disabled);
    SetCharacterHome(X8_4, X20_4);
    EndUnconditionally(EventEndType.End);
});

Event(20005416, Restart, function(X0_4, X4_4, X8_4) {
    GotoIfEventFlag(Label.LABEL0, OFF, TargetEventFlagType.EventFlag, X0_4);
    ChangeCharacterEnableState(X4_4, Disabled);
    SetCharacterAnimationState(X4_4, Disabled);
    ForceCharacterDeath(X4_4, false);
    ChangeCharacterEnableState(X8_4, Disabled);
    SetCharacterAnimationState(X8_4, Disabled);
    ForceCharacterDeath(X8_4, false);
    EndUnconditionally(EventEndType.End);
    Label0();
    IfCharacterDeadalive(OR_01, X4_4, DeathState.Dead, ComparisonType.Equal, 1);
    IfCharacterDeadalive(OR_01, X8_4, DeathState.Dead, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, PASS, OR_01);
    SetEventFlag(X0_4, ON);
    EndUnconditionally(EventEndType.End);
});

// Pus of Man Setup
Event(20005417, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4, X32_4) {
    CreateNPCPart(X8_4, 10, NPCPartType.Part1, 9999, 1, 1, false, false);
    CreateNPCPart(X8_4, 20, NPCPartType.Part2, 9999, 1, 1, false, false);
    CreateNPCPart(X8_4, 30, NPCPartType.Part3, 9999, 1, 1, false, false);
    CreateNPCPart(X8_4, 40, NPCPartType.Part4, 9999, 1, 1, false, false);
    SetNPCPartSEAndSFX(X8_4, 10, 148, 148);
    SetNPCPartSEAndSFX(X8_4, 20, 148, 148);
    SetNPCPartSEAndSFX(X8_4, 30, 148, 148);
    SetNPCPartSEAndSFX(X8_4, 40, 148, 148);
    ChangeCharacterEnableState(X8_4, Disabled);
    SetCharacterAnimationState(X8_4, Disabled);
    SetCharacterGravity(X8_4, Disabled);
    SetCharacterHPBarDisplay(X8_4, Disabled);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X28_4);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    GotoIfEventFlag(Label.LABEL1, ON, TargetEventFlagType.EventFlag, X24_4);
    ForceAnimationPlayback(X4_4, X12_4, false, false, true, 0, 1);
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_09);
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X32_4, 1);
    IfCharacterBackreadStatus(AND_01, X4_4, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_11, PASS, AND_01);
    IfCharacterDamagedBy(OR_11, X4_4, 10000);
    IfConditionGroup(MAIN, PASS, OR_11);
    IfCharacterHasSpeffect(AND_09, X4_4, 5450, false, ComparisonType.Equal, 1);
    SkipIfConditionGroupStateUncompiled(1, PASS, AND_09);
    ForceAnimationPlayback(X4_4, X16_4, false, true, true, 0, 1);
    SetNetworkconnectedEventFlag(X24_4, ON);
    Label1();
    IfCharacterType(AND_09, 10000, TargetType.BlackPhantom, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_09, 10000, 3710, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_02, PASS, AND_09);
    IfCharacterType(OR_02, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_02, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfCharacterType(OR_02, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfConditionGroup(AND_02, PASS, OR_02);
    IfEntityInoutsideRadiusOfEntity(AND_02, InsideOutsideState.Inside, X4_4, 10000, 5, 1);
    IfConditionGroup(OR_03, PASS, AND_02);
    IfCharacterHPRatio(OR_03, X4_4, ComparisonType.Equal, 0, ComparisonType.Equal, 1);
    IfDamageType(OR_03, X4_4, -1, DamageType.Unspecified);
    IfElapsedSeconds(OR_03, 8);
    IfConditionGroup(AND_03, PASS, OR_03);
    IfCharacterBackreadStatus(AND_03, X4_4, true, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, PASS, AND_03);
    ForceAnimationPlayback(X4_4, 3010, false, false, true, 0, 1);
    SetCharacterHPBarDisplay(X4_4, Disabled);
    IfCharacterHasEventMessage(AND_04, X4_4, 100, true, ComparisonType.Equal, 1);
    IfCharacterDeadalive(AND_04, X4_4, DeathState.Alive, ComparisonType.Equal, 1);
    IfCharacterBackreadStatus(AND_04, X4_4, true, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, PASS, AND_04);
    SetNetworkconnectedEventFlag(X28_4, ON);
    ChangeCharacterEnableState(X8_4, Enabled);
    SetCharacterGravity(X8_4, Enabled);
    SetCharacterAnimationState(X8_4, Enabled);
    SetCharacterHPBarDisplay(X8_4, Enabled);
    WarpCharacterAndCopyFloor(X8_4, TargetEntityType.Character, X4_4, 110, X4_4);
    ForceAnimationPlayback(X8_4, 3010, false, false, true, 0, 1);
    ChangeCharacterEnableState(X4_4, Disabled);
    SetCharacterAnimationState(X4_4, Disabled);
    WaitFixedTimeFrames(1);
    SetCharacterHome(X8_4, X20_4);
    EndUnconditionally(EventEndType.End);
    Label0();
    ChangeCharacterEnableState(X8_4, Enabled);
    SetCharacterGravity(X8_4, Enabled);
    SetCharacterAnimationState(X8_4, Enabled);
    SetCharacterHPBarDisplay(X8_4, Enabled);
    WarpCharacterAndCopyFloor(X8_4, TargetEntityType.Character, X4_4, 110, X4_4);
    ChangeCharacterEnableState(X4_4, Disabled);
    SetCharacterAnimationState(X4_4, Disabled);
    SetCharacterHome(X8_4, X20_4);
    EndUnconditionally(EventEndType.End);
});

Event(20005430, Restart, function(X0_4) {
    IfNPCPartHP(AND_01, X0_4, 50, 0, ComparisonType.LessOrEqual);
    IfNPCPartHP(AND_02, X0_4, 80, 0, ComparisonType.LessOrEqual);
    IfNPCPartHP(AND_03, X0_4, 90, 0, ComparisonType.LessOrEqual);
    IfConditionGroup(OR_01, PASS, AND_01);
    IfConditionGroup(OR_01, PASS, AND_02);
    IfConditionGroup(OR_01, PASS, AND_03);
    IfConditionGroup(AND_04, PASS, OR_01);
    IfCharacterBackreadStatus(AND_04, X0_4, true, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, PASS, AND_04);
    GotoIfConditionGroupStateCompiled(Label.LABEL0, PASS, AND_01);
    GotoIfConditionGroupStateCompiled(Label.LABEL1, PASS, AND_03);
    WaitFixedTimeFrames(1);
    SetNPCPartHP(X0_4, 80, 99999, false);
    EndUnconditionally(EventEndType.Restart);
    Label1();
    WaitFixedTimeFrames(1);
    SetNPCPartHP(X0_4, 90, 99999, false);
    EndUnconditionally(EventEndType.Restart);
    Label0();
    WaitFixedTimeFrames(1);
    SetNPCPartHP(X0_4, 50, 99999, false);
    EndUnconditionally(EventEndType.Restart);
});

Event(20005431, Restart, function(X0_4) {
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    IfCharacterBackreadStatus(MAIN, X0_4, true, ComparisonType.Equal, 1);
    CreateNPCPart(X0_4, 50, NPCPartType.Part5, 300, 1, 1, false, false);
    CreateNPCPart(X0_4, 80, NPCPartType.Part8, 90, 1, 1, false, false);
    CreateNPCPart(X0_4, 90, NPCPartType.Part9, 90, 1, 1, false, false);
    GotoIfCharacterHasSpeffect(Label.LABEL0, X0_4, 5405, false, ComparisonType.Equal, 1);
    ChangeCharacterHitmask(X0_4, 1, ON);
    Label0();
    IfNPCPartHP(AND_05, X0_4, 50, 0, ComparisonType.LessOrEqual);
    SkipIfConditionGroupStateUncompiled(1, FAIL, AND_05);
    SetNPCPartHP(X0_4, 50, 99999, false);
    IfNPCPartHP(AND_08, X0_4, 80, 0, ComparisonType.LessOrEqual);
    SkipIfConditionGroupStateUncompiled(1, FAIL, AND_08);
    SetNPCPartHP(X0_4, 80, 99999, false);
    IfNPCPartHP(AND_09, X0_4, 90, 0, ComparisonType.LessOrEqual);
    SkipIfConditionGroupStateUncompiled(1, FAIL, AND_09);
    SetNPCPartHP(X0_4, 90, 99999, false);
    IfNPCPartHP(AND_01, X0_4, 50, 0, ComparisonType.LessOrEqual);
    IfNPCPartHP(AND_02, X0_4, 80, 0, ComparisonType.LessOrEqual);
    IfNPCPartHP(AND_03, X0_4, 90, 0, ComparisonType.LessOrEqual);
    IfConditionGroup(OR_01, PASS, AND_01);
    IfConditionGroup(OR_01, PASS, AND_02);
    IfConditionGroup(OR_01, PASS, AND_03);
    IfConditionGroup(AND_04, PASS, OR_01);
    IfCharacterHasSpeffect(AND_04, X0_4, 30, false, ComparisonType.Equal, 1);
    IfCharacterHPRatio(AND_04, X0_4, ComparisonType.Greater, 0, ComparisonType.Equal, 1);
    IfCharacterDeadalive(AND_04, X0_4, DeathState.Alive, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, PASS, AND_04);
    SetSpeffect(X0_4, 6050);
    GotoIfConditionGroupStateCompiled(Label.LABEL1, PASS, AND_01);
    GotoIfConditionGroupStateCompiled(Label.LABEL2, PASS, AND_02);
    GotoIfConditionGroupStateCompiled(Label.LABEL3, PASS, AND_03);
    Label1();
    ForceAnimationPlayback(X0_4, 20011, false, true, true, 0, 1);
    GotoUnconditionally(Label.LABEL4);
    Label2();
    ForceAnimationPlayback(X0_4, 20010, false, true, true, 0, 1);
    GotoUnconditionally(Label.LABEL4);
    Label3();
    ForceAnimationPlayback(X0_4, 20005, false, true, true, 0, 1);
    Label4();
    IfCharacterHasEventMessage(MAIN, X0_4, 10, true, ComparisonType.Equal, 1);
    EndUnconditionally(EventEndType.Restart);
});

Event(20005432, Restart, function(X0_4) {
    IfCharacterBackreadStatus(MAIN, X0_4, true, ComparisonType.Equal, 1);
    CreateNPCPart(X0_4, 10, NPCPartType.Part1, 450, 1, 1, false, false);
    IfCharacterDeadalive(AND_01, X0_4, DeathState.Alive, ComparisonType.Equal, 1);
    IfNPCPartHP(AND_01, X0_4, 10, 0, ComparisonType.LessOrEqual);
    IfConditionGroup(MAIN, PASS, AND_01);
    ForceAnimationPlayback(X0_4, 20000, false, true, true, 0, 1);
    EndUnconditionally(EventEndType.Restart);
});

Event(20005434, Restart, function(X0_4, X4_4) {
    GotoIfEventFlag(Label.LABEL0, OFF, TargetEventFlagType.EventIDSlotNumber, 0);
    SetCharacterInvincibility(X4_4, Disabled);
    ForceAnimationPlayback(X4_4, 30000, true, false, false, 0, 1);
    EndUnconditionally(EventEndType.End);
    Label0();
    ChangeCharacterDispmask(X0_4, 0, ON);
    ChangeCharacterDispmask(X0_4, 1, OFF);
    ChangeCharacterDispmask(X0_4, 2, OFF);
    ChangeCharacterDispmask(X0_4, 3, ON);
    SetCharacterInvincibility(X4_4, Enabled);
    ChangeCharacterDispmask(X4_4, 0, OFF);
    ChangeCharacterDispmask(X4_4, 1, OFF);
    ChangeCharacterDispmask(X4_4, 2, ON);
    ChangeCharacterDispmask(X4_4, 3, OFF);
    SetCharacterAIState(X4_4, Disabled);
    ChangeCharacterEnableState(X4_4, Disabled);
    SetCharacterAnimationState(X4_4, Disabled);
    IfCharacterBackreadStatus(MAIN, X0_4, true, ComparisonType.Equal, 1);
    CreateNPCPart(X0_4, 30, NPCPartType.Part3, 800, 1, 1, false, false);
    CreateNPCPart(X0_4, 40, NPCPartType.Part4, 800, 1, 1, false, false);
    IfNPCPartHP(OR_01, X0_4, 30, 0, ComparisonType.LessOrEqual);
    IfNPCPartHP(OR_02, X0_4, 40, 0, ComparisonType.LessOrEqual);
    IfConditionGroup(OR_03, PASS, OR_01);
    IfConditionGroup(OR_03, PASS, OR_02);
    IfConditionGroup(MAIN, PASS, OR_03);
    WaitFixedTimeFrames(1);
    ChangeCharacterDispmask(X0_4, 0, OFF);
    ChangeCharacterDispmask(X0_4, 1, ON);
    ChangeCharacterDispmask(X0_4, 2, OFF);
    ChangeCharacterDispmask(X0_4, 3, ON);
    ChangeCharacterEnableState(X4_4, Enabled);
    WarpCharacterAndCopyFloor(X4_4, TargetEntityType.Character, X0_4, 50, X0_4);
    ChangeCharacterDispmask(X4_4, 0, OFF);
    ChangeCharacterDispmask(X4_4, 1, OFF);
    ChangeCharacterDispmask(X4_4, 2, ON);
    ChangeCharacterDispmask(X4_4, 3, OFF);
    GotoIfConditionGroupStateCompiled(Label.LABEL1, PASS, OR_01);
    GotoIfConditionGroupStateCompiled(Label.LABEL2, PASS, OR_02);
    Label1();
    ForceAnimationPlayback(X4_4, 20000, false, false, false, 0, 1);
    ForceAnimationPlayback(X0_4, 20000, false, true, false, 0, 1);
    EndUnconditionally(EventEndType.End);
    Label2();
    ForceAnimationPlayback(X4_4, 20001, false, false, false, 0, 1);
    ForceAnimationPlayback(X0_4, 20001, false, true, false, 0, 1);
    EndUnconditionally(EventEndType.End);
});

// Enemy - Toggle Gravity and Warp on activation
Event(20005440, Restart, function(X0_4, X4_4, X8_4) {
    SetCharacterGravity(X4_4, Disabled);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    ChangeCharacterEnableState(X4_4, Disabled);
    IfCharacterHasEventMessage(MAIN, X0_4, X8_4, true, ComparisonType.Equal, 1);
    Label1();
    ChangeCharacterEnableState(X4_4, Enabled);
    WaitFixedTimeFrames(1);
    WarpCharacterAndCopyFloor(X4_4, TargetEntityType.Character, X0_4, 100, X0_4);
    EndUnconditionally(EventEndType.Restart);
});

// Enemy - Kill if main enemy is dead
Event(20005441, Restart, function(X0_4, X4_4) {
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    IfCharacterDeadalive(MAIN, X0_4, DeathState.Dead, ComparisonType.Equal, 1);
    Label0();
    ForceCharacterDeath(X4_4, false);
});

Event(20005490, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4, X32_4, X36_4, X40_4, X44_4, X48_4) {
    SetNetworkSyncState(Disabled);
    IfCharacterAIState(AND_01, X4_4, AIStateType.Combat, ComparisonType.Equal, 1);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, 9031);
    IfPlayerIsNotInOwnWorldExcludesArena(AND_01, false);
    IfConditionGroup(OR_01, PASS, AND_01);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X48_4);
    IfConditionGroup(MAIN, PASS, OR_01);
    SkipIfNumberOfClientsOfType(2, ClientType.Invader, ComparisonType.Equal, 0);
    SetNetworkconnectedEventFlag(9030, ON);
    SetNetworkconnectedEventFlag(X48_4, ON);
    SetEventFlag(X48_4, OFF);
    ForceAnimationPlayback(X8_4, 20, false, false, false, 0, 1);
    WaitFixedTimeSeconds(2.5);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 50);
    ShootBullet(X0_4, X12_4, X16_4, X20_4, 0, 0, 0);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 51);
    ShootBullet(X0_4, X12_4, X16_4, X24_4, 0, 0, 0);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 52);
    ShootBullet(X0_4, X12_4, X16_4, X28_4, 0, 0, 0);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 53);
    ShootBullet(X0_4, X12_4, X16_4, X32_4, 0, 0, 0);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 54);
    ShootBullet(X0_4, X12_4, X16_4, X36_4, 0, 0, 0);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 55);
    ShootBullet(X0_4, X12_4, X16_4, X40_4, 0, 0, 0);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 56);
    ShootBullet(X0_4, X12_4, X16_4, X44_4, 0, 0, 0);
    WaitFixedTimeSeconds(1);
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    SetNetworkconnectedEventFlag(9030, OFF);
    WaitFixedTimeSeconds(2);
    ForceAnimationPlayback(X8_4, 0, true, false, false, 0, 1);
    EndUnconditionally(EventEndType.Restart);
});

// NPC - 
Event(20005491, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    SetNetworkSyncState(Enabled);
    
    SkipIfNumberOfClientsOfType(2, ClientType.Invader, ComparisonType.Equal, 0);
    SetNetworkconnectedEventFlag(9031, OFF);
    SetNetworkconnectedEventFlag(X12_4, OFF);
    
    SetCharacterBackreadState(X0_4, true);
    SetCharacterBackreadState(X4_4, true);
    ChangeCharacterEnableState(X0_4, Disabled);
    ChangeCharacterEnableState(X4_4, Disabled);
    SetCharacterAIState(X0_4, Disabled);
    SetCharacterAIState(X4_4, Disabled);
    SetCharacterDefaultBackreadState(X0_4, Disabled);
    SetCharacterDefaultBackreadState(X4_4, Disabled);
    ImmediateActivateUnknown200454(X0_4, Disabled);
    ImmediateActivateUnknown200454(X4_4, Disabled);
    SetNetworkUpdateRate(X0_4, false, CharacterUpdateFrequency.AlwaysUpdate);
    SetNetworkUpdateRate(X4_4, false, CharacterUpdateFrequency.AlwaysUpdate);
    RequestCharacterAIReplan(X0_4);
    RequestCharacterAIReplan(X4_4);
    
    IfBatchEventFlags(AND_01, LogicalOperationType.NotAllOFF, TargetEventFlagType.EventFlag, 1460, 1461);
    IfBatchEventFlags(AND_01, LogicalOperationType.NotAllOFF, TargetEventFlagType.EventFlag, 1475, 1477);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X8_4, 1);
    IfConditionGroup(OR_01, PASS, AND_01);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X12_4);
    IfConditionGroup(MAIN, PASS, OR_01);
    
    SkipIfNumberOfClientsOfType(2, ClientType.Invader, ComparisonType.Equal, 0);
    SetNetworkconnectedEventFlag(9031, ON);
    SetNetworkconnectedEventFlag(X12_4, ON);
    
    SetCharacterBackreadState(X0_4, false);
    SetCharacterBackreadState(X4_4, false);
    ChangeCharacterEnableState(X0_4, Enabled);
    ChangeCharacterEnableState(X4_4, Enabled);
    SetCharacterAIState(X0_4, Enabled);
    SetCharacterAIState(X4_4, Enabled);
    SetCharacterDefaultBackreadState(X0_4, Enabled);
    SetCharacterDefaultBackreadState(X4_4, Enabled);
    ImmediateActivateUnknown200454(X0_4, Enabled);
    ImmediateActivateUnknown200454(X4_4, Enabled);
    SetNetworkUpdateRate(X0_4, true, CharacterUpdateFrequency.AlwaysUpdate);
    SetNetworkUpdateRate(X4_4, true, CharacterUpdateFrequency.AlwaysUpdate);
    RequestCharacterAIReplan(X0_4);
    RequestCharacterAIReplan(X4_4);
    
    WaitFixedTimeSeconds(1);
    
    SetNetworkSyncState(Disabled);
    IfPlayerIsNotInOwnWorldExcludesArena(AND_02, false);
    
    IfEventFlag(AND_02, OFF, TargetEventFlagType.EventFlag, 9030);
    IfBatchEventFlags(OR_02, LogicalOperationType.AllOFF, TargetEventFlagType.EventFlag, 1460, 1461);
    IfBatchEventFlags(OR_02, LogicalOperationType.AllOFF, TargetEventFlagType.EventFlag, 1475, 1477);
    IfAllPlayersInoutsideArea(OR_02, InsideOutsideState.Outside, X8_4);
    IfConditionGroup(AND_02, PASS, OR_02);
    IfConditionGroup(OR_03, PASS, AND_02);
    IfEventFlag(OR_03, OFF, TargetEventFlagType.EventFlag, X12_4);
    IfConditionGroup(MAIN, PASS, OR_03);
    
    EndUnconditionally(EventEndType.Restart);
});

Event(20005492, Restart, function(X0_4) {
    SetNetworkSyncState(Disabled);
    IfCharacterHasSpeffect(MAIN, 10000, 12035, true, ComparisonType.Equal, 1);
    SetCameraVibration(104, TargetEntityType.Area, X0_4, -1, 999, 999);
    WaitFixedTimeSeconds(1.5);
    EndUnconditionally(EventEndType.Restart);
});

Event(20005493, Restart, function(X0_4, X4_4, X8_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, 1475);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 50006250);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, 50006250);
    IfBatchEventFlags(AND_01, LogicalOperationType.NotAllOFF, TargetEventFlagType.EventFlag, 1476, 1477);
    IfConditionGroup(OR_01, PASS, AND_01);
    IfConditionGroup(MAIN, PASS, OR_01);
    GotoIfConditionGroupStateCompiled(Label.LABEL10, PASS, AND_01);
    SetCharacterTeamType(X0_4, TeamType.CoopNPC);
    SetCharacterTeamType(X4_4, TeamType.CoopNPC);
    RequestCharacterAIReplan(X0_4);
    RequestCharacterAIReplan(X4_4);
    SetNetworkconnectedEventFlag(X8_4, ON);
    EndUnconditionally(EventEndType.Restart);
    Label10();
    SetCharacterTeamType(X0_4, TeamType.Indiscriminate);
    SetCharacterTeamType(X4_4, TeamType.Indiscriminate);
    RequestCharacterAIReplan(X0_4);
    RequestCharacterAIReplan(X4_4);
    EndUnconditionally(EventEndType.Restart);
});

Event(20005494, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    IfEventFlag(OR_01, OFF, TargetEventFlagType.EventFlag, 1475);
    IfBatchEventFlags(OR_01, LogicalOperationType.NotAllOFF, TargetEventFlagType.EventFlag, 1462, 1474);
    EndIfConditionGroupStateUncompiled(EventEndType.End, PASS, OR_01);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, 53100010);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, 53100620);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, 53100630);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, 53100640);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, 53100650);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, 53100660);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, 53300680);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, 53300690);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, 53300700);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, 53300710);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, 53300960);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, 53300970);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, 53300980);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, 53500040);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, 53500320);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, 53500330);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, 53500340);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, 53500860);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, 53500870);
    IfConditionGroup(MAIN, PASS, AND_01);
    BatchSetNetworkconnectedEventFlags(1460, 1474, OFF);
    SetNetworkconnectedEventFlag(1462, ON);
});

Event(20005495, Restart, function(X0_4, X4_4, X8_4) {
    SetCharacterGravity(X0_4, Disabled);
    SetCharacterGravity(X4_4, Disabled);
    SetCharacterAnimationState(X0_4, Disabled);
    SetCharacterAnimationState(X4_4, Disabled);
    SetCharacterAIState(X0_4, Disabled);
    SetCharacterAIState(X4_4, Disabled);
    SkipIfNumberOfClientsOfType(2, ClientType.Invader, ComparisonType.Equal, 0);
    SetNetworkUpdateAuthority(X0_4, AuthorityLevel.Forced);
    SetNetworkUpdateAuthority(X4_4, AuthorityLevel.Forced);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, 1476);
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    IfEventFlag(AND_01, OFF, TargetEventFlagType.EventFlag, 70000075);
    IfConditionGroup(OR_01, PASS, AND_01);
    IfEventFlag(OR_01, OFF, TargetEventFlagType.EventFlag, X8_4);
    SkipIfConditionGroupStateUncompiled(3, PASS, OR_01);
    SetCharacterTeamType(X0_4, TeamType.CoopNPC);
    SetCharacterTeamType(X4_4, TeamType.CoopNPC);
    EndUnconditionally(EventEndType.End);
    SetCharacterTeamType(X0_4, TeamType.Indiscriminate);
    SetCharacterTeamType(X4_4, TeamType.Indiscriminate);
    EndUnconditionally(EventEndType.End);
});

Event(20005496, Default, function(X0_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, 1478);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, 1478);
    DeactivateObject(X0_4, Disabled);
});

// Register Bonfire - After Event Flag
Event(20005500, Default, function(X0_4, X4_4, X8_4, X12_4) {
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X0_4);
    DeactivateObject(X12_4, Disabled);
    ChangeCharacterEnableState(X8_4, Disabled);
    WaitFixedTimeSeconds(1);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X0_4);
    SpawnOneshotSFX(TargetEntityType.Object, X12_4, 200, 1060);
    WaitFixedTimeSeconds(0.5);
    DeactivateObject(X12_4, Enabled);
    ChangeCharacterEnableState(X8_4, Enabled);
    Label0();
    RegisterBonfire(X4_4, X12_4, 5, 180, 0);
});

Event(20005510, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4) {
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X20_4);
    DeleteObjectfollowingSFX(X4_4, true);
    SkipIfEventFlag(2, ON, TargetEventFlagType.EventFlag, X0_4);
    CreateObjectfollowingSFX(X4_4, 10, 82);
    SkipUnconditionally(1);
    CreateObjectfollowingSFX(X4_4, 10, 83);
    Label0();
    SetEventFlag(X20_4, OFF);
    SkipIfEventFlag(2, ON, TargetEventFlagType.EventFlag, X0_4);
    IfActionButtonInArea(AND_01, X12_4, X4_4);
    SkipUnconditionally(1);
    IfActionButtonInArea(AND_01, X16_4, X4_4);
    IfPlayerIsNotInOwnWorldExcludesArena(AND_01, false);
    IfConditionGroup(MAIN, PASS, AND_01);
    GotoIfEventFlag(Label.LABEL1, ON, TargetEventFlagType.EventFlag, X0_4);
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    RotateCharacter(10000, X4_4, 60800, false);
    WaitFixedTimeSeconds(2.1);
    DeleteObjectfollowingSFX(X4_4, true);
    SpawnOneshotSFX(TargetEntityType.Object, X4_4, 10, 84);
    CreateObjectfollowingSFX(X4_4, 10, 83);
    SetEventFlag(X0_4, ON);
    Label1();
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    DisplayEpitaphMessage(X8_4);
    SetEventFlag(X20_4, ON);
    EndUnconditionally(EventEndType.Restart);
});

Event(20005511, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4, X32_4) {
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X20_4);
    DeleteObjectfollowingSFX(X4_4, true);
    SkipIfEventFlag(2, ON, TargetEventFlagType.EventFlag, X0_4);
    CreateObjectfollowingSFX(X4_4, 10, X24_4);
    SkipUnconditionally(1);
    CreateObjectfollowingSFX(X4_4, 10, X28_4);
    Label0();
    SetEventFlag(X20_4, OFF);
    SkipIfEventFlag(2, ON, TargetEventFlagType.EventFlag, X0_4);
    IfActionButtonInArea(AND_01, X12_4, X4_4);
    SkipUnconditionally(1);
    IfActionButtonInArea(AND_01, X16_4, X4_4);
    IfPlayerIsNotInOwnWorldExcludesArena(AND_01, false);
    IfConditionGroup(MAIN, PASS, AND_01);
    GotoIfEventFlag(Label.LABEL1, ON, TargetEventFlagType.EventFlag, X0_4);
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    RotateCharacter(10000, X4_4, 60800, false);
    WaitFixedTimeSeconds(2.1);
    DeleteObjectfollowingSFX(X4_4, true);
    SpawnOneshotSFX(TargetEntityType.Object, X4_4, 10, X32_4);
    CreateObjectfollowingSFX(X4_4, 10, X28_4);
    SetEventFlag(X0_4, ON);
    Label1();
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    DisplayEpitaphMessage(X8_4);
    SetEventFlag(X20_4, ON);
    EndUnconditionally(EventEndType.Restart);
});

//------------------------
// Chest - Setup
// <used flag>, <object id>, <ObjAct id>
//------------------------
Event(20005520, Restart, function(X0_4, X4_4, X8_4) {
    GotoIfEventFlag(Label.LABEL0, OFF, TargetEventFlagType.EventFlag, X0_4); // Goto Label 0 if previously used
    
    // Used chest
    ReproduceObjectAnimation(X4_4, 1); // Open the chest
    SetObjactState(X4_4, -1, Disabled); // Disable interaction
    SetObjectTreasureState(X4_4, Enabled); // Enable treasure
    EndUnconditionally(EventEndType.End);
    
    // Unused chest
    Label0();
    SetObjectTreasureState(X4_4, Disabled); // Disable treasure
    IfObjactEventFlag(MAIN, X8_4); // Wait for object activation flag
    WaitFixedTimeFrames(10);
    SetObjectTreasureState(X4_4, Enabled); // Enable treasure
    SetEventFlag(X0_4, ON);
});

//------------------------
// Pot Treasure - Setup
// <used flag>, <flag>, <object id>, <treasure object id>, <itemlot>
//------------------------
Event(20005521, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X4_4);
    IfObjectDestroyed(MAIN, DestructionState.Destroyed, X8_4, ComparisonType.Equal, 1);
    SetNetworkconnectedEventFlag(X4_4, ON);
    ForceAnimationPlayback(X12_4, 101, false, false, false, 0, 1);
    SetNetworkSyncState(Disabled);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    CreateObjectfollowingSFX(X12_4, 90, 60);
    IfActionButtonInArea(MAIN, 4200, X12_4);
    ForceAnimationPlayback(10000, 60070, false, false, false, 0, 1);
    AwardItemLot(X16_4);
    DeleteObjectfollowingSFX(X12_4, true);
    SetEventFlag(X0_4, ON);
    EndUnconditionally(EventEndType.End);
    Label0();
    ReproduceObjectAnimation(X12_4, 101);
    EndUnconditionally(EventEndType.End);
});

//------------------------
// Destructible Treasure - Setup
// <used flag>, <object id>, <ObjAct id>
//------------------------
Event(20005522, Restart, function(X0_4, X4_4, X8_4) {
    GotoIfEventFlag(Label.LABEL0, OFF, TargetEventFlagType.EventIDSlotNumber, 0);
    ReproduceObjectAnimation(X4_4, 1);
    SetObjactState(X4_4, -1, Disabled);
    SetObjectTreasureState(X4_4, Enabled);
    EndUnconditionally(EventEndType.End);
    Label0();
    SetObjectTreasureState(X4_4, Disabled);
    IfObjectDestroyed(MAIN, DestructionState.Destroyed, X8_4, ComparisonType.Equal, 1);
    SetEventFlag(X0_4, ON);
    ForceAnimationPlayback(X4_4, 101, false, false, false, 0, 1);
    SetObjectTreasureState(X4_4, Enabled);
});

//------------------------
// NG+ Treasure - Setup
// <object>, <cycle>
//------------------------
Event(20005523, Restart, function(X0_4, X4_1) {
    IfGameCycle(AND_01, ComparisonType.GreaterOrEqual, X4_1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_01);
    DeactivateObject(X0_4, Disabled);
    SetObjectTreasureState(X0_4, Disabled);
    EndUnconditionally(EventEndType.End);
    Label0();
    DeactivateObject(X0_4, Enabled);
    SetObjectTreasureState(X0_4, Enabled);
});

//------------------------
// Event Treasure - Setup
// <object>, <conditional flag>
//------------------------
Event(20005524, Restart, function(X0_4, X4_4) {
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X4_4); // Goto Label 0 if conditional flag is ON
    
    // Disable treasure object
    DeactivateObject(X0_4, Disabled);
    SetObjectTreasureState(X0_4, Disabled);
    EndUnconditionally(EventEndType.End);
    
    // Enable treasure object if conditional flag is ON
    Label0();
    DeactivateObject(X0_4, Enabled);
    SetObjectTreasureState(X0_4, Enabled);
});

//------------------------
// FFX Treasure - Custom FFX
// <used flag>, <itemlot>, <object>, <ffx>
//------------------------
Event(20005525, Default, function(X0_4, X4_4, X8_4, X12_4) {
    SetNetworkSyncState(Disabled);
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true); // End if player is client
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4); // End if previously used
    
    // Award item to player when used
    CreateObjectfollowingSFX(X8_4, 90, X12_4);
    IfActionButtonInArea(MAIN, 9700, X8_4);
    ForceAnimationPlayback(10000, 60070, false, false, false, 0, 1);
    DeleteObjectfollowingSFX(X8_4, true);
    AwardItemLot(X4_4);
});

//------------------------
// FFX Treasure - Custom FFX, Conditional Visibility
// <used flag>, <itemlot>, <object>, <ffx>, <conditional flag>
//------------------------
Event(20005526, Default, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    SetNetworkSyncState(Disabled);
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true); // End if player is client
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4); // End if previously used
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X16_4); // Enable if condition flag is ON
    
    // Disable object
    DeactivateObject(X4_4, Disabled);
    EndUnconditionally(EventEndType.End);
    
    // Award item to player when used
    Label0();
    DeactivateObject(X4_4, Enabled);
    CreateObjectfollowingSFX(X8_4, 90, X12_4);
    IfActionButtonInArea(MAIN, 9700, X8_4);
    ForceAnimationPlayback(10000, 60070, false, false, false, 0, 1);
    DeleteObjectfollowingSFX(X8_4, true);
    AwardItemLot(X4_4);
});

//------------------------
// FFX Treasure - Custom Action Button, Selector FFX
// <used flag>, <itemlot>, <object>, <selector>, <action button>
//------------------------
Event(20005527, Default, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    SetNetworkSyncState(Disabled);
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true); // End if player is client
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4); // End if previously used
    
    // Select intensity of FFX based on selector arg
    GotoIfComparison(Label.LABEL0, ComparisonType.Equal, X12_4, 0);
    GotoIfComparison(Label.LABEL1, ComparisonType.Equal, X12_4, 1);
    GotoIfComparison(Label.LABEL2, ComparisonType.Equal, X12_4, 2);
    
    Label0();
    CreateObjectfollowingSFX(X8_4, 90, 60); // Rarity 0
    GotoUnconditionally(Label.LABEL9);
    
    Label1();
    CreateObjectfollowingSFX(X8_4, 90, 61); // Rarity 1
    GotoUnconditionally(Label.LABEL9);
    
    Label2();
    CreateObjectfollowingSFX(X8_4, 90, 62); // Rarity 2
    GotoUnconditionally(Label.LABEL9);
    
    // Award item to player when used
    Label9();
    IfPlayerIsNotInOwnWorldExcludesArena(AND_01, false);
    IfActionButtonInArea(AND_01, X16_4, X8_4);
    IfConditionGroup(MAIN, PASS, AND_01);
    ForceAnimationPlayback(10000, 60070, false, false, false, 0, 1);
    DeleteObjectfollowingSFX(X8_4, true);
    AwardItemLot(X4_4);
});

Event(20005530, Restart, function(X0_4, X4_4) {
    WaitFixedTimeFrames(1);
    EndIfObjectDestroyed(EventEndType.End, DestructionState.Destroyed, X4_4, ComparisonType.Equal, 1);
    IfDamageType(OR_01, X4_4, -1, DamageType.Fire);
    IfDamageType(OR_01, X4_4, 10000, DamageType.Fire);
    IfConditionGroup(MAIN, PASS, OR_01);
    WaitFixedTimeFrames(1);
    SpawnOneshotSFX(TargetEntityType.Object, X4_4, 10, 810010);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 50);
    CreateDamagingObject(X0_4, X4_4, 10, 7000, DamageTargetType.Character, 3.5, 0.8, 0);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 51);
    CreateDamagingObject(X0_4, X4_4, 10, 7001, DamageTargetType.Character, 3.5, 0.8, 0);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 52);
    CreateDamagingObject(X0_4, X4_4, 10, 7002, DamageTargetType.Character, 3.5, 0.8, 0);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 53);
    CreateDamagingObject(X0_4, X4_4, 10, 7003, DamageTargetType.Character, 3.5, 0.8, 0);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 54);
    CreateDamagingObject(X0_4, X4_4, 10, 7004, DamageTargetType.Character, 3.5, 0.8, 0);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 55);
    CreateDamagingObject(X0_4, X4_4, 10, 7005, DamageTargetType.Character, 3.5, 0.8, 0);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 56);
    CreateDamagingObject(X0_4, X4_4, 10, 7006, DamageTargetType.Character, 3.5, 0.8, 0);
});

Event(20005531, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4) {
    WaitFixedTimeFrames(1);
    EndIfObjectDestroyed(EventEndType.End, DestructionState.Destroyed, X4_4, ComparisonType.Equal, 1);
    IfObjectDestroyed(MAIN, DestructionState.Destroyed, X4_4, ComparisonType.Equal, 1);
    WaitFixedTimeFrames(1);
    SpawnOneshotSFX(TargetEntityType.Object, X4_4, X8_4, X16_4);
    CreateDamagingObject(X0_4, X4_4, X12_4, X20_4, DamageTargetType.Character, X24_4, X28_4, 0);
});

//----------------------------------------------------
// Burning Object
// <event flag>, <entity id>, <dummy poly>, <behavior>, <radius>, <lifespan>, <loop count>
//----------------------------------------------------
Event(20005540, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4) {
    DeleteObjectEvent(X0_4);
    CreateDamagingObject(X0_4, X4_4, X8_4, X12_4, DamageTargetType.Character, X16_4, X20_4, X24_4);
});

Event(20005541, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4, X32_4) {
    DeleteObjectfollowingSFX(X4_4, true);
    CreateObjectfollowingSFX(X4_4, X32_4, X28_4);
    DeleteObjectEvent(X0_4);
    CreateDamagingObject(X0_4, X4_4, X8_4, X12_4, DamageTargetType.Character, X16_4, X20_4, X24_4);
});

Event(20005542, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4) {
    DeleteObjectEvent(X0_4);
    EndIfObjectDestroyed(EventEndType.End, DestructionState.Destroyed, X4_4, ComparisonType.Equal, 1);
    CreateDamagingObject(X0_4, X4_4, X8_4, X12_4, DamageTargetType.Character, X16_4, X20_4, X24_4);
    IfObjectDestroyed(MAIN, DestructionState.Destroyed, X4_4, ComparisonType.Equal, 1);
    DeleteObjectEvent(X0_4);
});

Event(20005550, Restart, function(X0_4, X4_4, X8_4) {
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    IfInoutsideArea(MAIN, InsideOutsideState.Inside, 10000, X8_4, 1);
    ForceAnimationPlayback(X0_4, X4_4, false, true, false, 0, 1);
    EndUnconditionally(EventEndType.End);
    Label0();
    ReproduceObjectAnimation(X0_4, X4_4);
});

Event(20005551, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4) {
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    IfInoutsideArea(MAIN, InsideOutsideState.Inside, 10000, X8_4, 1);
    WaitRandomTimeSeconds(X12_4, X16_4);
    ForceAnimationPlayback(X0_4, X4_4, false, true, false, 0, 1);
    SkipIfComparison(1, ComparisonType.NotEqual, X20_4, 1);
    DeactivateObject(X0_4, Disabled);
    EndUnconditionally(EventEndType.End);
    Label0();
    ReproduceObjectAnimation(X0_4, X4_4);
    SkipIfComparison(1, ComparisonType.NotEqual, X20_4, 1);
    DeactivateObject(X0_4, Disabled);
});

Event(20005552, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    IfInoutsideArea(MAIN, InsideOutsideState.Inside, 10000, X8_4, 1);
    SetAutogeneratedEventspecificEventFlag2Unknown200375(2, 1);
    WaitRandomTimeSeconds(X12_4, X16_4);
    ForceAnimationPlayback(X0_4, X4_4, false, true, false, 0, 1);
    EndUnconditionally(EventEndType.End);
    Label0();
    ReproduceObjectAnimation(X0_4, X4_4);
});

Event(20005553, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4) {
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    WaitRandomTimeSeconds(X16_4, X20_4);
    ForceAnimationPlayback(X0_4, X4_4, true, false, true, 0, 1);
    IfInoutsideArea(MAIN, InsideOutsideState.Inside, 10000, X12_4, 1);
    SetAutogeneratedEventspecificEventFlag2Unknown200375(2, 1);
    WaitRandomTimeSeconds(X24_4, X28_4);
    ForceAnimationPlayback(X0_4, X8_4, false, true, false, 0, 1);
    DeactivateObject(X0_4, Disabled);
    EndUnconditionally(EventEndType.End);
    Label0();
    ReproduceObjectAnimation(X0_4, X4_4);
    DeactivateObject(X0_4, Disabled);
});

Event(20005580, Restart, function(X0_4, X4_4) {
    SetNetworkSyncState(Disabled);
    GotoIfPlayerIsNotInOwnWorldExcludesArena(Label.LABEL0, true);
    EndUnconditionally(EventEndType.End);
    Label0();
    SetObjactState(X0_4, X4_4, Disabled);
});

Event(20005581, Restart, function(X0_4, X4_4) {
    SetNetworkSyncState(Disabled);
    GotoIfPlayerIsNotInOwnWorldExcludesArena(Label.LABEL0, true);
    EndUnconditionally(EventEndType.End);
    Label0();
    DeactivateObjactAssignIdx(X0_4, X4_4, 0, Disabled);
    DeactivateObjactAssignIdx(X0_4, X4_4, 1, Disabled);
    DeactivateObjactAssignIdx(X0_4, X4_4, 2, Disabled);
    DeactivateObjactAssignIdx(X0_4, X4_4, 3, Disabled);
});

//-----------------------------------
// Door - Setup Interaction Area
// <used flag>, <region 1>, <region 2>
//-----------------------------------
Event(20005610, Default, function(X0_4, X4_4, X8_4) {
    SetNetworkSyncState(Disabled);
    GotoIfEventFlag(Label.LABEL1, ON, TargetEventFlagType.EventFlag, X0_4); // Goto Label 1 if door was previously opened
    
    IfInoutsideArea(MAIN, InsideOutsideState.Inside, 10000, X4_4, 1); // Player is in region 1
    
    IfCharacterType(OR_01, 10000, TargetType.Alive, ComparisonType.Equal, 1); // Player is alive
    IfCharacterType(OR_01, 10000, TargetType.Hollow, ComparisonType.Equal, 1); // Player is hollow
    SkipIfConditionGroupStateUncompiled(1, FAIL, OR_01); // Skip if player isn't alive or hollow
    SetSpeffect(10000, 4150); // Allow door usage
    
    WaitFixedTimeSeconds(3);
    
    EndUnconditionally(EventEndType.Restart);
    
    // Door was opened, both sides may be used
    Label1();
    IfInoutsideArea(OR_01, InsideOutsideState.Inside, 10000, X4_4, 1); // Player is in region 1
    IfInoutsideArea(OR_01, InsideOutsideState.Inside, 10000, X8_4, 1); // Player is in region 2
    IfConditionGroup(MAIN, PASS, OR_01);
    SetSpeffect(10000, 4150); // Allow door usage
    WaitFixedTimeSeconds(3);
    
    EndUnconditionally(EventEndType.Restart);
});

//-----------------------------------
// Door - Handle Door State
// <used flag>, <object activated flag>, <object>, <ObjAct param row>
//-----------------------------------
Event(20005611, Default, function(X0_4, X4_4, X8_4, X12_4) {
    GotoIfEventFlag(Label.LABEL0, OFF, TargetEventFlagType.EventFlag, X0_4); // Goto Label 0 if door was not previously opened
    
    // Disable door
    DeactivateObjactAssignIdx(X8_4, X12_4, 0, Disabled);
    DeactivateObjactAssignIdx(X8_4, X12_4, 1, Disabled);
    DeactivateObjactAssignIdx(X8_4, X12_4, 2, Disabled);
    DeactivateObjactAssignIdx(X8_4, X12_4, 3, Disabled);
    EndUnconditionally(EventEndType.End);
    
    
    Label0();
    IfObjactEventFlag(MAIN, X4_4); // Wait for object activated flag (+2000 of entity ID)
    SetEventFlag(X0_4, ON); // Set object used flag
    WaitFixedTimeSeconds(2);
    
    // Disable door
    DeactivateObjactAssignIdx(X8_4, X12_4, 0, Disabled);
    DeactivateObjactAssignIdx(X8_4, X12_4, 1, Disabled);
    DeactivateObjactAssignIdx(X8_4, X12_4, 2, Disabled);
    DeactivateObjactAssignIdx(X8_4, X12_4, 3, Disabled);
    EndUnconditionally(EventEndType.End);
});

//-----------------------------------
// Door - UNUSED
//-----------------------------------
Event(20005612, Default, function(X0_4, X4_4) {
    IfObjactEventFlag(MAIN, X4_4);
    SetEventFlag(X0_4, ON);
});

//-----------------------------------
// Door - Show Message on Usage
// <used flag>, <object activated flag>, <object>, <ObjAct param row>, <message ID>
//-----------------------------------
Event(20005613, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true); // End if player is a client
    
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X0_4); // Goto Label 0 if door was previously used
    
    IfPlayerIsNotInOwnWorldExcludesArena(AND_01, false); // Player is in own world
    IfObjactEventFlag(AND_01, X4_4); // Object has been activated
    IfConditionGroup(MAIN, PASS, AND_01);
    
    DisplayGenericDialog(X16_4, PromptType.OKCANCEL, NumberofOptions.NoButtons, X8_4, 3); // Show message on activation
    SetEventFlag(X0_4, ON); // Set used flag
    
    Label0();
    SetObjactState(X8_4, X12_4, Disabled); // Disable object activation
});

//-----------------------------------
// Door - Show Wrong Side Message
//-----------------------------------
Event(20005614, Default, function(X0_4, X4_4) {
    SetNetworkSyncState(Disabled);
    IfActionButtonInArea(OR_01, 7101, X0_4); // Check if door is used
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X4_4); // Chec if conditional flag is ON
    IfConditionGroup(MAIN, PASS, OR_01);
    
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X4_4); // End if conditional flag is set
    
    DisplayGenericDialog(10010161, PromptType.OKCANCEL, NumberofOptions.OneButton, -1, 3); // Does no open from this side
    
    EndUnconditionally(EventEndType.Restart);
});

//-----------------------------------
// Lift - Setup 1
// <used flag>, <state flag>, <lift object>, <lever 1 object>, <lever 2 object>, <flag>
// lift object: base ID
// used flag: prefix 1 to base ID
// state flag: prefix 1 to base ID, +1000 to base ID
//  ON: at bottom
//  OFF: at top
// flag: prefix 1 to base ID, +1001 to base ID
//-----------------------------------
Event(20005620, Default, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4) {
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0); // Skip if no invaders are present
    SetEventFlag(X20_4, OFF); // Set flag off (disables usage?)
    
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X0_4); // Goto Label 0 if previously used
    
    ForceAnimationPlayback(X8_4, 20, false, false, true, 0, 1); // Move up
    SetEventFlag(X4_4, OFF);
    SetObjactState(X12_4, -1, Disabled); // Disable lever 1
    EndUnconditionally(EventEndType.End);
    
    Label0();
    ForceAnimationPlayback(X8_4, 10, false, false, true, 0, 1); // Move down
    SetEventFlag(X4_4, ON);
    SetObjactState(X16_4, -1, Disabled); // Disable lever 2
    EndUnconditionally(EventEndType.End);
});

//-----------------------------------
// Lift -
// <used flag>, <state flag>, <lift object>, 
// <lever 1 object>, <lever 1 ObjAct entity ID>, <lever 2 object>, <lever 2 ObjAct entity ID>, 
// <top region>, <bottom region>
// <unknown flag 1>, <unknown flag 2>, <unknown flag 3>
//-----------------------------------
Event(20005621, Default, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4, X32_4, X36_4, X40_4, X44_4) {
    IfEventFlag(AND_13, ON, TargetEventFlagType.EventFlag, X0_4); // Used flag
    IfEventFlag(AND_13, ON, TargetEventFlagType.EventFlag, X4_4); // State flag: TOP
    IfConditionGroup(OR_15, PASS, AND_13);
    IfEventFlag(AND_14, OFF, TargetEventFlagType.EventFlag, X0_4); // Used flag
    IfEventFlag(AND_14, OFF, TargetEventFlagType.EventFlag, X4_4); // State flag: BOTTOM
    IfConditionGroup(OR_15, PASS, AND_14);
    IfConditionGroup(AND_15, PASS, OR_15);
    IfEventFlag(AND_15, ON, TargetEventFlagType.EventFlag, X36_4); // Check if unknown flag 1 is ON
    GotoIfConditionGroupStateUncompiled(Label.LABEL9, PASS, AND_15); // Goto Label 9 if unknown flag 1 is ON
    
    GotoIfEventFlag(Label.LABEL2, ON, TargetEventFlagType.EventFlag, X4_4);
    SkipIfNumberOfClientsOfType(2, ClientType.Invader, ComparisonType.Equal, 0);
    SetObjactState(X20_4, -1, Enabled);
    SetObjactState(X12_4, -1, Disabled);
    IfObjactEventFlag(OR_01, X24_4);
    IfEventFlag(OR_02, ON, TargetEventFlagType.EventFlag, X0_4);
    IfInoutsideArea(AND_03, InsideOutsideState.Inside, 10000, X28_4, 1);
    IfCharacterHasSpeffect(AND_03, 10000, 4800, false, ComparisonType.Equal, 1);
    SkipIfComparison(1, ComparisonType.Equal, X44_4, 0);
    IfEventFlag(AND_03, ON, TargetEventFlagType.EventFlag, X44_4);
    IfConditionGroup(OR_04, PASS, OR_01);
    IfConditionGroup(OR_04, PASS, OR_02);
    IfConditionGroup(OR_04, PASS, AND_03);
    IfConditionGroup(MAIN, PASS, OR_04);
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    SetObjactState(X20_4, -1, Disabled);
    SkipIfNumberOfClientsOfType(2, ClientType.Invader, ComparisonType.Equal, 0);
    SetNetworkconnectedEventFlag(X36_4, ON);
    SetNetworkconnectedEventFlag(X0_4, ON);
    SetEventFlag(X4_4, ON);
    GotoIfConditionGroupStateCompiled(Label.LABEL0, PASS, OR_01);
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X40_4);
    ForceAnimationPlayback(X8_4, 21, false, true, true, 0, 1);
    GotoUnconditionally(Label.LABEL1);
    
    Label0();
    SetNetworkconnectedEventFlag(X40_4, ON);
    WaitFixedTimeSeconds(2);
    ForceAnimationPlayback(X8_4, 21, false, true, true, 0, 1);
    ForceAnimationPlayback(X20_4, 3, false, false, true, 0, 1);
    SetNetworkconnectedEventFlag(X40_4, OFF);
    
    Label1();
    IfAllPlayersInoutsideArea(OR_10, InsideOutsideState.Outside, X32_4);
    IfEventFlag(OR_10, OFF, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(AND_01, PASS, OR_10);
    IfObjectBackread(AND_01, X8_4, true, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, PASS, AND_01);
    SkipIfNumberOfClientsOfType(3, ClientType.Invader, ComparisonType.Equal, 0);
    SetNetworkconnectedEventFlag(X36_4, OFF);
    ForceAnimationPlayback(X8_4, 110, false, false, true, 0, 1);
    SkipUnconditionally(1);
    ForceAnimationPlayback(X8_4, 110, false, true, true, 0, 1);
    EndUnconditionally(EventEndType.Restart);
    
    Label2();
    SkipIfNumberOfClientsOfType(2, ClientType.Invader, ComparisonType.Equal, 0);
    SetObjactState(X12_4, -1, Enabled);
    SetObjactState(X20_4, -1, Disabled);
    IfObjactEventFlag(OR_05, X16_4);
    IfEventFlag(OR_06, OFF, TargetEventFlagType.EventFlag, X0_4);
    IfInoutsideArea(AND_07, InsideOutsideState.Inside, 10000, X32_4, 1);
    IfCharacterHasSpeffect(AND_07, 10000, 4800, false, ComparisonType.Equal, 1);
    SkipIfComparison(1, ComparisonType.Equal, X44_4, 0);
    IfEventFlag(AND_07, ON, TargetEventFlagType.EventFlag, X44_4);
    IfConditionGroup(OR_08, PASS, OR_05);
    IfConditionGroup(OR_08, PASS, OR_06);
    IfConditionGroup(OR_08, PASS, AND_07);
    IfConditionGroup(MAIN, PASS, OR_08);
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    SetObjactState(X12_4, -1, Disabled);
    SkipIfNumberOfClientsOfType(2, ClientType.Invader, ComparisonType.Equal, 0);
    SetNetworkconnectedEventFlag(X36_4, ON);
    SetNetworkconnectedEventFlag(X0_4, OFF);
    SetEventFlag(X4_4, OFF);
    GotoIfConditionGroupStateCompiled(Label.LABEL3, PASS, OR_05);
    GotoIfEventFlag(Label.LABEL3, ON, TargetEventFlagType.EventFlag, X40_4);
    ForceAnimationPlayback(X8_4, 12, false, true, true, 0, 1);
    GotoUnconditionally(Label.LABEL4);
    
    Label3();
    SetNetworkconnectedEventFlag(X40_4, ON);
    WaitFixedTimeSeconds(2);
    ForceAnimationPlayback(X8_4, 12, false, true, true, 0, 1);
    ForceAnimationPlayback(X12_4, 3, false, false, true, 0, 1);
    SetNetworkconnectedEventFlag(X40_4, OFF);
    
    Label4();
    IfAllPlayersInoutsideArea(OR_11, InsideOutsideState.Outside, X28_4);
    IfEventFlag(OR_11, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(AND_02, PASS, OR_11);
    IfObjectBackread(AND_02, X8_4, true, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, PASS, AND_02);
    SkipIfNumberOfClientsOfType(3, ClientType.Invader, ComparisonType.Equal, 0);
    SetNetworkconnectedEventFlag(X36_4, OFF);
    ForceAnimationPlayback(X8_4, 120, false, false, true, 0, 1);
    SkipUnconditionally(1);
    ForceAnimationPlayback(X8_4, 120, false, true, true, 0, 1);
    EndUnconditionally(EventEndType.Restart);
    
    Label9();
    IfEventFlag(MAIN, OFF, TargetEventFlagType.EventFlag, X36_4);
    EndUnconditionally(EventEndType.Restart);
});

//-----------------------------------
// Lift - Small - Setup 1
//-----------------------------------
Event(20005622, Default, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4) {
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    SetEventFlag(X20_4, OFF);
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X0_4);
    ForceAnimationPlayback(X8_4, 1000020, false, false, true, 0, 1);
    SetEventFlag(X4_4, OFF);
    SetObjactState(X12_4, -1, Disabled);
    EndUnconditionally(EventEndType.End);
    Label0();
    ForceAnimationPlayback(X8_4, 1000010, false, false, true, 0, 1);
    SetEventFlag(X4_4, ON);
    SetObjactState(X16_4, -1, Disabled);
    EndUnconditionally(EventEndType.End);
});

//-----------------------------------
// Lift -
//-----------------------------------
Event(20005623, Default, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4, X32_4, X36_4, X40_4, X44_4) {
    IfEventFlag(AND_13, ON, TargetEventFlagType.EventFlag, X0_4);
    IfEventFlag(AND_13, ON, TargetEventFlagType.EventFlag, X4_4);
    IfConditionGroup(OR_15, PASS, AND_13);
    IfEventFlag(AND_14, OFF, TargetEventFlagType.EventFlag, X0_4);
    IfEventFlag(AND_14, OFF, TargetEventFlagType.EventFlag, X4_4);
    IfConditionGroup(OR_15, PASS, AND_14);
    IfConditionGroup(AND_15, PASS, OR_15);
    IfEventFlag(AND_15, ON, TargetEventFlagType.EventFlag, X36_4);
    GotoIfConditionGroupStateUncompiled(Label.LABEL9, PASS, AND_15);
    GotoIfEventFlag(Label.LABEL2, ON, TargetEventFlagType.EventFlag, X4_4);
    SkipIfNumberOfClientsOfType(2, ClientType.Invader, ComparisonType.Equal, 0);
    SetObjactState(X20_4, -1, Enabled);
    SetObjactState(X12_4, -1, Disabled);
    IfObjactEventFlag(OR_01, X24_4);
    IfEventFlag(OR_02, ON, TargetEventFlagType.EventFlag, X0_4);
    IfInoutsideArea(AND_03, InsideOutsideState.Inside, 10000, X28_4, 1);
    IfCharacterHasSpeffect(AND_03, 10000, 4800, false, ComparisonType.Equal, 1);
    SkipIfComparison(1, ComparisonType.Equal, X44_4, 0);
    IfEventFlag(AND_03, ON, TargetEventFlagType.EventFlag, X44_4);
    IfConditionGroup(OR_04, PASS, OR_01);
    IfConditionGroup(OR_04, PASS, OR_02);
    IfConditionGroup(OR_04, PASS, AND_03);
    IfConditionGroup(MAIN, PASS, OR_04);
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    SetObjactState(X20_4, -1, Disabled);
    SkipIfNumberOfClientsOfType(2, ClientType.Invader, ComparisonType.Equal, 0);
    SetNetworkconnectedEventFlag(X36_4, ON);
    SetNetworkconnectedEventFlag(X0_4, ON);
    SetEventFlag(X4_4, ON);
    GotoIfConditionGroupStateCompiled(Label.LABEL0, PASS, OR_01);
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X40_4);
    ForceAnimationPlayback(X8_4, 1000021, false, true, true, 0, 1);
    GotoUnconditionally(Label.LABEL1);
    Label0();
    SetNetworkconnectedEventFlag(X40_4, ON);
    WaitFixedTimeSeconds(2);
    ForceAnimationPlayback(X8_4, 1000021, false, true, true, 0, 1);
    ForceAnimationPlayback(X20_4, 3, false, false, true, 0, 1);
    SetNetworkconnectedEventFlag(X40_4, OFF);
    Label1();
    IfAllPlayersInoutsideArea(OR_10, InsideOutsideState.Outside, X32_4);
    IfEventFlag(OR_10, OFF, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(AND_01, PASS, OR_10);
    IfObjectBackread(AND_01, X8_4, true, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, PASS, AND_01);
    SkipIfNumberOfClientsOfType(3, ClientType.Invader, ComparisonType.Equal, 0);
    SetNetworkconnectedEventFlag(X36_4, OFF);
    ForceAnimationPlayback(X8_4, 1000110, false, false, true, 0, 1);
    SkipUnconditionally(1);
    ForceAnimationPlayback(X8_4, 1000110, false, true, true, 0, 1);
    EndUnconditionally(EventEndType.Restart);
    Label2();
    SkipIfNumberOfClientsOfType(2, ClientType.Invader, ComparisonType.Equal, 0);
    SetObjactState(X12_4, -1, Enabled);
    SetObjactState(X20_4, -1, Disabled);
    IfObjactEventFlag(OR_05, X16_4);
    IfEventFlag(OR_06, OFF, TargetEventFlagType.EventFlag, X0_4);
    IfInoutsideArea(AND_07, InsideOutsideState.Inside, 10000, X32_4, 1);
    IfCharacterHasSpeffect(AND_07, 10000, 4800, false, ComparisonType.Equal, 1);
    SkipIfComparison(1, ComparisonType.Equal, X44_4, 0);
    IfEventFlag(AND_07, ON, TargetEventFlagType.EventFlag, X44_4);
    IfConditionGroup(OR_08, PASS, OR_05);
    IfConditionGroup(OR_08, PASS, OR_06);
    IfConditionGroup(OR_08, PASS, AND_07);
    IfConditionGroup(MAIN, PASS, OR_08);
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    SetObjactState(X12_4, -1, Disabled);
    SkipIfNumberOfClientsOfType(2, ClientType.Invader, ComparisonType.Equal, 0);
    SetNetworkconnectedEventFlag(X36_4, ON);
    SetNetworkconnectedEventFlag(X0_4, OFF);
    SetEventFlag(X4_4, OFF);
    GotoIfConditionGroupStateCompiled(Label.LABEL3, PASS, OR_05);
    GotoIfEventFlag(Label.LABEL3, ON, TargetEventFlagType.EventFlag, X40_4);
    ForceAnimationPlayback(X8_4, 1000012, false, true, true, 0, 1);
    GotoUnconditionally(Label.LABEL4);
    Label3();
    SetNetworkconnectedEventFlag(X40_4, ON);
    WaitFixedTimeSeconds(2);
    ForceAnimationPlayback(X8_4, 1000012, false, true, true, 0, 1);
    ForceAnimationPlayback(X12_4, 3, false, false, true, 0, 1);
    SetNetworkconnectedEventFlag(X40_4, OFF);
    Label4();
    IfAllPlayersInoutsideArea(OR_11, InsideOutsideState.Outside, X28_4);
    IfEventFlag(OR_11, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(AND_02, PASS, OR_11);
    IfObjectBackread(AND_02, X8_4, true, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, PASS, AND_02);
    SkipIfNumberOfClientsOfType(3, ClientType.Invader, ComparisonType.Equal, 0);
    SetNetworkconnectedEventFlag(X36_4, OFF);
    ForceAnimationPlayback(X8_4, 1000120, false, false, true, 0, 1);
    SkipUnconditionally(1);
    ForceAnimationPlayback(X8_4, 1000120, false, true, true, 0, 1);
    EndUnconditionally(EventEndType.Restart);
    Label9();
    IfEventFlag(MAIN, OFF, TargetEventFlagType.EventFlag, X36_4);
    EndUnconditionally(EventEndType.Restart);
});

//-----------------------------------
// Lift -
//-----------------------------------
Event(20005624, Default, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4) {
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    SetEventFlag(X20_4, OFF);
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X0_4);
    ForceAnimationPlayback(X8_4, 2000020, false, false, true, 0, 1);
    SetEventFlag(X4_4, OFF);
    SetObjactState(X12_4, -1, Disabled);
    EndUnconditionally(EventEndType.End);
    Label0();
    ForceAnimationPlayback(X8_4, 2000010, false, false, true, 0, 1);
    SetEventFlag(X4_4, ON);
    SetObjactState(X16_4, -1, Disabled);
    EndUnconditionally(EventEndType.End);
});

//---------------------------------
// Setup Lift
//---------------------------------
Event(20005625, Default, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4, X32_4, X36_4, X40_4, X44_4) {
    IfEventFlag(AND_13, ON, TargetEventFlagType.EventFlag, X0_4);
    IfEventFlag(AND_13, ON, TargetEventFlagType.EventFlag, X4_4);
    IfConditionGroup(OR_15, PASS, AND_13);
    IfEventFlag(AND_14, OFF, TargetEventFlagType.EventFlag, X0_4);
    IfEventFlag(AND_14, OFF, TargetEventFlagType.EventFlag, X4_4);
    IfConditionGroup(OR_15, PASS, AND_14);
    IfConditionGroup(AND_15, PASS, OR_15);
    IfEventFlag(AND_15, ON, TargetEventFlagType.EventFlag, X36_4);
    GotoIfConditionGroupStateUncompiled(Label.LABEL9, PASS, AND_15);
    GotoIfEventFlag(Label.LABEL2, ON, TargetEventFlagType.EventFlag, X4_4);
    SkipIfNumberOfClientsOfType(2, ClientType.Invader, ComparisonType.Equal, 0);
    SetObjactState(X20_4, -1, Enabled);
    SetObjactState(X12_4, -1, Disabled);
    IfObjactEventFlag(OR_01, X24_4);
    IfEventFlag(OR_02, ON, TargetEventFlagType.EventFlag, X0_4);
    IfInoutsideArea(AND_03, InsideOutsideState.Inside, 10000, X28_4, 1);
    IfCharacterHasSpeffect(AND_03, 10000, 4800, false, ComparisonType.Equal, 1);
    SkipIfComparison(1, ComparisonType.Equal, X44_4, 0);
    IfEventFlag(AND_03, ON, TargetEventFlagType.EventFlag, X44_4);
    IfConditionGroup(OR_04, PASS, OR_01);
    IfConditionGroup(OR_04, PASS, OR_02);
    IfConditionGroup(OR_04, PASS, AND_03);
    IfConditionGroup(MAIN, PASS, OR_04);
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    SetObjactState(X20_4, -1, Disabled);
    SkipIfNumberOfClientsOfType(2, ClientType.Invader, ComparisonType.Equal, 0);
    SetNetworkconnectedEventFlag(X36_4, ON);
    SetNetworkconnectedEventFlag(X0_4, ON);
    SetEventFlag(X4_4, ON);
    GotoIfConditionGroupStateCompiled(Label.LABEL0, PASS, OR_01);
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X40_4);
    ForceAnimationPlayback(X8_4, 2000021, false, true, true, 0, 1);
    GotoUnconditionally(Label.LABEL1);
    Label0();
    SetNetworkconnectedEventFlag(X40_4, ON);
    WaitFixedTimeSeconds(2);
    ForceAnimationPlayback(X8_4, 2000021, false, true, true, 0, 1);
    ForceAnimationPlayback(X20_4, 3, false, false, true, 0, 1);
    SetNetworkconnectedEventFlag(X40_4, OFF);
    Label1();
    IfAllPlayersInoutsideArea(OR_10, InsideOutsideState.Outside, X32_4);
    IfEventFlag(OR_10, OFF, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(AND_01, PASS, OR_10);
    IfObjectBackread(AND_01, X8_4, true, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, PASS, AND_01);
    SkipIfNumberOfClientsOfType(3, ClientType.Invader, ComparisonType.Equal, 0);
    SetNetworkconnectedEventFlag(X36_4, OFF);
    ForceAnimationPlayback(X8_4, 2000110, false, false, true, 0, 1);
    SkipUnconditionally(1);
    ForceAnimationPlayback(X8_4, 2000110, false, true, true, 0, 1);
    EndUnconditionally(EventEndType.Restart);
    Label2();
    SkipIfNumberOfClientsOfType(2, ClientType.Invader, ComparisonType.Equal, 0);
    SetObjactState(X12_4, -1, Enabled);
    SetObjactState(X20_4, -1, Disabled);
    IfObjactEventFlag(OR_05, X16_4);
    IfEventFlag(OR_06, OFF, TargetEventFlagType.EventFlag, X0_4);
    IfInoutsideArea(AND_07, InsideOutsideState.Inside, 10000, X32_4, 1);
    IfCharacterHasSpeffect(AND_07, 10000, 4800, false, ComparisonType.Equal, 1);
    SkipIfComparison(1, ComparisonType.Equal, X44_4, 0);
    IfEventFlag(AND_07, ON, TargetEventFlagType.EventFlag, X44_4);
    IfConditionGroup(OR_08, PASS, OR_05);
    IfConditionGroup(OR_08, PASS, OR_06);
    IfConditionGroup(OR_08, PASS, AND_07);
    IfConditionGroup(MAIN, PASS, OR_08);
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    SetObjactState(X12_4, -1, Disabled);
    SkipIfNumberOfClientsOfType(2, ClientType.Invader, ComparisonType.Equal, 0);
    SetNetworkconnectedEventFlag(X36_4, ON);
    SetNetworkconnectedEventFlag(X0_4, OFF);
    SetEventFlag(X4_4, OFF);
    GotoIfConditionGroupStateCompiled(Label.LABEL3, PASS, OR_05);
    GotoIfEventFlag(Label.LABEL3, ON, TargetEventFlagType.EventFlag, X40_4);
    ForceAnimationPlayback(X8_4, 2000012, false, true, true, 0, 1);
    GotoUnconditionally(Label.LABEL4);
    Label3();
    SetNetworkconnectedEventFlag(X40_4, ON);
    WaitFixedTimeSeconds(2);
    ForceAnimationPlayback(X8_4, 2000012, false, true, true, 0, 1);
    ForceAnimationPlayback(X12_4, 3, false, false, true, 0, 1);
    SetNetworkconnectedEventFlag(X40_4, OFF);
    Label4();
    IfAllPlayersInoutsideArea(OR_11, InsideOutsideState.Outside, X28_4);
    IfEventFlag(OR_11, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(AND_02, PASS, OR_11);
    IfObjectBackread(AND_02, X8_4, true, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, PASS, AND_02);
    SkipIfNumberOfClientsOfType(3, ClientType.Invader, ComparisonType.Equal, 0);
    SetNetworkconnectedEventFlag(X36_4, OFF);
    ForceAnimationPlayback(X8_4, 2000120, false, false, true, 0, 1);
    SkipUnconditionally(1);
    ForceAnimationPlayback(X8_4, 2000120, false, true, true, 0, 1);
    EndUnconditionally(EventEndType.Restart);
    Label9();
    IfEventFlag(MAIN, OFF, TargetEventFlagType.EventFlag, X36_4);
    EndUnconditionally(EventEndType.Restart);
});

//-----------------------------------
// Lift -
//-----------------------------------
Event(20000627, Default, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    SetNetworkSyncState(Disabled);
    GotoIfComparison(Label.LABEL0, ComparisonType.Equal, X8_4, 0);
    IfEventFlag(AND_01, OFF, TargetEventFlagType.EventFlag, X8_4);
    IfActionButtonInArea(AND_01, 8300, X12_4);
    IfConditionGroup(OR_01, PASS, AND_01);
    IfEventFlag(AND_02, OFF, TargetEventFlagType.EventFlag, X8_4);
    IfActionButtonInArea(AND_02, 8300, X16_4);
    IfConditionGroup(OR_01, PASS, AND_02);
    IfEventFlag(AND_03, OFF, TargetEventFlagType.EventFlag, X0_4);
    IfEventFlag(AND_05, ON, TargetEventFlagType.EventFlag, X4_4);
    IfConditionGroup(MAIN, PASS, OR_01);
    DisplayGenericDialog(10010170, PromptType.OKCANCEL, NumberofOptions.OneButton, -1, 3);
    EndUnconditionally(EventEndType.Restart);
    Label0();
    EndUnconditionally(EventEndType.End);
});

//-----------------------------------
// Lift -
//-----------------------------------
Event(20005628, Restart, function(X0_4, X4_4, X8_4) {
    SetNetworkSyncState(Disabled);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    WaitFixedTimeFrames(2);
    SetObjactState(X4_4, -1, Disabled);
    IfCharacterType(OR_15, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfCharacterType(OR_15, 10000, TargetType.Hollow, ComparisonType.Equal, 1);
    IfInoutsideArea(AND_13, InsideOutsideState.Inside, 10000, X8_4, 1);
    IfConditionGroup(AND_13, PASS, OR_15);
    IfConditionGroup(OR_01, PASS, AND_13);
    IfActionButtonInArea(OR_02, 8300, X4_4);
    IfConditionGroup(OR_03, PASS, OR_01);
    IfConditionGroup(OR_03, PASS, OR_02);
    IfEventFlag(OR_03, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(MAIN, PASS, OR_03);
    GotoIfConditionGroupStateCompiled(Label.LABEL0, PASS, OR_01);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    DisplayGenericDialog(10010170, PromptType.OKCANCEL, NumberofOptions.OneButton, -1, 3);
    EndUnconditionally(EventEndType.Restart);
    Label0();
    SetNetworkconnectedEventFlag(X0_4, ON);
    EndUnconditionally(EventEndType.Restart);
});

//---------------------------------
// Ladder - Setup Kick Ladder
//---------------------------------
Event(20005640, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    GotoIfEventFlag(Label.LABEL0, OFF, TargetEventFlagType.EventFlag, X0_4);
    ReproduceObjectAnimation(X4_4, 2);
    RegisterLadder(X8_4, X12_4, X4_4);
    EndUnconditionally(EventEndType.End);
    Label0();
    IfPlayerIsNotInOwnWorldExcludesArena(AND_01, false);
    IfActionButtonInArea(AND_01, 9200, X4_4);
    IfConditionGroup(MAIN, PASS, AND_01);
    SetNetworkconnectedEventFlag(X0_4, ON);
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    RotateCharacter(10000, X4_4, 60210, false);
    ForceAnimationPlayback(X4_4, 1, false, true, false, 0, 1);
    RegisterLadder(X8_4, X12_4, X4_4);
});

//---------------------------------
// Illusory Wall - Setup
// <used flag>, <object>
//---------------------------------
Event(20005650, Restart, function(X0_4, X4_4) {
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X0_4); // Goto Label0 if used flag is ON
    
    IfPlayerIsNotInOwnWorldExcludesArena(AND_01, false); // Is player in own world
    IfDamageType(AND_01, X4_4, 10000, DamageType.Unspecified); // Has the object taken a damage event from the player
    IfConditionGroup(MAIN, PASS, AND_01);
    
    SetNetworkconnectedEventFlag(X0_4, ON); // Set used flag
    
    ForceAnimationPlayback(X4_4, 1, false, true, false, 0, 1); // Play fade animation
    
    Label0();
    DeactivateObject(X4_4, Disabled); // Disable object if previously destroyed
});

Event(20005660, Default, function(X0_4, X4_1, X5_1, X8_4) {
    SetNetworkSyncState(Disabled);
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    SetEventFlag(X0_4, OFF);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X0_4);
    SetEventFlag(X0_4, OFF);
    ForceAnimationPlayback(10000, 68101, false, false, false, 0, 1);
    WaitFixedTimeSeconds(4);
    WarpPlayer(X4_1, X5_1, X8_4);
});

Event(20005670, Restart, function(X0_1, X1_1, X4_4) {
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, 9412);
    IfPlayerInoutMap(AND_01, true, X0_1, X1_1);
    IfConditionGroup(MAIN, PASS, AND_01);
    DeleteMapSFX(X4_4, false);
});

Event(20005671, Restart, function(X0_1, X1_1, X4_4) {
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, 9413);
    IfPlayerInoutMap(AND_01, true, X0_1, X1_1);
    IfConditionGroup(MAIN, PASS, AND_01);
    DeleteMapSFX(X4_4, false);
});

Event(20005672, Restart, function(X0_1, X1_1, X4_4) {
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, 9414);
    IfPlayerInoutMap(AND_01, true, X0_1, X1_1);
    IfConditionGroup(MAIN, PASS, AND_01);
    DeleteMapSFX(X4_4, false);
});

Event(20005673, Restart, function(X0_1, X1_1, X4_4) {
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, 9415);
    IfPlayerInoutMap(AND_01, true, X0_1, X1_1);
    IfConditionGroup(MAIN, PASS, AND_01);
    DeleteMapSFX(X4_4, false);
});

//-------------------------------------------
// Summon Setup - Basic
// <boss flag>, <summon flag>, <dismiss flag>, <entity id>, <spawnpoint id>
//-------------------------------------------
Event(20005700, Default, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    // Skip if no invaders are present
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    SetNetworkUpdateAuthority(X12_4, AuthorityLevel.Forced);
    
    // End function if boss has already been killed
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    
    // Check summon sign conditions
    IfPlayerIsNotInOwnWorldExcludesArena(AND_01, false); // Player is in own world
    IfCharacterHasSpeffect(AND_01, 10000, 490, true, ComparisonType.Equal, 1); // Player is embered
    IfCharacterBackreadStatus(AND_01, X12_4, true, ComparisonType.Equal, 1); // Summon is loaded
    IfEntityInoutsideRadiusOfEntity(AND_01, InsideOutsideState.Inside, X12_4, 10000, 10, 1); // Summon position is near player
    IfConditionGroup(MAIN, PASS, AND_01);
    
    // Place summon sign
    PlaceNPCSummonSign(SummonSignType.WhiteSign, X12_4, X16_4, X4_4, X8_4);
});

//-------------------------------------------
// Summon Setup - Triggered by Flag
// <boss flag>, <summon flag>, <dismiss flag>, <entity id>, <spawnpoint id>, <trigger flag>
//-------------------------------------------
Event(20005701, Default, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4) {
    // Skip if no invaders are present
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    SetNetworkUpdateAuthority(X12_4, AuthorityLevel.Forced);
    
    // Useless?
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X8_4);
    Label0();
    Label1();
    
    // End if boss is defeated, or skip check if arg is set to 0
    SkipIfComparison(1, ComparisonType.Equal, X0_4, 0);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    
    // Check if triggering flag is ON, or skip check if arg is set to 0
    SkipIfComparison(1, ComparisonType.Equal, X20_4, 0);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X20_4);
    
    // Check summon sign conditions
    IfPlayerIsNotInOwnWorldExcludesArena(AND_01, false); // Player is in own world
    IfCharacterHasSpeffect(AND_01, 10000, 490, true, ComparisonType.Equal, 1); // Player is embered
    IfCharacterBackreadStatus(AND_01, X12_4, true, ComparisonType.Equal, 1); // Summon is loaded
    IfEntityInoutsideRadiusOfEntity(AND_01, InsideOutsideState.Inside, X12_4, 10000, 10, 1); // Summon position is near player
    IfConditionGroup(MAIN, PASS, AND_01);
    
    // Place summon sign
    PlaceNPCSummonSign(SummonSignType.WhiteSign, X12_4, X16_4, X4_4, X8_4);
});

//-------------------------------------------
// Summon Setup - UNUSED
//-------------------------------------------
Event(20005702, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    SetNetworkUpdateAuthority(X12_4, AuthorityLevel.Forced);
    
    SkipIfEventFlag(3, ON, TargetEventFlagType.EventFlag, X8_4);
    IfPlayerIsNotInOwnWorldExcludesArena(AND_02, true);
    IfEventFlag(AND_02, ON, TargetEventFlagType.EventFlag, X4_4);
    SkipIfConditionGroupStateUncompiled(1, PASS, AND_02);
    
    ChangeCharacterEnableState(X12_4, Disabled);
    SetCharacterAnimationState(X12_4, Disabled);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    IfCharacterAIState(MAIN, X12_4, AIStateType.Combat, ComparisonType.Equal, 1);
    SetCharacterAnimationState(X12_4, Enabled);
});

//-------------------------------------------
// Summon - Fogwall Handler
// <summon flag>, <boss inbattle flag> <entity id>, <region id>, <region id>
//-------------------------------------------
Event(20005710, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true); // End if player is a client
    
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X0_4); // Summon is active
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X4_4); // Boss fight is in progress
    IfConditionGroup(MAIN, PASS, AND_01);
    
    // Adjust AI of summon for fogwall traversal
    RequestCharacterAICommand(X8_4, 10, 0);
    RequestCharacterAIReplan(X8_4);
    
    // Check if AI in is in the entrance zone
    IfInoutsideArea(MAIN, InsideOutsideState.Inside, X8_4, X16_4, 1);
    RotateCharacter(X8_4, X12_4, 60060, true); // Move through fogwall
    
    // Check if the AI has passed through the fogwall and is in the exit zone
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, X8_4, X12_4, 1);
    IfElapsedSeconds(OR_01, 3);
    IfConditionGroup(OR_02, PASS, OR_01);
    IfConditionGroup(MAIN, PASS, OR_02);
    EndIfConditionGroupStateCompiled(EventEndType.Restart, PASS, OR_01); // Restart if AI hasn't touched exit zone within 3 seconds
    
    // Adjust AI of summon back to normal
    RequestCharacterAICommand(X8_4, -1, 0);
    RequestCharacterAIReplan(X8_4);
    SetNetworkUpdateRate(X8_4, true, CharacterUpdateFrequency.AlwaysUpdate);
});

//-------------------------------------------
// Summon - Fogwall Handler - Conditional Entry
// <summon flag>, <boss inbattle flag> <entity id>, <region id>, <region id>, <conditional flag>
//-------------------------------------------
Event(20005711, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true); // End if player is a client
    
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X0_4); // Summon is active
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X4_4); // Boss fight is in progress
    IfConditionGroup(MAIN, PASS, AND_01);
    
    // Adjust AI of summon for fogwall traversal
    RequestCharacterAICommand(X8_4, 10, 0);
    RequestCharacterAIReplan(X8_4);
    
    // Check if AI in is in the entrance zone and conditional flag is ON
    IfInoutsideArea(AND_02, InsideOutsideState.Inside, X8_4, X16_4, 1);
    IfEventFlag(AND_02, ON, TargetEventFlagType.EventFlag, X20_4);
    IfConditionGroup(MAIN, PASS, AND_02);
    RotateCharacter(X8_4, X12_4, 60060, true); // Move through fogwall
    
    // Check if the AI has passed through the fogwall and is in the exit zone
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, X8_4, X12_4, 1);
    IfElapsedSeconds(OR_01, 3);
    IfConditionGroup(OR_02, PASS, OR_01);
    IfConditionGroup(MAIN, PASS, OR_02);
    EndIfConditionGroupStateCompiled(EventEndType.Restart, PASS, OR_01); // Restart if AI hasn't touched exit zone within 3 seconds
    
    // Adjust AI of summon back to normal
    RequestCharacterAICommand(X8_4, -1, 0);
    RequestCharacterAIReplan(X8_4);
    SetNetworkUpdateRate(X8_4, true, CharacterUpdateFrequency.AlwaysUpdate);
});

//-------------------------------------------
// Summon - Fogwall Handler - Client
//-------------------------------------------
Event(20005716, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4) {
    GotoIfPlayerIsNotInOwnWorldExcludesArena(Label.LABEL0, true); // Goto Label 0 if a client
    
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X0_4); // Summon is active
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X4_4); // Boss fight is in progress
    IfConditionGroup(MAIN, PASS, AND_01);
    
    // Adjust AI of summon for fogwall traversal
    RequestCharacterAICommand(X8_4, 10, 0);
    RequestCharacterAIReplan(X8_4);
    
    // Check if AI in is in the entrance zone and conditional flag is ON
    IfInoutsideArea(AND_02, InsideOutsideState.Inside, X8_4, X16_4, 1);
    IfEventFlag(AND_02, ON, TargetEventFlagType.EventFlag, X20_4);
    IfConditionGroup(MAIN, PASS, AND_02);
    
    SetNetworkUpdateRate(X8_4, true, CharacterUpdateFrequency.AlwaysUpdate);
    WaitFixedTimeSeconds(0.5);
    RotateCharacter(X8_4, X12_4, 60060, true); // Move through fogwall
    
    // Check if the AI has passed through the fogwall and is in the exit zone
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, X8_4, X12_4, 1);
    IfElapsedSeconds(OR_01, 3);
    IfConditionGroup(OR_02, PASS, OR_01);
    IfConditionGroup(MAIN, PASS, OR_02);
    EndIfConditionGroupStateCompiled(EventEndType.Restart, PASS, OR_01); // Restart if AI hasn't touched exit zone within 3 seconds
    
    // Adjust AI of summon back to normal
    RequestCharacterAICommand(X8_4, -1, 0);
    RequestCharacterAIReplan(X8_4);
    
    Label0();
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    SetNetworkUpdateRate(X8_4, true, CharacterUpdateFrequency.AlwaysUpdate);
});

//-------------------------------------------
// Summon -  Fogwall Handler - Custom AI Command
//-------------------------------------------
Event(20005712, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true); // End if player is a client
    
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X0_4); // Summon is active
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X4_4); // Boss fight is in progress
    IfConditionGroup(MAIN, PASS, AND_01);
    
    // Adjust AI of summon for fogwall traversal
    RequestCharacterAICommand(X8_4, 10, 0);
    RequestCharacterAIReplan(X8_4);
    
    // Check if AI in is in the entrance zone and conditional flag is ON
    IfInoutsideArea(AND_02, InsideOutsideState.Inside, X8_4, X16_4, 1);
    IfEventFlag(AND_02, ON, TargetEventFlagType.EventFlag, X20_4);
    IfConditionGroup(MAIN, PASS, AND_02);
    RotateCharacter(X8_4, X12_4, 60060, true); // Move through fogwall
    
    // Check if the AI has passed through the fogwall and is in the exit zone
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, X8_4, X12_4, 1);
    IfElapsedSeconds(OR_01, 3);
    IfConditionGroup(OR_02, PASS, OR_01);
    IfConditionGroup(MAIN, PASS, OR_02);
    EndIfConditionGroupStateCompiled(EventEndType.Restart, PASS, OR_01); // Restart if AI hasn't touched exit zone within 3 seconds
    
    // Adjust AI of summon back to normal
    RequestCharacterAICommand(X8_4, -1, 0);
    RequestCharacterAICommand(X8_4, X24_4, 0);
    RequestCharacterAIReplan(X8_4);
    SetNetworkUpdateRate(X8_4, true, CharacterUpdateFrequency.AlwaysUpdate);
});

//-------------------------------------------
// Summon - Set Flag if present for Boss Kill
// <flag>, <boss flag>, <summon flag>, <dismiss flag>, <entity>
//-------------------------------------------
Event(20005713, Default, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    SetNetworkSyncState(Disabled);
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true); // End if player is a client
    
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4); // End if boss is defeated
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X8_4); // Is summoned
    IfEventFlag(AND_01, OFF, TargetEventFlagType.EventFlag, X12_4); // Is not dismissed
    IfCharacterHPRatio(AND_01, X16_4, ComparisonType.NotEqual, 0, ComparisonType.Equal, 1); // Summon is not dead
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X4_4); // Boss has been defeated
    IfConditionGroup(MAIN, PASS, AND_01);
    
    SetEventFlag(X0_4, ON);
});

//-------------------------------------------
// Summon - Handle Summon AI - One Region
// <summon flag>, <dismiss flag>, <entity id>, <region>, <conditional flag>
//-------------------------------------------
Event(20005714, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X16_4); // End if condition flag is ON
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X4_4); // End if dismissed
    
    IfCharacterType(AND_01, 10000, TargetType.Alive, ComparisonType.Equal, 1); // Player is alive
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X12_4, 1); // Player is in region
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X0_4); // Summon is active
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_01); // Uncompiled means this function continues even if this condition check fails
    
    IfCharacterType(AND_02, 10000, TargetType.Alive, ComparisonType.Equal, 1); // Player is alive
    IfInoutsideArea(AND_02, InsideOutsideState.Inside, 10000, X12_4, 1);  // Player is in region
    IfEventFlag(AND_02, ON, TargetEventFlagType.EventFlag, X0_4); // Summon is active
    IfConditionGroup(MAIN, PASS, AND_02);
    
    // Adjust AI of summon and restart
    RequestCharacterAICommand(X8_4, 10, 0);
    RequestCharacterAIReplan(X8_4);
    EndUnconditionally(EventEndType.Restart);
    
    Label0();
    IfCharacterType(AND_03, 10000, TargetType.Alive, ComparisonType.Equal, 1); // Player is alive
    IfInoutsideArea(AND_03, InsideOutsideState.Outside, 10000, X12_4, 1); // Player is not in region
    IfEventFlag(AND_04, ON, TargetEventFlagType.EventFlag, X4_4); // Summon is dismissed
    IfEventFlag(AND_05, ON, TargetEventFlagType.EventFlag, X0_4); // Summon is active
    
    // Check if player is not near summon or summon is dismissed
    IfConditionGroup(OR_01, PASS, AND_03);
    IfConditionGroup(OR_01, PASS, AND_04);
    
    // Check if previous check is valid or summon is active
    IfConditionGroup(AND_06, PASS, OR_01);
    IfConditionGroup(AND_06, PASS, AND_05);
    IfConditionGroup(MAIN, PASS, AND_06);
    
    IfEventFlag(AND_07, ON, TargetEventFlagType.EventFlag, X4_4); // Check if summon dismissed
    
    EndIfConditionGroupStateUncompiled(EventEndType.End, PASS, AND_07); // Uncompiled means this function continues even if this condition check fails
    
    // Adjust AI of summon and restart
    RequestCharacterAICommand(X8_4, -1, 0);
    RequestCharacterAIReplan(X8_4);
    WaitFixedTimeFrames(1);
    EndUnconditionally(EventEndType.Restart);
});

//-------------------------------------------
// Summon - Handle Summon AI - Multiple Regions
// <summon flag>, <dismiss flag>, <entity id>, <region 1>, <conditional flag>, <region 2>, <region 3>
//-------------------------------------------
Event(20005715, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X16_4); // End if condition flag is ON
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X4_4); // End if dismissed
    
    // Check if player is in region(s)
    IfInoutsideArea(OR_01, InsideOutsideState.Inside, 10000, X12_4, 1); // Player is in region 1
    SkipIfComparison(1, ComparisonType.Equal, X20_4, 0); // Skip if region 2 arg is set to 0
    IfInoutsideArea(OR_01, InsideOutsideState.Inside, 10000, X20_4, 1); // Player is in region 2
    SkipIfComparison(1, ComparisonType.Equal, X24_4, 0); // Skip if region 3 arg is set to 0
    IfInoutsideArea(OR_01, InsideOutsideState.Inside, 10000, X24_4, 1); // Player is in region 3
    IfConditionGroup(AND_01, PASS, OR_01);
    
    IfCharacterType(AND_01, 10000, TargetType.Alive, ComparisonType.Equal, 1); // Player is alive
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X0_4); // Summon is active
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_01); // Uncompiled means this function continues even if this condition check fails
    
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X12_4, 1); // Player is in region 1
    SkipIfComparison(1, ComparisonType.Equal, X20_4, 0); // Skip if region 2 arg is set to 0
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X20_4, 1); // Player is in region 2
    SkipIfComparison(1, ComparisonType.Equal, X24_4, 0); // Skip if region 3 arg is set to 0
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, X24_4, 1); // Player is in region 3
    IfConditionGroup(AND_02, PASS, OR_02);
    
    IfCharacterType(AND_02, 10000, TargetType.Alive, ComparisonType.Equal, 1); // Player is alive
    IfEventFlag(AND_02, ON, TargetEventFlagType.EventFlag, X0_4); // Summon is active
    IfConditionGroup(MAIN, PASS, AND_02);
    
    // Adjust AI of summon and restart
    RequestCharacterAICommand(X8_4, 10, 0);
    RequestCharacterAIReplan(X8_4);
    EndUnconditionally(EventEndType.Restart);
    
    Label0();
    IfInoutsideArea(OR_03, InsideOutsideState.Inside, 10000, X12_4, 1); // Player is in region 1
    SkipIfComparison(1, ComparisonType.Equal, X20_4, 0); // Skip if region 2 arg is set to 0
    IfInoutsideArea(OR_03, InsideOutsideState.Inside, 10000, X20_4, 1); // Player is in region 2
    SkipIfComparison(1, ComparisonType.Equal, X24_4, 0); // Skip if region 3 arg is set to 0
    IfInoutsideArea(OR_03, InsideOutsideState.Inside, 10000, X24_4, 1); // Player is in region 3
    IfConditionGroup(AND_03, FAIL, OR_03);
    
    IfCharacterType(AND_03, 10000, TargetType.Alive, ComparisonType.Equal, 1); // Player is alive
    IfEventFlag(AND_04, ON, TargetEventFlagType.EventFlag, X4_4); // Summon is dismissed
    IfEventFlag(AND_05, ON, TargetEventFlagType.EventFlag, X0_4); // Summon is active
    
    // Check if player is not near summon or summon is dismissed
    IfConditionGroup(OR_04, PASS, AND_03);
    IfConditionGroup(OR_04, PASS, AND_04);
    
    // Check if previous check is valid or summon is active
    IfConditionGroup(AND_06, PASS, OR_04);
    IfConditionGroup(AND_06, PASS, AND_05);
    IfConditionGroup(MAIN, PASS, AND_06);
    
    IfEventFlag(AND_07, ON, TargetEventFlagType.EventFlag, X4_4); // Check if summon dismissed
    
    EndIfConditionGroupStateUncompiled(EventEndType.End, PASS, AND_07); // Uncompiled means this function continues even if this condition check fails
    
    // Adjust AI of summon and restart
    RequestCharacterAICommand(X8_4, -1, 0);
    RequestCharacterAIReplan(X8_4);
    WaitFixedTimeFrames(1);
    EndUnconditionally(EventEndType.Restart);
});

//-------------------------------------------
// Summon - Handle Character State 1
// <summon flag>, <dismiss flag>, <boss flag>, <entity>
//-------------------------------------------
Event(20005720, Default, function(X0_4, X4_4, X8_4, X12_4) {
    // Disable summon
    ChangeCharacterEnableState(X12_4, Disabled);
    SetCharacterAnimationState(X12_4, Disabled);
    SetCharacterAIState(X12_4, Disabled);
    
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X4_4); // Summon is dismissed
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X8_4); // Boss is defeated
    
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X0_4);  // Check if summon has been summoned
    IfConditionGroup(MAIN, PASS, OR_01);
    
    // Enable summon
    ChangeCharacterEnableState(X12_4, Enabled);
    SetCharacterAnimationState(X12_4, Enabled);
    SetCharacterAIState(X12_4, Enabled);
    SetCharacterDefaultBackreadState(X12_4, Enabled);
    
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X4_4); // Check if summon has been dismissed
    SetCharacterDefaultBackreadState(X12_4, Disabled);
});

//-------------------------------------------
// Summon - Handle Character State 2
// <summon flag>, <dismiss flag>, <boss flag>, <entity>
//-------------------------------------------
Event(20005721, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    // Disable summon
    ChangeCharacterEnableState(X12_4, Disabled);
    SetCharacterAnimationState(X12_4, Disabled);
    SetCharacterAIState(X12_4, Disabled);
    
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X8_4); // Summon is dismissed

    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X0_4); // Check if summon has been summoned
    IfConditionGroup(MAIN, PASS, OR_01);
    
    // Enable summon
    ChangeCharacterEnableState(X12_4, Enabled);
    SetCharacterAnimationState(X12_4, Enabled);
    SetCharacterAIState(X12_4, Enabled);
    SetCharacterDefaultBackreadState(X12_4, Enabled);
    
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X4_4); // Check if summon has been dismissed
    SetCharacterDefaultBackreadState(X12_4, Disabled);
});


//-------------------------------------------
// Summon - Warp to Player on Boss Start
// <summon flag>, <dismiss flag>, <boss flag>, <entity>, <progress flag>
//-------------------------------------------
Event(20005730, Default, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X4_4); // Summon is dismissed
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X8_4); // Boss is killed
    
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X0_4);  // Check if summon has been summoned
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X16_4);  // Check if boss fight has started
    IfConditionGroup(MAIN, PASS, AND_01);
    
    WaitFixedTimeSeconds(2.0);
    
    WarpCharacterAndCopyFloor(X12_4, TargetEntityType.Character, 10000, 271, 10000);
});

//-------------------------------------------
// Invader - Vanilla - Setup
// <boss flag>, <defeated flag>, <summon flag>, <dismissal flag>, 
// <entity id>, <spawnpoint id>, <region id>, <invasion delay>, <conditional flag>
//-------------------------------------------
Event(20005750, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4, X32_4) {
    SetNetworkSyncState(Disabled);
    
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4); // Boss defeated
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X4_4); // Is summoned
    
    // Conditional flag check
    SkipIfComparison(1, ComparisonType.Equal, X32_4, 0);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X32_4);
    
    IfPlayerIsNotInOwnWorldExcludesArena(AND_01, false);
    IfEventFlag(AND_01, OFF, TargetEventFlagType.EventFlag, X4_4); // Not defeated
    IfEventFlag(AND_01, OFF, TargetEventFlagType.EventFlag, X8_4); // Not summoned
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X24_4, 1); // In region
    IfCharacterHasSpeffect(AND_01, 10000, 490, true, ComparisonType.Equal, 1); // Embered
    IfConditionGroup(MAIN, PASS, AND_01);
    
    WaitFixedTimeSeconds(X28_4);
    
    PlaceNPCSummonSign(SummonSignType.BlackSign, X16_4, X20_4, X8_4, X12_4);
    
    WaitFixedTimeSeconds(1);
    
    EndUnconditionally(EventEndType.Restart);
});

Event(20005751, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4, X32_4) {
    SetNetworkSyncState(Disabled);
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X4_4);
    SkipIfComparison(1, ComparisonType.Equal, X32_4, 0);
    IfEventFlag(AND_01, OFF, TargetEventFlagType.EventFlag, X32_4);
    IfPlayerIsNotInOwnWorldExcludesArena(AND_01, false);
    IfEventFlag(AND_01, OFF, TargetEventFlagType.EventFlag, X4_4);
    IfEventFlag(AND_01, OFF, TargetEventFlagType.EventFlag, X8_4);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X24_4, 1);
    IfCharacterHasSpeffect(AND_01, 10000, 490, true, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, PASS, AND_01);
    WaitFixedTimeSeconds(X28_4);
    PlaceNPCSummonSign(SummonSignType.BlackSign, X16_4, X20_4, X8_4, X12_4);
    WaitFixedTimeSeconds(1);
    EndUnconditionally(EventEndType.Restart);
});

Event(20005752, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4, X32_4, X36_4, X40_4, X44_4) {
    SetNetworkSyncState(Disabled);
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X4_4);
    SkipIfComparison(1, ComparisonType.Equal, X32_4, 0);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X32_4);
    IfPlayerIsNotInOwnWorldExcludesArena(AND_01, false);
    IfEventFlag(AND_01, OFF, TargetEventFlagType.EventFlag, X4_4);
    IfEventFlag(AND_01, OFF, TargetEventFlagType.EventFlag, X8_4);
    IfInoutsideArea(OR_01, InsideOutsideState.Inside, 10000, X24_4, 1);
    SkipIfComparison(1, ComparisonType.Equal, 0, X36_4);
    IfInoutsideArea(OR_01, InsideOutsideState.Inside, 10000, X36_4, 1);
    SkipIfComparison(1, ComparisonType.Equal, 0, X40_4);
    IfInoutsideArea(OR_01, InsideOutsideState.Inside, 10000, X40_4, 1);
    SkipIfComparison(1, ComparisonType.Equal, 0, X44_4);
    IfInoutsideArea(OR_01, InsideOutsideState.Inside, 10000, X44_4, 1);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfConditionGroup(MAIN, PASS, AND_01);
    WaitFixedTimeSeconds(X28_4);
    PlaceNPCSummonSignWorksForNonemberedPlayers(SummonSignType.BlackSign, X16_4, X20_4, X8_4, X12_4);
    WaitFixedTimeSeconds(1);
    EndUnconditionally(EventEndType.Restart);
});

//-------------------------------------------
// Invader - Death
// <defeated flag>, <summon flag>, <dismissal flag>, <entity id>
//-------------------------------------------
Event(20005760, Default, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X4_4);
    IfEventFlag(OR_01, OFF, TargetEventFlagType.EventFlag, X8_4);
    IfCharacterDeadalive(AND_01, X12_4, DeathState.Dead, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, PASS, AND_01);
    
    SetEventFlag(X0_4, ON);
});

// Handle Transition Fog Wall
Event(20005780, Default, function(X0_4, X4_4) {
    SetNetworkSyncState(Disabled);
    DeactivateObject(X0_4, Disabled);
    DeleteObjectfollowingSFX(X0_4, true);
    IfMultiplayerState(OR_01, MultiplayerState.TryingtoJoinSession);
    IfMultiplayerState(OR_01, MultiplayerState.TryingtoCreateSession);
    IfConditionGroup(MAIN, PASS, OR_01);
    DeactivateObject(X0_4, Enabled);
    CreateObjectfollowingSFX(X0_4, 101, X4_4);
    IfMultiplayerState(OR_02, MultiplayerState.TryingtoJoinSession);
    IfMultiplayerState(OR_02, MultiplayerState.TryingtoCreateSession);
    IfConditionGroup(MAIN, FAIL, OR_02);
    EndUnconditionally(EventEndType.Restart);
});

Event(20005781, Restart, function(X0_4, X4_4, X8_4) {
    SetNetworkSyncState(Disabled);
    DeactivateObject(X0_4, Disabled);
    DeleteObjectfollowingSFX(X0_4, true);
    IfMultiplayerState(OR_01, MultiplayerState.TryingtoJoinSession);
    IfMultiplayerState(OR_01, MultiplayerState.TryingtoCreateSession);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X8_4);
    IfConditionGroup(MAIN, PASS, OR_01);
    DeactivateObject(X0_4, Enabled);
    CreateObjectfollowingSFX(X0_4, 101, X4_4);
    IfEventFlag(AND_01, OFF, TargetEventFlagType.EventFlag, X8_4);
    IfMultiplayerState(OR_02, MultiplayerState.TryingtoJoinSession);
    IfMultiplayerState(OR_02, MultiplayerState.TryingtoCreateSession);
    IfConditionGroup(AND_01, FAIL, OR_02);
    IfConditionGroup(MAIN, PASS, AND_01);
    EndUnconditionally(EventEndType.Restart);
});

// ----------------------------------------
// Boss - Enter Boss Room 
// Args: <boss_defeat_flag_id>, <fogwall_id>, <entrance_trigger_id>, <started_flag_id>, <action_id>, <boss_entity_id>, 
// <skip_flag_id>, <entrance_trigger_id>
// ----------------------------------------
Event(20005800, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4) {
    var flag_Boss_Defeated   = X0_4;
    var flag_Boss_InBattle   = X12_4;
    var flag_Boss_Skip       = X24_4;
    
    var obj_Fogwall          = X4_4;
    
    var trigger_FogwallZone  = X8_4;
    var trigger_EntranceZone = X28_4;
    
    var param_ActionButton   = X16_4;
    var entity_Boss          = X20_4;
    
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, flag_Boss_Defeated);
    
    GotoIfComparison(Label.LABEL0, ComparisonType.Equal, flag_Boss_Skip, 0);
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, flag_Boss_Skip);
    
    SkipIfComparison(1, ComparisonType.Equal, trigger_EntranceZone, 0);
    IfInoutsideArea(OR_01, InsideOutsideState.Inside, 10000, trigger_EntranceZone, 1);
    
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, flag_Boss_Skip);
    IfConditionGroup(AND_01, PASS, OR_01); 
    IfPlayerIsNotInOwnWorldExcludesArena(AND_01, false);
    IfConditionGroup(MAIN, PASS, AND_01);
    
    GotoUnconditionally(Label.LABEL1);
    
    // Host entrance
    Label0();
    GotoIfPlayerIsNotInOwnWorldExcludesArena(Label.LABEL3, true);
    IfPlayerIsNotInOwnWorldExcludesArena(AND_01, false);
    IfEventFlag(AND_01, OFF, TargetEventFlagType.EventFlag, flag_Boss_Defeated);
    IfActionButtonInArea(AND_01, param_ActionButton, obj_Fogwall);
    IfConditionGroup(MAIN, PASS, AND_01);
    GotoIfPlayerIsNotInOwnWorldExcludesArena(Label.LABEL2, true);
    RotateCharacter(10000, trigger_FogwallZone, 60060, true);
    
    // Client entrance
    Label3();
    GotoIfEventFlag(Label.LABEL1, ON, TargetEventFlagType.EventFlag, flag_Boss_InBattle);
    IfPlayerIsNotInOwnWorldExcludesArena(AND_02, false);
    IfEventFlag(AND_02, OFF, TargetEventFlagType.EventFlag, flag_Boss_Defeated);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, trigger_FogwallZone, 1);
    IfElapsedSeconds(OR_03, 3);
    IfConditionGroup(OR_02, PASS, OR_03);
    IfConditionGroup(AND_02, PASS, OR_02);
    IfConditionGroup(MAIN, PASS, AND_02);
    EndIfConditionGroupStateCompiled(EventEndType.Restart, PASS, OR_03);
    
    // Boss start
    Label1();
    GotoIfPlayerIsNotInOwnWorldExcludesArena(Label.LABEL2, true);
    IssueBossRoomEntryNotification(0);
    SetNetworkUpdateAuthority(entity_Boss, AuthorityLevel.Forced);
    
    Label2();
    ActivateMultiplayerdependantBuffs(entity_Boss);
    SetNetworkconnectedEventFlag(flag_Boss_InBattle, ON);
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    EndUnconditionally(EventEndType.Restart);
});

// ----------------------------------------
// Client - Enter Boss Room
// ----------------------------------------
Event(20005801, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4) {
    var flag_Boss_Defeated = X0_4;
    var flag_Boss_InBattle = X12_4;
    var flag_ClientEnter   = X20_4;
    
    var obj_Fogwall          = X4_4;
    
    var trigger_FogwallZone = X8_4;
    
    var param_ActionButton = X16_4;
    
    SetNetworkSyncState(Disabled);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, flag_Boss_Defeated);
    
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    SetEventFlag(flag_Boss_InBattle, OFF);
    
    IfEventFlag(AND_01, OFF, TargetEventFlagType.EventFlag, flag_Boss_Defeated);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, flag_Boss_InBattle);
    IfCharacterType(AND_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfActionButtonInArea(AND_01, param_ActionButton, obj_Fogwall);
    IfConditionGroup(MAIN, PASS, AND_01);
    
    RotateCharacter(10000, trigger_FogwallZone, 60060, true);
    
    IfCharacterType(AND_02, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, trigger_FogwallZone, 1);
    IfElapsedSeconds(OR_01, 3);
    IfConditionGroup(OR_02, PASS, OR_01);
    IfConditionGroup(AND_02, PASS, OR_02);
    IfConditionGroup(MAIN, PASS, AND_02);
    
    EndIfConditionGroupStateCompiled(EventEndType.Restart, PASS, OR_01);
    
    SetEventFlag(flag_ClientEnter, ON);
    EndUnconditionally(EventEndType.Restart);
});

// ----------------------------------------
// ???
// ----------------------------------------
Event(20005802, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4) {
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X4_4);
    IfEventFlag(AND_01, OFF, TargetEventFlagType.EventFlag, X0_4);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X8_4, 1);
    IfConditionGroup(MAIN, PASS, AND_01);
    Label0();
    GotoIfPlayerIsNotInOwnWorldExcludesArena(Label.LABEL1, true);
    IssueBossRoomEntryNotification(0);
    Label1();
    ActivateMultiplayerdependantBuffs(X12_4);
    SkipIfComparison(1, ComparisonType.Equal, X16_4, 0);
    ActivateMultiplayerdependantBuffs(X16_4);
    SkipIfComparison(1, ComparisonType.Equal, X20_4, 0);
    ActivateMultiplayerdependantBuffs(X20_4);
    SkipIfComparison(1, ComparisonType.Equal, X24_4, 0);
    ActivateMultiplayerdependantBuffs(X24_4);
    SetEventFlag(X4_4, ON);
});

// ----------------------------------------
// Boss - Enter Boss Zone
// Args: <boss_defeat_flag_id>, <zone_id>, <entrance_trigger_id>, <started_flag_id>, <action_id>, <boss_entity_id>, 
// <skip_flag_id>, <entrance_trigger_id>
// ----------------------------------------
Event(20005805, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4) {
    var flag_Boss_Defeated   = X0_4;
    var flag_Boss_InBattle   = X12_4;
    var flag_Boss_Skip       = X24_4;
    
    var trigger_StartZone = X4_4;
    
    var trigger_FogwallZone  = X8_4;
    var trigger_EntranceZone = X28_4;
    
    var param_ActionButton   = X16_4;
    var entity_Boss          = X20_4;
    
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, flag_Boss_Defeated);
    
    GotoIfComparison(Label.LABEL0, ComparisonType.Equal, flag_Boss_Skip, 0);
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, flag_Boss_Skip);
    
    SkipIfComparison(1, ComparisonType.Equal, trigger_EntranceZone, 0);
    IfInoutsideArea(OR_01, InsideOutsideState.Inside, 10000, trigger_EntranceZone, 1);
    
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, flag_Boss_Skip);
    IfConditionGroup(AND_01, PASS, OR_01); 
    IfPlayerIsNotInOwnWorldExcludesArena(AND_01, false);
    IfConditionGroup(MAIN, PASS, AND_01);
    
    GotoUnconditionally(Label.LABEL1);
    
    // Host entrance
    Label0();
    GotoIfPlayerIsNotInOwnWorldExcludesArena(Label.LABEL3, true);
    IfPlayerIsNotInOwnWorldExcludesArena(AND_01, false);
    IfEventFlag(AND_01, OFF, TargetEventFlagType.EventFlag, flag_Boss_Defeated);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, trigger_StartZone, 1);
    IfConditionGroup(MAIN, PASS, AND_01);
    GotoIfPlayerIsNotInOwnWorldExcludesArena(Label.LABEL2, true);
    
    // Client entrance
    Label3();
    GotoIfEventFlag(Label.LABEL1, ON, TargetEventFlagType.EventFlag, flag_Boss_InBattle);
    IfPlayerIsNotInOwnWorldExcludesArena(AND_02, false);
    IfEventFlag(AND_02, OFF, TargetEventFlagType.EventFlag, flag_Boss_Defeated);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, trigger_FogwallZone, 1);
    IfElapsedSeconds(OR_03, 3);
    IfConditionGroup(OR_02, PASS, OR_03);
    IfConditionGroup(AND_02, PASS, OR_02);
    IfConditionGroup(MAIN, PASS, AND_02);
    EndIfConditionGroupStateCompiled(EventEndType.End, PASS, OR_03);
    
    // Boss start
    Label1();
    GotoIfPlayerIsNotInOwnWorldExcludesArena(Label.LABEL2, true);
    IssueBossRoomEntryNotification(0);
    SetNetworkUpdateAuthority(entity_Boss, AuthorityLevel.Forced);
    
    Label2();
    ActivateMultiplayerdependantBuffs(entity_Boss);
    SetNetworkconnectedEventFlag(flag_Boss_InBattle, ON);
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    EndUnconditionally(EventEndType.End);
});

// ----------------------------------------
// Client - Enter Boss Zone
// ----------------------------------------
Event(20005806, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4) {
    var flag_Boss_Defeated = X0_4;
    var flag_Boss_InBattle = X12_4;
    var flag_ClientEnter   = X20_4;
    
    var trigger_StartZone = X4_4;
    
    var trigger_FogwallZone = X8_4;
    
    var param_ActionButton = X16_4;
    
    SetNetworkSyncState(Disabled);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, flag_Boss_Defeated);
    
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    SetEventFlag(flag_Boss_InBattle, OFF);
    
    IfEventFlag(AND_01, OFF, TargetEventFlagType.EventFlag, flag_Boss_Defeated);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, flag_Boss_InBattle);
    IfCharacterType(AND_01, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, trigger_StartZone, 1);
    IfConditionGroup(MAIN, PASS, AND_01);
    
    RotateCharacter(10000, trigger_FogwallZone, 60060, true);
    
    IfCharacterType(AND_02, 10000, TargetType.WhitePhantom, ComparisonType.Equal, 1);
    IfInoutsideArea(OR_02, InsideOutsideState.Inside, 10000, trigger_FogwallZone, 1);
    IfElapsedSeconds(OR_01, 3);
    IfConditionGroup(OR_02, PASS, OR_01);
    IfConditionGroup(AND_02, PASS, OR_02);
    IfConditionGroup(MAIN, PASS, AND_02);
    
    EndIfConditionGroupStateCompiled(EventEndType.Restart, PASS, OR_01);
    
    SetEventFlag(flag_ClientEnter, ON);
    EndUnconditionally(EventEndType.End);
});

// ----------------------------------------
// Boss - Enter Fogwall
// ----------------------------------------
Event(20005810, Default, function(X0_4, X4_4, X8_4, X12_4) {
    var flag_Boss_Defeated  = X0_4;
    
    var obj_Fogwall         = X4_4;
    
    var trigger_FogwallZone = X8_4;
    
    var param_ActionButton = X12_4;
    
    SetNetworkSyncState(Disabled);
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    IfPlayerIsNotInOwnWorldExcludesArena(AND_01, false);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, flag_Boss_Defeated);
    IfMultiplayerState(OR_01, MultiplayerState.TryingtoCreateSession);
    IfMultiplayerState(OR_01, MultiplayerState.TryingtoJoinSession);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfActionButtonInArea(AND_01, param_ActionButton, obj_Fogwall);
    IfConditionGroup(MAIN, PASS, AND_01);
    RotateCharacter(10000, trigger_FogwallZone, 60060, true);
    SendAllPhantomsHome(0);
    EndUnconditionally(EventEndType.Restart);
});

// ----------------------------------------
// Boss - Toggle Fogwall State
// Args: <boss_flag_id>, <fogwall_id>, <ffx_id>, <flag_id>
// ----------------------------------------
Event(20005820, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    SetNetworkSyncState(Disabled);
    DeactivateObject(X4_4, Disabled);
    DeleteObjectfollowingSFX(X4_4, true);
    
    IfPlayerIsNotInOwnWorldExcludesArena(OR_01, true);
    IfEventFlag(OR_02, ON, TargetEventFlagType.EventFlag, X12_4);
    IfParameterComparison(OR_02, ComparisonType.Equal, X12_4, 0);
    IfConditionGroup(AND_01, PASS, OR_02);
    IfEventFlag(AND_01, OFF, TargetEventFlagType.EventFlag, X0_4);
    IfMultiplayerState(OR_03, MultiplayerState.TryingtoCreateSession);
    IfMultiplayerState(OR_03, MultiplayerState.TryingtoJoinSession);
    IfConditionGroup(AND_02, PASS, OR_03);
    IfEventFlag(AND_02, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(OR_04, PASS, OR_01);
    IfConditionGroup(OR_04, PASS, AND_01);
    IfConditionGroup(OR_04, PASS, AND_02);
    IfConditionGroup(MAIN, PASS, OR_04);
    
    DeactivateObject(X4_4, Enabled);
    DeleteObjectfollowingSFX(X4_4, true);
    CreateObjectfollowingSFX(X4_4, 101, X8_4);
    
    IfPlayerIsNotInOwnWorldExcludesArena(OR_05, true);
    IfEventFlag(OR_06, ON, TargetEventFlagType.EventFlag, X12_4);
    IfParameterComparison(OR_06, ComparisonType.Equal, X12_4, 0);
    IfConditionGroup(AND_03, PASS, OR_06);
    IfEventFlag(AND_03, OFF, TargetEventFlagType.EventFlag, X0_4);
    IfMultiplayerState(OR_07, MultiplayerState.TryingtoCreateSession);
    IfMultiplayerState(OR_07, MultiplayerState.TryingtoJoinSession);
    IfConditionGroup(AND_04, PASS, OR_07);
    IfEventFlag(AND_04, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(AND_05, FAIL, OR_05);
    IfConditionGroup(AND_05, FAIL, AND_03);
    IfConditionGroup(AND_05, FAIL, AND_04);
    IfConditionGroup(MAIN, PASS, AND_05);
    
    EndUnconditionally(EventEndType.Restart);
});

// ----------------------------------------
// ???
// ----------------------------------------
Event(20005821, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    ChangeCharacterEnableState(X8_4, Disabled);
    DeactivateObject(X12_4, Disabled);
    WaitFixedTimeSeconds(1);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X0_4);
    ChangeCharacterEnableState(X8_4, Enabled);
    DeactivateObject(X12_4, Enabled);
    RegisterBonfire(X4_4, X12_4, 5, 180, 0);
});

// ----------------------------------------
// Boss - Toggle Fogwall State
// Args: <boss_flag_id>, <fogwall_id>, <ffx_id>
// ----------------------------------------
Event(20005822, Restart, function(X0_4, X4_4, X8_4) {
    SetNetworkSyncState(Disabled);
    DeactivateObject(X4_4, Disabled);
    DeleteObjectfollowingSFX(X4_4, true);
    
    IfPlayerIsNotInOwnWorldExcludesArena(OR_01, true);
    IfEventFlag(AND_01, OFF, TargetEventFlagType.EventFlag, X0_4);
    IfMultiplayerState(OR_03, MultiplayerState.TryingtoCreateSession);
    IfMultiplayerState(OR_03, MultiplayerState.TryingtoJoinSession);
    IfConditionGroup(AND_02, PASS, OR_03);
    IfEventFlag(AND_02, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(OR_04, PASS, OR_01);
    IfConditionGroup(OR_04, PASS, AND_01);
    IfConditionGroup(OR_04, PASS, AND_02);
    IfConditionGroup(MAIN, PASS, OR_04);
    
    DeactivateObject(X4_4, Enabled);
    DeleteObjectfollowingSFX(X4_4, true);
    CreateObjectfollowingSFX(X4_4, 101, X8_4);
    
    IfPlayerIsNotInOwnWorldExcludesArena(OR_05, true);
    IfEventFlag(AND_03, OFF, TargetEventFlagType.EventFlag, X0_4);
    IfMultiplayerState(OR_07, MultiplayerState.TryingtoCreateSession);
    IfMultiplayerState(OR_07, MultiplayerState.TryingtoJoinSession);
    IfConditionGroup(AND_04, PASS, OR_07);
    IfEventFlag(AND_04, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(AND_05, FAIL, OR_05);
    IfConditionGroup(AND_05, FAIL, AND_03);
    IfConditionGroup(AND_05, FAIL, AND_04);
    IfConditionGroup(MAIN, PASS, AND_05);

    EndUnconditionally(EventEndType.Restart);
});

// ----------------------------------------
// Boss - Toggle Fogwall State - zone
// Args: <boss_flag_id>, <fogwall_id>, <ffx_id>
// ----------------------------------------
Event(20005823, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    SetNetworkSyncState(Disabled);
    DeactivateObject(X4_4, Disabled);
    DeleteObjectfollowingSFX(X4_4, true);

    IfEventFlag(AND_01, OFF, TargetEventFlagType.EventFlag, X0_4);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X12_4, 1);
    IfConditionGroup(MAIN, PASS, AND_01);
    
    DeactivateObject(X4_4, Enabled);
    DeleteObjectfollowingSFX(X4_4, true);
    CreateObjectfollowingSFX(X4_4, 101, X8_4);
    
    IfPlayerIsNotInOwnWorldExcludesArena(OR_05, true);
    IfEventFlag(AND_03, OFF, TargetEventFlagType.EventFlag, X0_4);
    IfMultiplayerState(OR_07, MultiplayerState.TryingtoCreateSession);
    IfMultiplayerState(OR_07, MultiplayerState.TryingtoJoinSession);
    IfConditionGroup(AND_04, PASS, OR_07);
    IfEventFlag(AND_04, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(AND_05, FAIL, OR_05);
    IfConditionGroup(AND_05, FAIL, AND_03);
    IfConditionGroup(AND_05, FAIL, AND_04);
    IfConditionGroup(MAIN, PASS, AND_05);

    EndUnconditionally(EventEndType.Restart);
});

// ----------------------------------------
// ???
// ----------------------------------------
Event(20005825, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    SetNetworkSyncState(Disabled);
    DeactivateObject(X4_4, Disabled);
    DeleteObjectfollowingSFX(X4_4, true);
    IfPlayerIsNotInOwnWorldExcludesArena(OR_01, true);
    IfEventFlag(OR_02, ON, TargetEventFlagType.EventFlag, X12_4);
    IfParameterComparison(OR_02, ComparisonType.Equal, X12_4, 0);
    IfConditionGroup(AND_01, PASS, OR_02);
    IfEventFlag(AND_01, OFF, TargetEventFlagType.EventFlag, X0_4);
    IfMultiplayerState(OR_03, MultiplayerState.TryingtoCreateSession);
    IfMultiplayerState(OR_03, MultiplayerState.TryingtoJoinSession);
    IfConditionGroup(AND_02, PASS, OR_03);
    IfEventFlag(AND_02, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(OR_04, PASS, OR_01);
    IfConditionGroup(OR_04, PASS, AND_01);
    IfConditionGroup(OR_04, PASS, AND_02);
    IfConditionGroup(MAIN, PASS, OR_04);
    DeactivateObject(X4_4, Enabled);
    DeleteObjectfollowingSFX(X4_4, true);
    CreateObjectfollowingSFX(X4_4, X16_4, X8_4);
    IfPlayerIsNotInOwnWorldExcludesArena(OR_05, true);
    IfEventFlag(OR_06, ON, TargetEventFlagType.EventFlag, X12_4);
    IfParameterComparison(OR_06, ComparisonType.Equal, X12_4, 0);
    IfConditionGroup(AND_03, PASS, OR_06);
    IfEventFlag(AND_03, OFF, TargetEventFlagType.EventFlag, X0_4);
    IfMultiplayerState(OR_07, MultiplayerState.TryingtoCreateSession);
    IfMultiplayerState(OR_07, MultiplayerState.TryingtoJoinSession);
    IfConditionGroup(AND_04, PASS, OR_07);
    IfEventFlag(AND_04, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(AND_05, FAIL, OR_05);
    IfConditionGroup(AND_05, FAIL, AND_03);
    IfConditionGroup(AND_05, FAIL, AND_04);
    IfConditionGroup(MAIN, PASS, AND_05);
    EndUnconditionally(EventEndType.Restart);
});

// ----------------------------------------
// Boss - Sound State
// ----------------------------------------
Event(20005830, Default, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    SetNetworkSyncState(Disabled);
    SetMapSoundState(X16_4, Disabled);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X4_4);
    SkipIfNumberOfClientsOfType(1, ClientType.Coop, ComparisonType.Equal, 0);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X8_4);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X12_4, 1);
    IfConditionGroup(MAIN, PASS, AND_01);
    EnableBossMapSound(X16_4, Enabled);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X0_4);
    EnableBossMapSound(-1, Disabled);
});

// ----------------------------------------
// Boss - Boss Sound State
// Args: <boss_flag_id>, <fogwall_id>, <flag_id>, <start_area_id>, <bgm_id>, <bgm_flag_id>, <flag>
// ----------------------------------------
Event(20005831, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4) {
    SetNetworkSyncState(Disabled);
    SetMapSoundState(X16_4, Disabled);
    SetMapSoundState(X20_4, Disabled);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X4_4);
    SkipIfNumberOfClientsOfType(1, ClientType.Coop, ComparisonType.Equal, 0);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X8_4);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X12_4, 1);
    IfConditionGroup(MAIN, PASS, AND_01);
    EnableBossMapSound(X16_4, Enabled);
    Unknown201007(X20_4);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X24_4);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(MAIN, PASS, OR_01);
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X0_4);
    EnableBossMapSound(X20_4, Enabled);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X0_4);
    Label0();
    EnableBossMapSound(-1, Disabled);
});

// ----------------------------------------
// Boss - Sound State
// ----------------------------------------
Event(20005832, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4) {
    SetNetworkSyncState(Disabled);
    SetMapSoundState(X16_4, Disabled);
    SetMapSoundState(X20_4, Disabled);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X4_4);
    SkipIfNumberOfClientsOfType(1, ClientType.Coop, ComparisonType.Equal, 0);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X8_4);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X12_4, 1);
    IfConditionGroup(MAIN, PASS, AND_01);
    EnableBossMapSound(X16_4, Enabled);
    Unknown201007(X20_4);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X24_4);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(MAIN, PASS, OR_01);
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X0_4);
    EnableBossMapSound(X20_4, Enabled);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X28_4);
    Label0();
    EnableBossMapSound(-1, Disabled);
});

// ----------------------------------------
// Boss - Sound State
// ----------------------------------------
Event(20005833, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4, X32_4) {
    SetNetworkSyncState(Disabled);
    SetMapSoundState(X16_4, Disabled);
    SetMapSoundState(X20_4, Disabled);
    SetMapSoundState(X24_4, Disabled);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X4_4);
    SkipIfNumberOfClientsOfType(1, ClientType.Coop, ComparisonType.Equal, 0);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X8_4);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X12_4, 1);
    IfConditionGroup(MAIN, PASS, AND_01);
    EnableBossMapSound(X16_4, Enabled);
    Unknown201007(X20_4);
    Unknown201007(X24_4);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X28_4);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X32_4);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(MAIN, PASS, OR_01);
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X0_4);
    GotoIfEventFlag(Label.LABEL1, ON, TargetEventFlagType.EventFlag, X32_4);
    EnableBossMapSound(X20_4, Enabled);
    IfEventFlag(OR_02, ON, TargetEventFlagType.EventFlag, X32_4);
    IfEventFlag(OR_02, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(MAIN, PASS, OR_02);
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X0_4);
    Label1();
    EnableBossMapSound(X24_4, Enabled);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X0_4);
    Label0();
    EnableBossMapSound(-1, Disabled);
});

// ----------------------------------------
// Boss - Sound - Basic
// ----------------------------------------
Event(20001834, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    var flag_BossDefeated = X0_4;
    var flag_BossInBattle = X4_4;
    var flag_BossStart    = X8_4;
    
    var sound_BossBGM = X12_4;
    
    SetNetworkSyncState(Disabled);
    SetMapSoundState(sound_BossBGM, Disabled);
    
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, flag_BossDefeated);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, flag_BossInBattle);
    
    SkipIfNumberOfClientsOfType(1, ClientType.Coop, ComparisonType.Equal, 0);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, flag_BossStart);
    
    IfConditionGroup(MAIN, PASS, AND_01);
    EnableBossMapSound(sound_BossBGM, Enabled);
    
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, flag_BossDefeated);
    EnableBossMapSound(-1, Disabled);
});

// ----------------------------------------
// Boss - Sound State
// ----------------------------------------
Event(20001835, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    SetNetworkSyncState(Disabled);
    SetMapSoundState(X16_4, Disabled);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X4_4);
    SkipIfNumberOfClientsOfType(1, ClientType.Coop, ComparisonType.Equal, 0);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X8_4);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X12_4);
    IfConditionGroup(MAIN, PASS, AND_01);
    EnableBossMapSound(X16_4, Enabled);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X0_4);
    EnableBossMapSound(-1, Disabled);
});

// ----------------------------------------
// Boss - Sound State
// ----------------------------------------
Event(20001836, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4) {
    SetNetworkSyncState(Disabled);
    
    SetMapSoundState(X16_4, Disabled);
    SetMapSoundState(X20_4, Disabled);
    
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X4_4);
    SkipIfNumberOfClientsOfType(1, ClientType.Coop, ComparisonType.Equal, 0);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X8_4);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X12_4);
    IfConditionGroup(MAIN, PASS, AND_01);
    
    EnableBossMapSound(X16_4, Enabled);
    Unknown201007(X20_4);
    
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X24_4);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(MAIN, PASS, OR_01);
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X0_4);
    
    EnableBossMapSound(X20_4, Enabled);
    
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X0_4);
    
    Label0();
    
    EnableBossMapSound(-1, Disabled);
});

// ----------------------------------------
// Boss - Sound State
// ----------------------------------------
Event(20001837, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4) {
    SetNetworkSyncState(Disabled);
    SetMapSoundState(X16_4, Disabled);
    SetMapSoundState(X20_4, Disabled);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X4_4);
    SkipIfNumberOfClientsOfType(1, ClientType.Coop, ComparisonType.Equal, 0);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X8_4);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X12_4);
    IfConditionGroup(MAIN, PASS, AND_01);
    EnableBossMapSound(X16_4, Enabled);
    Unknown201007(X20_4);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X24_4);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(MAIN, PASS, OR_01);
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X0_4);
    EnableBossMapSound(X20_4, Enabled);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X28_4);
    Label0();
    EnableBossMapSound(-1, Disabled);
});

// ----------------------------------------
// Boss - Sound State
// ----------------------------------------
Event(20001838, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4, X32_4) {
    SetNetworkSyncState(Disabled);
    SetMapSoundState(X16_4, Disabled);
    SetMapSoundState(X20_4, Disabled);
    SetMapSoundState(X24_4, Disabled);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X4_4);
    SkipIfNumberOfClientsOfType(1, ClientType.Coop, ComparisonType.Equal, 0);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X8_4);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X12_4);
    IfConditionGroup(MAIN, PASS, AND_01);
    EnableBossMapSound(X16_4, Enabled);
    Unknown201007(X20_4);
    Unknown201007(X24_4);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X28_4);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X32_4);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(MAIN, PASS, OR_01);
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X0_4);
    GotoIfEventFlag(Label.LABEL1, ON, TargetEventFlagType.EventFlag, X32_4);
    EnableBossMapSound(X20_4, Enabled);
    IfEventFlag(OR_02, ON, TargetEventFlagType.EventFlag, X32_4);
    IfEventFlag(OR_02, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(MAIN, PASS, OR_02);
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X0_4);
    Label1();
    EnableBossMapSound(X24_4, Enabled);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X0_4);
    Label0();
    EnableBossMapSound(-1, Disabled);
});

// ----------------------------------------
// ???
// ----------------------------------------
Event(20005837, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4) {
    SetNetworkSyncState(Disabled);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    SkipIfNumberOfClientsOfType(2, ClientType.Invader, ComparisonType.Equal, 0);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X20_4);
    SkipUnconditionally(1);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X24_4);
    ChangeCamera(-1, -1);
    IfEntityInoutsideRadiusOfEntity(OR_01, InsideOutsideState.Inside, X4_4, 10000, X8_4, 1);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(MAIN, PASS, OR_01);
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X0_4);
    ChangeCamera(X12_4, X16_4);
    WaitFixedTimeSeconds(0.5);
    IfEntityInoutsideRadiusOfEntity(OR_02, InsideOutsideState.Outside, X4_4, 10000, X8_4, 1);
    IfEventFlag(OR_02, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(MAIN, PASS, OR_02);
    Label0();
    ChangeCamera(-1, -1);
    WaitFixedTimeSeconds(0.5);
    EndUnconditionally(EventEndType.Restart);
});

// ----------------------------------------
// ???
// ----------------------------------------
Event(20005838, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4) {
    SetNetworkSyncState(Disabled);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    SkipIfNumberOfClientsOfType(2, ClientType.Invader, ComparisonType.Equal, 0);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X20_4);
    SkipUnconditionally(1);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X24_4);
    ChangeCamera(X12_4, X12_4);
    IfEntityInoutsideRadiusOfEntity(OR_01, InsideOutsideState.Inside, X4_4, 10000, X8_4, 1);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(MAIN, PASS, OR_01);
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X0_4);
    ChangeCamera(X16_4, X16_4);
    WaitFixedTimeSeconds(0.5);
    IfEntityInoutsideRadiusOfEntity(OR_02, InsideOutsideState.Outside, X4_4, 10000, X8_4, 1);
    IfEventFlag(OR_02, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(MAIN, PASS, OR_02);
    Label0();
    ChangeCamera(-1, -1);
    WaitFixedTimeSeconds(0.5);
    EndUnconditionally(EventEndType.Restart);
});

// ----------------------------------------
// ???
// ----------------------------------------
Event(20005839, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4) {
    SetNetworkSyncState(Disabled);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    SkipIfNumberOfClientsOfType(2, ClientType.Invader, ComparisonType.Equal, 0);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X20_4);
    SkipUnconditionally(1);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X24_4);
    ChangeCamera(X12_4, X12_4);
    IfInoutsideArea(AND_01, InsideOutsideState.Outside, 10000, X28_4, 1);
    IfConditionGroup(OR_01, PASS, AND_01);
    IfEntityInoutsideRadiusOfEntity(OR_01, InsideOutsideState.Inside, X4_4, 10000, X8_4, 1);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(MAIN, PASS, OR_01);
    GotoIfEventFlag(Label.LABEL0, ON, TargetEventFlagType.EventFlag, X0_4);
    GotoIfConditionGroupStateCompiled(Label.LABEL1, PASS, AND_01);
    ChangeCamera(X16_4, X16_4);
    WaitFixedTimeSeconds(0.5);
    IfInoutsideArea(AND_02, InsideOutsideState.Outside, 10000, X28_4, 1);
    IfConditionGroup(OR_02, PASS, AND_02);
    IfEntityInoutsideRadiusOfEntity(OR_02, InsideOutsideState.Outside, X4_4, 10000, X8_4, 1);
    IfEventFlag(OR_02, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(MAIN, PASS, OR_02);
    GotoIfConditionGroupStateCompiled(Label.LABEL1, PASS, AND_02);
    Label0();
    ChangeCamera(-1, -1);
    WaitFixedTimeSeconds(0.5);
    EndUnconditionally(EventEndType.Restart);
    Label1();
    ChangeCamera(-1, -1);
    WaitFixedTimeSeconds(0.5);
    IfInoutsideArea(OR_03, InsideOutsideState.Inside, 10000, X28_4, 1);
    IfEventFlag(OR_03, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(MAIN, PASS, OR_03);
    EndUnconditionally(EventEndType.Restart);
});

// Handle Fog Wall for Player
Event(20005840, Restart, function(X0_4) {
    IfCharacterType(AND_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfEntityInoutsideRadiusOfEntity(AND_01, InsideOutsideState.Inside, 10000, X0_4, 5, 1);
    IfConditionGroup(MAIN, PASS, AND_01);
    Unknown200459(10000, Disabled);
    WaitFixedTimeSeconds(1);
    EndUnconditionally(EventEndType.Restart);
});

// Handle Fog Wall for Client Player
Event(20005841, Restart, function(X0_4) {
    IfCharacterType(AND_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfEntityInoutsideRadiusOfEntity(AND_01, InsideOutsideState.Outside, 10000, X0_4, 5, 1);
    IfEntityInoutsideRadiusOfEntity(AND_01, InsideOutsideState.Inside, 10000, X0_4, 8, 1);
    IfConditionGroup(MAIN, PASS, AND_01);
    Unknown200459(10000, Enabled);
    WaitFixedTimeSeconds(1);
    EndUnconditionally(EventEndType.Restart);
});

// Set Flag based on Flag
Event(20005900, Restart, function(X0_4, X4_4) {
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X0_4);
    SetEventFlag(X4_4, ON);
});

Event(20005060, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4, X32_4) {
    SetNetworkSyncState(Disabled);
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    SetEventFlag(X4_4, OFF);
    SetEventFlag(X12_4, OFF);
    DeleteObjectfollowingSFX(X28_4, true);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X8_4);
    IfPlayerIsNotInOwnWorldExcludesArena(AND_01, false);
    IfMultiplayerState(OR_01, MultiplayerState.TryingtoJoinSession);
    IfMultiplayerState(OR_01, MultiplayerState.TryingtoCreateSession);
    IfConditionGroup(AND_01, FAIL, OR_01);
    IfConditionGroup(MAIN, PASS, AND_01);
    CreateObjectfollowingSFX(X28_4, 0, X32_4);
    IfMultiplayerState(OR_02, MultiplayerState.TryingtoJoinSession);
    IfMultiplayerState(OR_02, MultiplayerState.TryingtoCreateSession);
    IfConditionGroup(OR_03, PASS, OR_02);
    IfActionButtonInArea(OR_03, X24_4, X28_4);
    IfConditionGroup(MAIN, PASS, OR_03);
    EndIfConditionGroupStateCompiled(EventEndType.Restart, PASS, OR_02);
    DisplayGenericDialogAndSetEventFlags(X20_4, PromptType.YESNO, NumberofOptions.TwoButtons, X28_4, 2, X12_4, X16_4, X16_4);
    EndIfEventFlag(EventEndType.Restart, OFF, TargetEventFlagType.EventFlag, X12_4);
    SetEventFlag(X4_4, ON);
    SetSpeffect(10000, 15);
    WaitFixedTimeSeconds(20);
    EndUnconditionally(EventEndType.Restart);
});

Event(20005061, Restart, function(X0_4, X4_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    IfCharacterDeadalive(MAIN, X4_4, DeathState.Dead, ComparisonType.Equal, 1);
    SetEventFlag(X0_4, ON);
    HandleBossDefeatAndDisplayBanner(X4_4, TextBannerType.DutyFulfilled);
});

Event(20005062, Restart, function(X0_4, X4_4) {
    SetNetworkSyncState(Disabled);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X4_4);
    EndIfEventFlag(EventEndType.End, OFF, TargetEventFlagType.EventFlag, X0_4);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X0_4);
    SetEventFlag(X4_4, ON);
});

// Hollow Arena - Setup
Event(20005920, Restart, function(X0_1, X4_4, X8_4, X12_4) {
    SetAreaWelcomeMessageState(Disabled);
    IfPlayerIsNotInOwnWorldExcludesArena(AND_01, false);
    IfHollowArenaMatchReadyState(AND_01, true);
    IfConditionGroup(MAIN, PASS, AND_01);
    WaitFixedTimeSeconds(5);
    DisplayHollowArenaPvpMessage(X8_4, 1, Enabled);
    DisplayBanner(TextBannerType.BeginMatch);
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    WaitHollowArenaHalfTimeStayparamLookup(X0_1, false);
    IfPlayerIsNotInOwnWorldExcludesArena(AND_02, false);
    IfEventFlag(AND_02, OFF, TargetEventFlagType.EventFlag, X4_4);
    IfConditionGroup(MAIN, PASS, AND_02);
    DisplayHollowArenaPvpMessage(X12_4, 2, Enabled);
    SetSpeffect(10000, 1420060);
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    WaitHollowArenaHalfTimeStayparamLookup(X0_1, true);
    IfPlayerIsNotInOwnWorldExcludesArena(MAIN, false);
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    SetNetworkconnectedEventFlag(X4_4, ON);
});

// Hollow Arena - Duel
Event(20005930, Restart, function(X0_4) {
    IfHollowArenaSoloScoreComparison(OR_01, ComparisonType.Equal, 0);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(MAIN, PASS, OR_01);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    SetNetworkconnectedEventFlag(X0_4, ON);
});

// Hollow Arena - Cleanup
Event(20005940, Restart, function(X0_4) {
    SetNetworkSyncState(Disabled);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X0_4);
    SetCharacterInvincibility(10000, Enabled);
    DisplayHollowArenaPvpMessage(10020020, 0, Enabled);
    WaitFixedTimeFrames(1);
    WaitFixedTimeSeconds(5);
    Unknown200379(0);
    GotoIfHollowArenaMatchType(Label.LABEL9, HollowArenaMatchType.TwoVersusThree);
    GotoIfHollowArenaMatchType(Label.LABEL9, HollowArenaMatchType.ThreeVersusThree);
    IfHollowArenaSoloResults(OR_01, HollowArenaResult.Win);
    IfHollowArenaSoloResults(OR_02, HollowArenaResult.Draw);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, OR_01);
    GotoIfConditionGroupStateUncompiled(Label.LABEL1, PASS, OR_02);
    GotoUnconditionally(Label.LABEL2);
    Label9();
    IfHollowArenaTeamResults(OR_01, HollowArenaResult.Win);
    IfHollowArenaTeamResults(OR_02, HollowArenaResult.Draw);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, OR_01);
    GotoIfConditionGroupStateUncompiled(Label.LABEL1, PASS, OR_02);
    GotoUnconditionally(Label.LABEL2);
    Label0();
    DisplayBanner(TextBannerType.HollowArenaWin);
    SetSpeffect(10000, 1420040);
    WaitFixedTimeSeconds(5);
    DisplayHollowArenaPvpMessage(10020030, 0, Enabled);
    WaitFixedTimeSeconds(0.5);
    SendAllPhantomsHomeAndUpdateServerPvpStats(0);
    EndUnconditionally(EventEndType.End);
    Label1();
    DisplayBanner(TextBannerType.HollowArenaDraw);
    SetSpeffect(10000, 1420050);
    WaitFixedTimeSeconds(5);
    DisplayHollowArenaPvpMessage(10020031, 0, Enabled);
    WaitFixedTimeSeconds(0.5);
    SendAllPhantomsHomeAndUpdateServerPvpStats(0);
    EndUnconditionally(EventEndType.End);
    Label2();
    DisplayBanner(TextBannerType.HollowArenaLoss);
    WaitFixedTimeSeconds(5);
    DisplayHollowArenaPvpMessage(10020032, 0, Enabled);
    WaitFixedTimeSeconds(0.5);
    SendAllPhantomsHomeAndUpdateServerPvpStats(0);
    EndUnconditionally(EventEndType.End);
});

// Hollow Arena - Duel
Event(20005941, Restart, function(X0_4) {
    SetNetworkSyncState(Disabled);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X0_4);
    SetCharacterInvincibility(10000, Enabled);
    IfHollowArenaSoloResults(OR_03, HollowArenaResult.Draw);
    SkipIfConditionGroupStateUncompiled(2, FAIL, OR_03);
    DisplayHollowArenaPvpMessage(10020020, 0, Enabled);
    WaitFixedTimeSeconds(3.5);
    WaitFixedTimeSeconds(1);
    Unknown200379(0);
    WaitFixedTimeFrames(1);
    IfHollowArenaSoloResults(OR_01, HollowArenaResult.Win);
    IfHollowArenaSoloResults(OR_02, HollowArenaResult.Draw);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, OR_01);
    GotoIfConditionGroupStateUncompiled(Label.LABEL1, PASS, OR_02);
    GotoUnconditionally(Label.LABEL2);
    Label0();
    DisplayBanner(TextBannerType.HollowArenaWin);
    SetSpeffect(10000, 1420040);
    WaitFixedTimeSeconds(5);
    DisplayHollowArenaPvpMessage(10020030, 0, Enabled);
    WaitFixedTimeSeconds(0.5);
    SendAllPhantomsHomeAndUpdateServerPvpStats(0);
    EndUnconditionally(EventEndType.End);
    Label1();
    DisplayBanner(TextBannerType.HollowArenaDraw);
    WaitFixedTimeSeconds(5);
    DisplayHollowArenaPvpMessage(10020031, 0, Enabled);
    WaitFixedTimeSeconds(0.5);
    SendAllPhantomsHomeAndUpdateServerPvpStats(0);
    EndUnconditionally(EventEndType.End);
    Label2();
    DisplayBanner(TextBannerType.HollowArenaLoss);
    WaitFixedTimeSeconds(5);
    DisplayHollowArenaPvpMessage(10020032, 0, Enabled);
    WaitFixedTimeSeconds(0.5);
    SendAllPhantomsHomeAndUpdateServerPvpStats(0);
    EndUnconditionally(EventEndType.End);
});

//-----------------------------------
// Character - Set Hosility Flags
//-----------------------------------
Event(20006000, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X4_4);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X8_4);
    
    SetEventFlag(X12_4, OFF);
   
    IfEventFlag(AND_01, OFF, TargetEventFlagType.EventFlag, X4_4);
    IfEventFlag(AND_01, OFF, TargetEventFlagType.EventFlag, X8_4);
    IfCharacterHPRatio(AND_01, X0_4, ComparisonType.Greater, 0, ComparisonType.Equal, 1);
    IfDamageType(AND_02, X0_4, 10000, DamageType.Unspecified);
    IfCharacterHPRatio(AND_02, X0_4, ComparisonType.Less, X16_4, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_02);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X12_4);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfConditionGroup(MAIN, PASS, AND_01);
    
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X4_4);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X8_4);
   
    SetCharacterTeamType(X0_4, TeamType.HostileNPC);
    GotoIfComparison(Label.LABEL0, ComparisonType.Equal, 1, X28_4);
    BatchSetNetworkconnectedEventFlags(X20_4, X24_4, OFF);
    SetNetworkconnectedEventFlag(X4_4, ON);
    GotoUnconditionally(Label.LABEL9);
    
    Label0();
    BatchSetNetworkconnectedEventFlags(X20_4, X24_4, OFF);
    SetNetworkconnectedEventFlag(X8_4, ON);
    
    Label9();
    SaveRequest(0);
    WaitFixedTimeFrames(1);
    IfCharacterHasSpeffect(AND_03, X0_4, 159, true, ComparisonType.Equal, 1);
    EndIfConditionGroupStateUncompiled(EventEndType.End, FAIL, AND_03);
    ForceAnimationPlayback(X0_4, 0, false, false, false, 0, 1);
});

//-----------------------------------
// Character - Hostility Monitor
//-----------------------------------
Event(20006001, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    
    WaitFixedTimeFrames(1);
    
    IfEventFlag(AND_01, OFF, TargetEventFlagType.EventFlag, X4_4);
    IfEventFlag(AND_01, OFF, TargetEventFlagType.EventFlag, X8_4);
    IfConditionGroup(MAIN, PASS, AND_01);
   
    GotoIfComparison(Label.LABEL0, ComparisonType.Equal, 9, X16_4);
    GotoIfComparison(Label.LABEL1, ComparisonType.Equal, 8, X16_4);
    GotoIfComparison(Label.LABEL2, ComparisonType.Equal, 7, X16_4);
    GotoIfComparison(Label.LABEL3, ComparisonType.Equal, 6, X16_4);
    GotoIfComparison(Label.LABEL4, ComparisonType.Equal, 5, X16_4);
    GotoIfComparison(Label.LABEL5, ComparisonType.Equal, 4, X16_4);
    GotoIfComparison(Label.LABEL6, ComparisonType.Equal, 3, X16_4);
    GotoIfComparison(Label.LABEL7, ComparisonType.Equal, 2, X16_4);
    GotoIfComparison(Label.LABEL8, ComparisonType.Equal, 1, X16_4);
   
    IfDamageType(AND_02, X0_4, 10000, DamageType.Unspecified);
    IfConditionGroup(MAIN, PASS, AND_02);
    WaitFixedTimeFrames(1);
    
    Label0();
    IfDamageType(AND_03, X0_4, 10000, DamageType.Unspecified);
    IfConditionGroup(MAIN, PASS, AND_03);
    WaitFixedTimeFrames(1);
   
    Label1();
    IfDamageType(AND_04, X0_4, 10000, DamageType.Unspecified);
    IfConditionGroup(MAIN, PASS, AND_04);
    WaitFixedTimeFrames(1);
   
    Label2();
    IfDamageType(AND_05, X0_4, 10000, DamageType.Unspecified);
    IfConditionGroup(MAIN, PASS, AND_05);
    WaitFixedTimeFrames(1);
    
    Label3();
    IfDamageType(AND_06, X0_4, 10000, DamageType.Unspecified);
    IfConditionGroup(MAIN, PASS, AND_06);
    WaitFixedTimeFrames(1);
    
    Label4();
    IfDamageType(AND_07, X0_4, 10000, DamageType.Unspecified);
    IfConditionGroup(MAIN, PASS, AND_07);
    WaitFixedTimeFrames(1);
   
    Label5();
    IfDamageType(AND_08, X0_4, 10000, DamageType.Unspecified);
    IfConditionGroup(MAIN, PASS, AND_08);
    WaitFixedTimeFrames(1);
    
    Label6();
    IfDamageType(AND_09, X0_4, 10000, DamageType.Unspecified);
    IfConditionGroup(MAIN, PASS, AND_09);
    WaitFixedTimeFrames(1);
    
    Label7();
    IfDamageType(AND_10, X0_4, 10000, DamageType.Unspecified);
    IfConditionGroup(MAIN, PASS, AND_10);
    WaitFixedTimeFrames(1);
    
    Label8();
    IfDamageType(AND_11, X0_4, 10000, DamageType.Unspecified);
    IfConditionGroup(MAIN, PASS, AND_11);
    SetEventFlag(X12_4, ON);
    EndUnconditionally(EventEndType.Restart);
});

//-----------------------------------
// Character - Set Flags upon Death
//-----------------------------------
// <entity id>, <defeated flag>, <flag range start>, <flag range end>
Event(20006002, Default, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true); // End if player is client
   
    IfEventFlag(AND_01, OFF, TargetEventFlagType.EventFlag, X4_4); // Check if entity has not been defeated previously
    IfCharacterDeadalive(AND_01, X0_4, DeathState.Dead, ComparisonType.Equal, 1); // Check if entity is dead
    IfConditionGroup(MAIN, PASS, AND_01);
    
    BatchSetNetworkconnectedEventFlags(X8_4, X12_4, OFF); // Set flag range to OFF
    SetNetworkconnectedEventFlag(X4_4, ON); // Set defeated flag
    SaveRequest(0);
});

//-----------------------------------
// Character - Setup Appearance in Host/Client world
//-----------------------------------
// <entity id>, <flag>, <hostility flag>, <dead flag>, <in host world flag>, <npc flag range start>, <npc flag range end>
Event(20006003, Default, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4) {
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    SetEventFlag(X4_4, OFF);
    
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X4_4);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X8_4);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X12_4);
    IfCharacterHPRatio(AND_01, X0_4, ComparisonType.NotEqual, 0, ComparisonType.Equal, 1);
    IfPlayerIsNotInOwnWorldExcludesArena(AND_01, false);
    IfConditionGroup(MAIN, PASS, AND_01);
    
    GotoIfPlayerIsNotInOwnWorldExcludesArena(Label.LABEL10, true);
    
    SetEventFlag(X4_4, OFF);
    BatchSetNetworkconnectedEventFlags(X20_4, X24_4, OFF);
    SetNetworkconnectedEventFlag(X16_4, ON);
    SaveRequest(0);
    
    // Disable if world isn't host world
    Label10();
    SetCharacterInvincibility(X0_4, Enabled);
    SetCharacterAnimationState(X0_4, Disabled);
    
    WaitFixedTimeSeconds(0.5);
    
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    SetSpeffect(X0_4, 4640);
    
    WaitFixedTimeSeconds(5);
    
    ChangeCharacterEnableState(X0_4, Disabled);
    SetCharacterBackreadState(X0_4, true);
});

//----------------------------------
// Character - Setup Appearance in Host/Client world
// <entity id>, <flag>, <hostility flag>, <dead flag>, <in host world flag>, <anim id>, <npc flag range start>, <npc flag range end>, <speffect>
//----------------------------------
Event(20006004, Default, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4, X32_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    SetEventFlag(X4_4, OFF);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X4_4);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X8_4);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X12_4);
    IfCharacterHPRatio(AND_01, X0_4, ComparisonType.NotEqual, 0, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_01, X0_4, X32_4, true, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, PASS, AND_01);
    SetEventFlag(X4_4, OFF);
    BatchSetNetworkconnectedEventFlags(X24_4, X28_4, OFF);
    SetNetworkconnectedEventFlag(X16_4, ON);
    SaveRequest(0);
    ForceAnimationPlayback(X0_4, X20_4, false, true, false, 0, 1);
    ChangeCharacterEnableState(X0_4, Disabled);
    SetCharacterBackreadState(X0_4, true);
});

//----------------------------------
// Character - Animation Handler
// <entity id>, <flag>, <flag>, <int>, <hex to dec float>, <anim>, <anim>, <speffect>
//----------------------------------
Event(20006005, Default, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4) {
    SetNetworkSyncState(Disabled);
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X4_4);
    GotoIfComparison(Label.LABEL0, ComparisonType.NotEqual, X12_4, 0);
    
    IfEntityInoutsideRadiusOfEntity(AND_01, InsideOutsideState.Inside, 10000, X0_4, X16_4, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL9, PASS, AND_01);
    
    RotateCharacter(10000, X0_4, 69070, false);
    WaitFixedTimeFrames(1);
    IfEntityInoutsideRadiusOfEntity(OR_01, InsideOutsideState.Inside, 10000, X0_4, X16_4, 1);
    GotoUnconditionally(Label.LABEL8);
    
    Label0();
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X12_4, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL9, PASS, AND_01);
    RotateCharacter(10000, X12_4, 69070, false);
    WaitFixedTimeFrames(1);
    IfInoutsideArea(OR_01, InsideOutsideState.Inside, 10000, X12_4, 1);
    GotoUnconditionally(Label.LABEL8);
    
    Label8();
    IfCharacterHasSpeffect(AND_02, 10000, 150, false, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_02);
    IfEventFlag(OR_02, OFF, TargetEventFlagType.EventFlag, X4_4);
    IfElapsedFrames(OR_02, 89);
    IfConditionGroup(OR_01, PASS, OR_02);
    IfConditionGroup(MAIN, PASS, OR_01);
    GotoIfConditionGroupStateCompiled(Label.LABEL20, PASS, AND_02);
    GotoIfConditionGroupStateCompiled(Label.LABEL19, PASS, OR_02);
    
    Label9();
    RotateCharacter(10000, X0_4, X20_4, true);
    WaitFixedTimeFrames(1);
    SetEventFlag(X8_4, ON);
    IfEventFlag(OR_03, OFF, TargetEventFlagType.EventFlag, X4_4);
    IfCharacterHasSpeffect(AND_03, 10000, 150, false, ComparisonType.Equal, 1);
    IfConditionGroup(OR_03, PASS, AND_03);
    IfConditionGroup(MAIN, PASS, OR_03);
    GotoIfConditionGroupStateCompiled(Label.LABEL20, PASS, AND_03);
    GotoIfComparison(Label.LABEL10, ComparisonType.Equal, X28_4, -1);
    IfCharacterHasSpeffect(OR_04, 10000, X28_4, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(AND_04, 10000, 150, false, ComparisonType.Equal, 1);
    IfConditionGroup(OR_04, PASS, AND_04);
    IfConditionGroup(MAIN, PASS, OR_04);
    GotoIfConditionGroupStateCompiled(Label.LABEL20, PASS, AND_04);
    
    Label10();
    SetEventFlag(X8_4, OFF);
    ForceAnimationPlayback(10000, X24_4, false, true, false, 0, 1);
    EndUnconditionally(EventEndType.Restart);
    
    Label19();
    ForceAnimationPlayback(10000, 0, false, false, false, 0, 1);
    SetEventFlag(X4_4, OFF);
    EndUnconditionally(EventEndType.Restart);
    
    Label20();
    SetEventFlag(X4_4, OFF);
    SetEventFlag(X8_4, OFF);
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------
// Character - 
//----------------------------------
Event(20006006, Default, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4) {
    SetNetworkSyncState(Disabled);
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X4_4);
    SetEventFlag(X8_4, ON);
    GotoIfComparison(Label.LABEL0, ComparisonType.Equal, X20_4, 1);
    ForceAnimationPlayback(X0_4, X12_4, false, false, false, 0, 1);
    GotoUnconditionally(Label.LABEL20);
    Label0();
    RotateCharacter(X0_4, 10000, X12_4, true);
    Label20();
    IfEventFlag(AND_01, OFF, TargetEventFlagType.EventFlag, X4_4);
    IfCharacterHasSpeffect(AND_01, X0_4, 155, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_01);
    IfCharacterHasSpeffect(OR_02, X0_4, 150, true, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, OR_02);
    IfConditionGroup(MAIN, PASS, OR_01);
    SkipIfConditionGroupStateCompiled(2, FAIL, OR_02);
    SetEventFlag(X8_4, OFF);
    EndUnconditionally(EventEndType.Restart);
    ForceAnimationPlayback(X0_4, X16_4, false, true, false, 0, 1);
    SetEventFlag(X8_4, OFF);
    WaitFixedTimeSeconds(X24_4);
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------
// Character - 
//----------------------------------
Event(20006007, Default, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4) {
    SetNetworkSyncState(Disabled);
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X4_4);
    IfEntityInoutsideRadiusOfEntity(AND_01, InsideOutsideState.Inside, 10000, X0_4, X12_4, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL20, PASS, AND_01);
    RotateCharacter(10000, X0_4, 69070, false);
    WaitFixedTimeFrames(1);
    IfEntityInoutsideRadiusOfEntity(OR_01, InsideOutsideState.Inside, 10000, X0_4, X12_4, 1);
    IfCharacterHasSpeffect(AND_02, 10000, 150, false, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_02);
    IfEventFlag(OR_02, OFF, TargetEventFlagType.EventFlag, X4_4);
    IfElapsedFrames(OR_02, 89);
    IfConditionGroup(OR_01, PASS, OR_02);
    IfConditionGroup(MAIN, PASS, OR_01);
    SkipIfConditionGroupStateCompiled(2, FAIL, AND_02);
    SetEventFlag(X4_4, OFF);
    EndUnconditionally(EventEndType.Restart);
    SkipIfConditionGroupStateCompiled(3, FAIL, OR_02);
    ForceAnimationPlayback(10000, 0, false, false, false, 0, 1);
    SetEventFlag(X4_4, OFF);
    EndUnconditionally(EventEndType.Restart);
    Label20();
    RotateCharacter(10000, X0_4, X16_4, true);
    WaitFixedTimeFrames(1);
    SetEventFlag(X8_4, ON);
    IfEventFlag(OR_03, OFF, TargetEventFlagType.EventFlag, X4_4);
    IfCharacterHasSpeffect(AND_03, 10000, 150, false, ComparisonType.Equal, 1);
    IfConditionGroup(OR_03, PASS, AND_03);
    IfConditionGroup(MAIN, PASS, OR_03);
    SkipIfConditionGroupStateCompiled(3, FAIL, AND_03);
    SetEventFlag(X4_4, OFF);
    SetEventFlag(X8_4, OFF);
    EndUnconditionally(EventEndType.Restart);
    SetEventFlag(X8_4, OFF);
    ForceAnimationPlayback(10000, X20_4, false, true, false, 0, 1);
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------
// Character - 
//----------------------------------
Event(20006008, Default, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4) {
    SetNetworkSyncState(Disabled);
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X4_4);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X0_4, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL20, PASS, AND_01);
    RotateCharacter(10000, X0_4, 69070, false);
    WaitFixedTimeFrames(1);
    IfInoutsideArea(OR_01, InsideOutsideState.Inside, 10000, X0_4, 1);
    IfCharacterHasSpeffect(AND_02, 10000, 150, false, ComparisonType.Equal, 1);
    IfConditionGroup(OR_01, PASS, AND_02);
    IfEventFlag(OR_02, OFF, TargetEventFlagType.EventFlag, X4_4);
    IfElapsedFrames(OR_02, 89);
    IfConditionGroup(OR_01, PASS, OR_02);
    IfConditionGroup(MAIN, PASS, OR_01);
    SkipIfConditionGroupStateCompiled(2, FAIL, AND_02);
    SetEventFlag(X4_4, OFF);
    EndUnconditionally(EventEndType.Restart);
    SkipIfConditionGroupStateCompiled(3, FAIL, OR_02);
    ForceAnimationPlayback(10000, 0, false, false, false, 0, 1);
    SetEventFlag(X4_4, OFF);
    EndUnconditionally(EventEndType.Restart);
    Label20();
    RotateCharacter(10000, X12_4, X16_4, true);
    WaitFixedTimeFrames(1);
    SetEventFlag(X8_4, ON);
    IfEventFlag(OR_03, OFF, TargetEventFlagType.EventFlag, X4_4);
    IfCharacterHasSpeffect(AND_03, 10000, 150, false, ComparisonType.Equal, 1);
    IfConditionGroup(OR_03, PASS, AND_03);
    IfConditionGroup(MAIN, PASS, OR_03);
    SkipIfConditionGroupStateCompiled(3, FAIL, AND_03);
    SetEventFlag(X4_4, OFF);
    SetEventFlag(X8_4, OFF);
    EndUnconditionally(EventEndType.Restart);
    SetEventFlag(X8_4, OFF);
    ForceAnimationPlayback(10000, X20_4, false, true, false, 0, 1);
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------
// Character - Force Animation on Player
//----------------------------------
Event(20006010, Default, function(X0_4, X4_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    SetEventFlag(X0_4, OFF);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X0_4);
    ForceAnimationPlayback(10000, X4_4, false, true, false, 0, 1);
    SetEventFlag(X0_4, OFF);
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------
// Character - Spawn FFX on Player
//---------------------------------- 
Event(20006011, Default, function(X0_4, X4_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    SetEventFlag(X0_4, OFF);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X0_4);
    SpawnOneshotSFX(TargetEntityType.Character, 10000, 200, X4_4);
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------
// Character - Set Flag
//----------------------------------
Event(20006020, Default, function(X0_4, X4_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X0_4);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X4_4);
    IfConditionGroup(MAIN, PASS, AND_01);
    SetEventFlag(X0_4, OFF);
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------
// Character - Spawn Treasure
// <invisible entity>, <action button>, <selection value>, <itemlot>, <flag range start>, <flag range end>, <npc flag>
//----------------------------------
Event(20006030, Default, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true); // End if player is client
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X24_4); // NPC quest flag is ON
    IfBatchEventFlags(AND_01, LogicalOperationType.NotAllON, TargetEventFlagType.EventFlag, X16_4, X20_4); // Flag range is not all ON
    IfConditionGroup(MAIN, PASS, AND_01);
    
    // Goto label based on selection arg
    GotoIfComparison(Label.LABEL1, ComparisonType.Equal, 1, X8_4);
    GotoIfComparison(Label.LABEL2, ComparisonType.Equal, 2, X8_4);
    
    CreateObjectfollowingSFX(X0_4, 90, 60); // Rarity 0
    GotoUnconditionally(Label.LABEL20);
    
    Label1();
    CreateObjectfollowingSFX(X0_4, 90, 61); // Rarity 1
    GotoUnconditionally(Label.LABEL20);
    
    Label2();
    CreateObjectfollowingSFX(X0_4, 90, 62); // Rarity 2
    
    // Setup treasure pickup for player
    Label20();
    IfActionButtonInArea(MAIN, X4_4, X0_4);
    ForceAnimationPlayback(10000, 60070, false, false, false, 0, 1);
    AwardItemLot(X12_4);
    DeleteObjectfollowingSFX(X0_4, true);
});

//----------------------------------
// Region - Set Flag in proximity
//----------------------------------
Event(20006031, Default, function(X0_4, X4_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true); // End if player is client
    
    SetEventFlag(X0_4, OFF);
    
    IfInoutsideArea(MAIN, InsideOutsideState.Inside, 10000, X4_4, 1); // Check if player is in region
    
    SetEventFlag(X0_4, ON);
    WaitFixedTimeSeconds(1);
    
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X4_4, 1); 
    IfConditionGroup(MAIN, FAIL, AND_01); // Check if player is no longer in region
    
    SetEventFlag(X0_4, OFF);
    
    EndUnconditionally(EventEndType.Restart);
});

// Patches - Handle Treasure based on Quest Progression
Event(20006032, Default, function(X0_4, X4_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    
    // Patches is 0 HP
    IfCharacterHPRatio(OR_15, X0_4, ComparisonType.Equal, 0, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, OR_15);
    
    // Patches is dead
    IfCharacterDeadalive(MAIN, X0_4, DeathState.Dead, ComparisonType.Equal, 1);
    
    Label0();
    WarpObjectToCharacter(X4_4, X0_4, 236);
    
    // Returned Catarina Armor
    IfEventFlag(OR_01, OFF, TargetEventFlagType.EventFlag, 73501050);
    IfEventFlag(OR_01, OFF, TargetEventFlagType.EventFlag, 73501010);
    IfEventFlag(OR_01, OFF, TargetEventFlagType.EventFlag, 73501020);
    IfEventFlag(OR_01, OFF, TargetEventFlagType.EventFlag, 73501030);
    IfEventFlag(OR_01, OFF, TargetEventFlagType.EventFlag, 73501040);
    IfConditionGroup(AND_01, PASS, OR_01);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, 50006202);
    IfConditionGroup(MAIN, PASS, AND_01);
    
    // Spawn Treasure
    CreateObjectfollowingSFX(X4_4, 90, 61);
    IfActionButtonInArea(MAIN, 4000, X4_4);
    ForceAnimationPlayback(10000, 60070, false, false, false, 0, 1);
    AwardItemLot(52020);
    DeleteObjectfollowingSFX(X4_4, true);
});

//----------------------------------
// Gauntlet - Spawn Treasure
// <invisible entity>, <action button>, <selection value>, <itemlot>, <loot flag>
//----------------------------------
Event(20006033, Default, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true); // End if player is client
    
    // End if loot has been picked up
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X16_4);
    
    // End if not in Gauntlet mode
    EndIfEventFlag(EventEndType.End, OFF, TargetEventFlagType.EventFlag, 25009850);

    
    // Goto label based on selection arg
    GotoIfComparison(Label.LABEL1, ComparisonType.Equal, 1, X8_4);
    GotoIfComparison(Label.LABEL2, ComparisonType.Equal, 2, X8_4);
    
    CreateObjectfollowingSFX(X0_4, 90, 60); // Rarity 0
    GotoUnconditionally(Label.LABEL20);
    
    Label1();
    CreateObjectfollowingSFX(X0_4, 90, 61); // Rarity 1
    GotoUnconditionally(Label.LABEL20);
    
    Label2();
    CreateObjectfollowingSFX(X0_4, 90, 62); // Rarity 2
    
    // Setup treasure pickup for player
    Label20();
    IfActionButtonInArea(MAIN, X4_4, X0_4);
    ForceAnimationPlayback(10000, 60070, false, false, false, 0, 1);
    AwardItemLot(X12_4);
    DeleteObjectfollowingSFX(X0_4, true);
});

//----------------------------------------------
// Character - Warp Entity on SpEffect Trigger
//----------------------------------------------
Event(20006040, Default, function(X0_4, X4_4, X8_4) {
    IfPlayerIsNotInOwnWorldExcludesArena(AND_01, false); // If player is not a client
    IfCharacterBackreadStatus(AND_01, X0_4, true, ComparisonType.Equal, 1); // Entity is loaded
    IfCharacterHasSpeffect(AND_01, X0_4, X8_4, true, ComparisonType.Equal, 1); // Entity has SpEffect
    IfConditionGroup(MAIN, PASS, AND_01);
    
    WarpCharacterAndCopyFloor(X0_4, TargetEntityType.Area, X4_4, -1, X0_4); // Warp entity
    
    IfPlayerIsNotInOwnWorldExcludesArena(AND_02, false); // If player is not a client
    IfCharacterBackreadStatus(AND_02, X0_4, false, ComparisonType.Equal, 1); // Entity is not loaded
    IfConditionGroup(MAIN, PASS, AND_02);
    
    EndUnconditionally(EventEndType.Restart);
    
    IfDamageType(MAIN, X0_4, 10000, DamageType.Unspecified);
});

//----------------------------------------------
// NG+ Rings
//----------------------------------------------
Event(20008000, Restart, function(X0_4, X4_1, X8_4) {
    IfGameCycle(OR_01, ComparisonType.GreaterOrEqual, X4_1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, OR_01);
    ChangeCharacterEnableState(X0_4, Disabled);
    SetCharacterAnimationState(X0_4, Disabled);
    GotoUnconditionally(Label.LABEL1)
    
    Label0();
    ChangeCharacterEnableState(X0_4, Enabled);
    SetCharacterAnimationState(X0_4, Enabled);
    SetCharacterAIState(X0_4, Enabled);
    SetNetworkUpdateRate(X0_4, true, CharacterUpdateFrequency.AlwaysUpdate)
    GotoUnconditionally(Label.LABEL1)
    
    Label1();
    IfDamageType(MAIN, X0_4, 10000, DamageType.Unspecified);
    WaitFixedTimeSeconds(0.1);
    RequestCharacterAIReplan(X0_4);
    
    IfCharacterHPRatio(MAIN, X0_4, ComparisonType.LessOrEqual, 0, ComparisonType.Equal, 1);
    AwardItemLot(X8_4);
});

//----------------------------------------------
// NG+ Enemies
//----------------------------------------------
Event(20008001, Restart, function(X0_4, X4_1) {
    IfGameCycle(OR_01, ComparisonType.GreaterOrEqual, X4_1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, OR_01);
    ChangeCharacterEnableState(X0_4, Disabled);
    SetCharacterAnimationState(X0_4, Disabled);
    GotoUnconditionally(Label.LABEL1)
    
    Label0();
    ChangeCharacterEnableState(X0_4, Enabled);
    SetCharacterAnimationState(X0_4, Enabled);
    SetCharacterAIState(X0_4, Enabled);
    SetNetworkUpdateRate(X0_4, true, CharacterUpdateFrequency.AlwaysUpdate)
    GotoUnconditionally(Label.LABEL1)
    
    Label1();
    IfDamageType(MAIN, X0_4, 10000, DamageType.Unspecified);
    WaitFixedTimeSeconds(0.1);
    RequestCharacterAIReplan(X0_4);
});

//----------------------------------------------
// NG+ Rings - Abyss Watchers
//----------------------------------------------
Event(20008002, Restart, function(X0_4, X4_1, X8_4) {
    IfGameCycle(OR_01, ComparisonType.GreaterOrEqual, X4_1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, OR_01);
    ChangeCharacterEnableState(X0_4, Disabled);
    SetCharacterAnimationState(X0_4, Disabled);
    GotoUnconditionally(Label.LABEL1)
    
    Label0();
    ChangeCharacterEnableState(X0_4, Enabled);
    SetCharacterAnimationState(X0_4, Enabled);
    SetCharacterAIState(X0_4, Enabled);
    SetNetworkUpdateRate(X0_4, true, CharacterUpdateFrequency.AlwaysUpdate)
    GotoUnconditionally(Label.LABEL1)
    
    Label1();
    IfDamageType(MAIN, X0_4, 10000, DamageType.Unspecified);
    WaitFixedTimeSeconds(0.1);
    RequestCharacterAIReplan(X0_4);
    
    IfCharacterHasSpeffect(OR_01, X0_4, 12243, true, ComparisonType.Equal, 1);
    IfCharacterHasSpeffect(OR_01, X0_4, 12244, true, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, PASS, OR_01);
    AwardItemLot(X8_4);
});

//----------------------------------------------
// Spawn Control - Event Flag
//----------------------------------------------
Event(20008010, Restart, function(X0_4, X4_4) {
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X4_4);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, OR_01);
    ChangeCharacterEnableState(X0_4, Disabled);
    SetCharacterAnimationState(X0_4, Disabled);
    GotoUnconditionally(Label.LABEL1)
    
    Label0();
    ChangeCharacterEnableState(X0_4, Enabled);
    SetCharacterAnimationState(X0_4, Enabled);
    SetCharacterAIState(X0_4, Enabled);
    SetNetworkUpdateRate(X0_4, true, CharacterUpdateFrequency.AlwaysUpdate)
    GotoUnconditionally(Label.LABEL1)
    
    Label1();
    IfDamageType(MAIN, X0_4, 10000, DamageType.Unspecified);
    WaitFixedTimeSeconds(0.1);
    RequestCharacterAIReplan(X0_4);
});

//----------------------------------------------
// Spawn Control - NG+ and Event Flag
//----------------------------------------------
Event(20008020, Restart, function(X0_4, X4_4, X8_1) {
    IfGameCycle(OR_01, ComparisonType.GreaterOrEqual, X8_1);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X4_4);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, OR_01);
    ChangeCharacterEnableState(X0_4, Disabled);
    SetCharacterAnimationState(X0_4, Disabled);
    GotoUnconditionally(Label.LABEL1)
    
    Label0();
    ChangeCharacterEnableState(X0_4, Enabled);
    SetCharacterAnimationState(X0_4, Enabled);
    SetCharacterAIState(X0_4, Enabled);
    SetNetworkUpdateRate(X0_4, true, CharacterUpdateFrequency.AlwaysUpdate)
    GotoUnconditionally(Label.LABEL1)
    
    Label1();
    IfDamageType(MAIN, X0_4, 10000, DamageType.Unspecified);
    WaitFixedTimeSeconds(0.1);
    RequestCharacterAIReplan(X0_4);
});

//----------------------------------------------
// Spawn Control - Disable By Default
//----------------------------------------------
Event(20008030, Restart, function(X0_4) {
    ChangeCharacterEnableState(X0_4, Disabled);
    SetCharacterAnimationState(X0_4, Disabled);
});

//----------------------------------------------
// Spawn Control - UNUSED
//----------------------------------------------
Event(20008040, Restart, function(X0_4) {
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, 25000005);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, OR_01);
    ChangeCharacterEnableState(X0_4, Disabled);
    SetCharacterAnimationState(X0_4, Disabled);
    GotoUnconditionally(Label.LABEL1)
    
    Label0();
    ChangeCharacterEnableState(X0_4, Enabled);
    SetCharacterAnimationState(X0_4, Enabled);
    SetCharacterAIState(X0_4, Enabled);
    SetNetworkUpdateRate(X0_4, true, CharacterUpdateFrequency.AlwaysUpdate)
    GotoUnconditionally(Label.LABEL1)
    
    Label1();
    IfDamageType(MAIN, X0_4, 10000, DamageType.Unspecified);
    WaitFixedTimeSeconds(0.1);
    RequestCharacterAIReplan(X0_4);
});

//----------------------------------------------
// Spawn Control - OTE - With Itemlot
//----------------------------------------------
Event(20008100, Default, function(X0_4, X4_4, X8_4) {
    GotoIfEventFlag(Label.LABEL0, OFF, TargetEventFlagType.EventFlag, X0_4);
    ChangeCharacterEnableState(X4_4, Disabled);
    SetCharacterAnimationState(X4_4, Disabled);
    ForceCharacterDeath(X4_4, false);
    EndUnconditionally(EventEndType.End);
    Label0();
    IfCharacterDeadalive(MAIN, X4_4, DeathState.Dead, ComparisonType.Equal, 1);
    SetEventFlag(X0_4, ON);
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    AwardItemLot(X8_4);
    EndUnconditionally(EventEndType.End);
});

//----------------------------------------------
// Spawn Control - OTE - NG+ - With Itemlot
//----------------------------------------------
Event(20008101, Default, function(X0_4, X4_4, X8_4, X12_1) {
    IfGameCycle(OR_01, ComparisonType.GreaterOrEqual, X12_1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, OR_01);
    ChangeCharacterEnableState(X4_4, Disabled);
    SetCharacterAnimationState(X4_4, Disabled);
    ForceCharacterDeath(X4_4, false);
    EndUnconditionally(EventEndType.End);
    
    Label0();
    GotoIfEventFlag(Label.LABEL1, OFF, TargetEventFlagType.EventFlag, X0_4);
    ChangeCharacterEnableState(X4_4, Disabled);
    SetCharacterAnimationState(X4_4, Disabled);
    ForceCharacterDeath(X4_4, false);
    EndUnconditionally(EventEndType.End);
    
    Label1();
    IfCharacterDeadalive(MAIN, X4_4, DeathState.Dead, ComparisonType.Equal, 1);
    SetEventFlag(X0_4, ON);
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    AwardItemLot(X8_4);
    EndUnconditionally(EventEndType.End);
});

//----------------------------------------------
// Spawn Control - OTE - Event Flag - With Itemlot
//----------------------------------------------
Event(20008102, Default, function(X0_4, X4_4, X8_4, X12_4) {
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X12_4);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, OR_01);
    ChangeCharacterEnableState(X4_4, Disabled);
    SetCharacterAnimationState(X4_4, Disabled);
    ForceCharacterDeath(X4_4, false);
    EndUnconditionally(EventEndType.End);
    
    Label0();
    GotoIfEventFlag(Label.LABEL1, OFF, TargetEventFlagType.EventFlag, X0_4);
    ChangeCharacterEnableState(X4_4, Disabled);
    SetCharacterAnimationState(X4_4, Disabled);
    ForceCharacterDeath(X4_4, false);
    EndUnconditionally(EventEndType.End);
    
    Label1();
    IfCharacterDeadalive(MAIN, X4_4, DeathState.Dead, ComparisonType.Equal, 1);
    SetEventFlag(X0_4, ON);
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    AwardItemLot(X8_4);
    EndUnconditionally(EventEndType.End);
});

//----------------------------------------------
// Spawn Control - OTE - No Itemlot
//----------------------------------------------
Event(20008150, Default, function(X0_4, X4_4) {
    GotoIfEventFlag(Label.LABEL0, OFF, TargetEventFlagType.EventFlag, X0_4);
    
    ChangeCharacterEnableState(X4_4, Disabled);
    SetCharacterAnimationState(X4_4, Disabled);
    ForceCharacterDeath(X4_4, false);
    EndUnconditionally(EventEndType.End);
    
    Label0();
    IfCharacterDeadalive(MAIN, X4_4, DeathState.Dead, ComparisonType.Equal, 1);
    SetEventFlag(X0_4, ON);
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    EndUnconditionally(EventEndType.End);
});

//------------------------
// Warp Enemy to Player
//------------------------
Event(20008160, Restart, function(X0_4) {
    IfCharacterHasSpEffect(MAIN, X0_4, 160500530, true, ComparisonType.Equal, 1);
    IssueShortWarpRequest(X0_4, TargetEntityType.Character, 10000, 270);
    
    // Spawn FFX
    SpawnOneshotSFX(TargetEntityType.Character, X0_4, 270, 1060);
    
    WaitFixedTimeSeconds(1.0);
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Warp to Location 
//----------------------------------------------
Event(20008200, Restart, function(X0_4, X4_4, X8_1, X12_4, X16_4, X20_4, X24_4, X28_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    
    IfActionButtonInArea(AND_01, X4_4, X0_4);
    IfConditionGroup(MAIN, PASS, AND_01);
    
    //IfPlayerHasdoesntHaveItemIncludingBbox(AND_02, ItemType.Goods, X24_4, OwnershipState.Owns);
    //SkipIfConditionGroupStateUncompiled(1, PASS, AND_02); // If they have the item, skip
    //DisplayEpitaphMessage(X28_4);
    //SkipIfConditionGroupStateUncompiled(3, FAIL, AND_02); // If they don't have the item, skip
    RotateCharacter(10000, X0_4, X16_4, false);
    WarpPlayer(X8_1, 0, X12_4);
    SetPlayerRespawnPoint(X20_4);
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Warp to Location - DLC1
//----------------------------------------------
Event(20008203, Restart, function(X0_4, X4_4, X8_1, X12_4, X16_4, X20_4, X24_4, X28_4) {
    EndIfEventFlag(EventEndType.End, OFF, TargetEventFlagType.EventFlag, 6951);
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    
    IfActionButtonInArea(AND_01, X4_4, X0_4);
    IfConditionGroup(MAIN, PASS, AND_01);
    
    //IfPlayerHasdoesntHaveItemIncludingBbox(AND_02, ItemType.Goods, X24_4, OwnershipState.Owns);
    //SkipIfConditionGroupStateUncompiled(1, PASS, AND_02); // If they have the item, skip
    //DisplayEpitaphMessage(X28_4);
    //SkipIfConditionGroupStateUncompiled(3, FAIL, AND_02); // If they don't have the item, skip
    RotateCharacter(10000, X0_4, X16_4, false);
    WarpPlayer(X8_1, 0, X12_4);
    SetPlayerRespawnPoint(X20_4);
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Warp to Location - DLC2
//----------------------------------------------
Event(20008204, Restart, function(X0_4, X4_4, X8_1, X12_4, X16_4, X20_4, X24_4, X28_4) {
    EndIfEventFlag(EventEndType.End, OFF, TargetEventFlagType.EventFlag, 6952);
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    
    IfActionButtonInArea(AND_01, X4_4, X0_4);
    IfConditionGroup(MAIN, PASS, AND_01);
    
    //IfPlayerHasdoesntHaveItemIncludingBbox(AND_02, ItemType.Goods, X24_4, OwnershipState.Owns);
    //SkipIfConditionGroupStateUncompiled(1, PASS, AND_02); // If they have the item, skip
    //DisplayEpitaphMessage(X28_4);
    //SkipIfConditionGroupStateUncompiled(3, FAIL, AND_02); // If they don't have the item, skip
    RotateCharacter(10000, X0_4, X16_4, false);
    WarpPlayer(X8_1, 0, X12_4);
    SetPlayerRespawnPoint(X20_4);
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Warp to Location - Master Key Support
//----------------------------------------------
Event(20008206, Restart, function(X0_4, X4_4, X8_1, X12_4, X16_4, X20_4, X24_4, X28_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    
    IfActionButtonInArea(AND_01, X4_4, X0_4);
    IfConditionGroup(MAIN, PASS, AND_01);
    
    //IfPlayerHasdoesntHaveItemIncludingBbox(OR_02, ItemType.Goods, X24_4, OwnershipState.Owns);
    //IfPlayerHasdoesntHaveItemIncludingBbox(OR_02, ItemType.Goods, 2100, OwnershipState.Owns);
    //SkipIfConditionGroupStateUncompiled(1, PASS, OR_02); // If they have the item, skip
    //DisplayEpitaphMessage(X28_4);
    //SkipIfConditionGroupStateUncompiled(3, FAIL, OR_02); // If they don't have the item, skip
    RotateCharacter(10000, X0_4, X16_4, false);
    WarpPlayer(X8_1, 0, X12_4);
    SetPlayerRespawnPoint(X20_4);
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Warp to Location - Wait for Flag
//----------------------------------------------
Event(20008201, Default, function(X0_4, X4_4, X8_1, X12_4, X16_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    WaitForEventFlag(ON, TargetEventFlagType.EventFlag, X16_4);
    IfActionButtonInArea(MAIN, X4_4, X0_4);
    RotateCharacter(10000, X0_4, 91040, false);
    SendAllPhantomsHome(0);
    WaitFixedTimeSeconds(3);
    WarpPlayer(X8_1, 0, X12_4)
});

//----------------------------------------------
// Warp to Location, set Flag
//----------------------------------------------
Event(20008202, Restart, function(X0_4, X4_4, X8_1, X12_4, X16_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    IfActionButtonInArea(MAIN, X4_4, X0_4);
    RotateCharacter(10000, X0_4, 91040, false);
    SendAllPhantomsHome(0);
    WaitFixedTimeSeconds(3);
    SetEventFlag(X16_4, ON);
    WarpPlayer(X8_1, 0, X12_4);
});

//----------------------------------------------
// Warp to Location - Firelink Shrine
//----------------------------------------------
Event(20008205, Restart, function(X0_4, X4_4, X8_1, X12_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    IfActionButtonInArea(MAIN, X4_4, X0_4);
    SendAllPhantomsHome(0);
    WaitFixedTimeSeconds(1);
    WarpPlayer(X8_1, 0, X12_4);
});

//----------------------------------------------
// Warp to Location - Untended Graves
//----------------------------------------------
Event(20008210, Default, function(X0_4, X4_4, X8_1, X12_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    IfActionButtonInArea(MAIN, X4_4, X0_4);
    RotateCharacter(10000, X0_4, 91040, false);
    SendAllPhantomsHome(0);
    WaitFixedTimeSeconds(3);
    SetMapCeremony(40, 0, 10);
    WarpPlayer(X8_1, 0, X12_4);
});

//----------------------------------------------
// Trial - Warp To
//----------------------------------------------
Event(20008220, Default, function(X0_4, X4_4, X8_1, X12_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    IfActionButtonInArea(MAIN, X4_4, X0_4);
    RotateCharacter(10000, X0_4, 91040, false);
    SendAllPhantomsHome(0);
    WaitFixedTimeSeconds(3);
    WarpPlayer(X8_1, 0, X12_4);
    SetEventFlag(250002000, ON);
});

//----------------------------------------------
// Trial - Warp From
// <object id>, <action button id>, <map id>, <warp point id>, <flag>
//----------------------------------------------
Event(20008221, Default, function(X0_4, X4_4, X8_1, X12_4, X16_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    IfActionButtonInArea(MAIN, X4_4, X0_4);
    SetEventFlag(X16_4, OFF);
    RotateCharacter(10000, X0_4, 91040, false);
    SendAllPhantomsHome(0);
    WaitFixedTimeSeconds(3);
    SetMapCeremony(X8_1, 0, 0);
    WarpPlayer(X8_1, 0, X12_4);
});

//----------------------------------------------
// Treasure Control - NG+ = X
// <object id>, <game cycle value>
//----------------------------------------------
Event(20009000, Default, function(X0_4, X4_1) {
    IfGameCycle(AND_01, ComparisonType.Equal, X4_1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_01);
    DeactivateObject(X0_4, Disabled);
    SetObjectTreasureState(X0_4, Disabled);
    EndUnconditionally(EventEndType.End);
    Label0();
    DeactivateObject(X0_4, Enabled);
    SetObjectTreasureState(X0_4, Enabled);
});

//----------------------------------------------
// Treasure Control - NG+ => X
// <object id>, <game cycle value>
//----------------------------------------------
Event(20009100, Default, function(X0_4, X4_1) {
    IfGameCycle(AND_01, ComparisonType.GreaterOrEqual, X4_1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_01);
    DeactivateObject(X0_4, Disabled);
    SetObjectTreasureState(X0_4, Disabled);
    EndUnconditionally(EventEndType.End);
    Label0();
    DeactivateObject(X0_4, Enabled);
    SetObjectTreasureState(X0_4, Enabled);
});

//----------------------------------------------
// Boss Kill 
// <boss kill flag>, <first boss kill flag>, <base itemlot>, <special itemlot>, <wanderer itemlot>, <corrupted itemlot>
//----------------------------------------------
Event(20020000, Default, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4) {
    // Skip Primordial Fragment reward if this is the first kill
    GotoIfEventFlag(Label.LABEL0, OFF, TargetEventFlagType.EventFlag, X4_4);
    
    // Default
    AwardItemLot(X8_4);
    
    // No Hit Reward
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25000040);
    AwardItemLot(X12_4);
    
    // Curse of Valor
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25000510);
    AwardItemLot(X12_4);
    
    // NG+1 Drop
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25000011);
    AwardItemLot(X8_4);
    
    // NG+2 Drop
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25000012);
    AwardItemLot(X8_4);
    
    // NG+3 Drop
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25000013);
    AwardItemLot(X8_4);
    
    Label0();
    // Don't set flags if a client player
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    
    SetEventFlag(X0_4, ON); // Boss Killed
    SetEventFlag(X4_4, ON); // First Boss Kill
    
    // Boon item
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25009851);
    AwardItemLot(X16_4);
    
    // Malus item
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25009852);
    AwardItemLot(X20_4);
    
    // End if not in Gauntlet feature mode
    EndIfEventFlag(EventEndType.End, OFF, TargetEventFlagType.EventFlag, 25009850);
    
    AwardItemLot(800002000); // Token drop
    
    // In Set/Random Gauntlet, return to Shrine
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, 25003200); // Ordered
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, 25003201); // Random
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, 25003203); // Reverse Ordered
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, 25003205); // Boss Select
    SkipIfConditionGroupStateUncompiled(3, FAIL, OR_01); 
    WaitFixedTimeSeconds(15.0);
    SetMapCeremony(40, 0, 0); // Ceremony fix
    WarpPlayer(40, 0, 4000970); // Firelink Shrine
    
    // In Endless Gauntlet, progress boss order
    IfEventFlag(OR_02, ON, TargetEventFlagType.EventFlag, 25003202); // Endless
    IfEventFlag(OR_02, ON, TargetEventFlagType.EventFlag, 25003204); // Reverse Endless
    SkipIfConditionGroupStateUncompiled(2, FAIL, OR_02);
    WaitFixedTimeSeconds(10.0);
    SetSpEffect(10000, 260120000);
});

//----------------------------------------------
// Corrupted Gundyr - Boss Start
//----------------------------------------------
Event(20020100, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
});

//----------------------------------------------
// Vordt of the Boreal Valley - Boss Start
//----------------------------------------------
Event(20020101, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
});

//----------------------------------------------
// Curse-rotted Greatwood - Boss Start
//----------------------------------------------
Event(20020102, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
});

//----------------------------------------------
// Crystal Sage - Boss Start
//----------------------------------------------
Event(20020103, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
});

//----------------------------------------------
// Deacons of the Deep - Boss Start
//----------------------------------------------
Event(20020104, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
});

//----------------------------------------------
// Abyss Watchers - Boss Start
//----------------------------------------------
Event(20020105, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
});

//----------------------------------------------
// High Lord Wolnir - Boss Start
//----------------------------------------------
Event(20020106, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
});

//----------------------------------------------
// Old Demon King - Boss Start
//----------------------------------------------
Event(20020107, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
});

//----------------------------------------------
// Pontiff Sulyvahn - Boss Start
//----------------------------------------------
Event(20020108, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
});

//----------------------------------------------
// Aldrich, Devourer of Gods - Boss Start
//----------------------------------------------
Event(20020109, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
});

//----------------------------------------------
// Yhorm the Giant - Boss Start
//----------------------------------------------
Event(20020110, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
});

//----------------------------------------------
// Dancer of the Boreal Valley - Boss Start
//----------------------------------------------
Event(20020111, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
});

//----------------------------------------------
// Oceiros, the Consumed King - Boss Start
//----------------------------------------------
Event(20020112, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
});

//----------------------------------------------
// Dragonslayer Armour - Boss Start
//----------------------------------------------
Event(20020113, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
});

//----------------------------------------------
// Ancient Wyvern - Boss Start
//----------------------------------------------
Event(20020114, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
});

//----------------------------------------------
// Nameless King - Boss Start
//----------------------------------------------
Event(20020115, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
});

//----------------------------------------------
// Champion Gundyr - Boss Start
//----------------------------------------------
Event(20020116, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    
    // Skip if not in Gauntlet mode
    SkipIfEventFlag(2, OFF, TargetEventFlagType.EventFlag, 25009850);
    IfCharacterHPRatio(MAIN, 10000, ComparisonType.LessOrEqual, 0, ComparisonType.Equal, 1);
    SetMapCeremony(40, 0, 0);
});

//----------------------------------------------
// Twin Princes - Boss Start
//----------------------------------------------
Event(20020117, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    
});

//----------------------------------------------
// Soul of Cinder - Boss Start
//----------------------------------------------
Event(20020118, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);

});

//----------------------------------------------
// Sister Friede - Boss Start
//----------------------------------------------
Event(20020119, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
 
});

//----------------------------------------------
// Lordran Remnants - Boss Start
//----------------------------------------------
Event(20020120, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    
});

//----------------------------------------------
// Demon Prince - Boss Start
//----------------------------------------------
Event(20020121, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);

});

//----------------------------------------------
// Darkeater Midir - Boss Start
//----------------------------------------------
Event(20020122, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    
});

//----------------------------------------------
// Slave Knight Gael - Boss Start
//----------------------------------------------
Event(20020123, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);

});

//----------------------------------------------
// Halflight - Boss Start
//----------------------------------------------
Event(20020124, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);

});

//----------------------------------------------
// Prince Dorthinus - Boss Start
//----------------------------------------------
Event(20020125, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);

});

//----------------------------------------------
// Cathedral Guardian - Boss Start
//----------------------------------------------
Event(20020126, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);

});

//----------------------------------------------
// Mirror Knight - Boss Start
//----------------------------------------------
Event(20020127, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);

});

//----------------------------------------------
// Aborr - Boss Start
//----------------------------------------------
Event(20020128, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);

});

//----------------------------------------------
// Princess Yngvil - Boss Start
//----------------------------------------------
Event(20020129, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);

});

//----------------------------------------------
// Trio of Explorers - Boss Start
//----------------------------------------------
Event(20020130, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);

});

//----------------------------------------------
// Twisted Knight - Boss Start
//----------------------------------------------
Event(20020131, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);

});

//----------------------------------------------
// Fallen Protector - Boss Start
//----------------------------------------------
Event(20020132, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);

});

//----------------------------------------------
// UNUSED - Boss Start
//----------------------------------------------
Event(20020133, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);

});

//----------------------------------------------
// The Marauder - Boss Start
//----------------------------------------------
Event(20020134, Default, function() {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);

});

//----------------------------------------------
// Region Warp
// <entity id>, <warp point id>, <trigger region id>, <ffx id>, <dummy poly id>
//----------------------------------------------
Event(20021000, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    IfInoutsideArea(OR_01, InsideOutsideState.Inside, X0_4, X8_4, 1)
    IfConditionGroup(MAIN, PASS, OR_01);
    
    SetCharacterGravity(X0_4, Disabled)
    WarpCharacterAndCopyFloor(X0_4, TargetEntityType.Area, X4_4, -1, X0_4);
    WaitFixedTimeSeconds(0.1);
    
    SpawnOneshotSFX(TargetEntityType.Character, X0_4, X16_4, X12_4);
    SetCharacterGravity(X0_4, Enabled)
    
    EndUnconditionally(EventEndType.Restart)
});

//----------------------------------------------
// Object Warp
// <entity id>, <object id>, <action param id>, <warp point id>, <ffx id>, <dummy poly id>
//----------------------------------------------
Event(20021001, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4) {
    IfActionButtonInArea(OR_01, X8_4, X4_4);
    IfConditionGroup(MAIN, PASS, OR_01);
    
    SetCharacterGravity(X0_4, Disabled)
    WarpCharacterAndCopyFloor(X0_4, TargetEntityType.Area, X12_4, -1, X0_4);
    WaitFixedTimeSeconds(0.1);
    
    SpawnOneshotSFX(TargetEntityType.Character, X0_4, X20_4, X16_4);
    SetCharacterGravity(X0_4, Enabled)
    
    EndUnconditionally(EventEndType.Restart)
});

//----------------------------------------------
// Damage Warp
// <entity id>, <warp point id>, <target id>, <ffx id>, <dummy poly id>
//----------------------------------------------
Event(20021002, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    IfCharacterDamagedBy(OR_01, X8_4, X0_4);
    IfConditionGroup(MAIN, PASS, OR_01);
    
    SetCharacterGravity(X0_4, Disabled)
    WarpCharacterAndCopyFloor(X0_4, TargetEntityType.Area, X4_4, -1, X0_4);
    WaitFixedTimeSeconds(0.1);
    
    SpawnOneshotSFX(TargetEntityType.Character, X0_4, X16_4, X12_4);
    SetCharacterGravity(X0_4, Enabled)
    
    EndUnconditionally(EventEndType.Restart)
});

//----------------------------------------------
// Region Warp - Trial
// <entity id>, <warp point id>, <trigger region id>
//----------------------------------------------
Event(20021005, Restart, function(X0_4, X4_4, X8_4) {
    IfInoutsideArea(OR_01, InsideOutsideState.Inside, X0_4, X8_4, 1)
    IfConditionGroup(MAIN, PASS, OR_01);
    WarpCharacterAndCopyFloor(X0_4, TargetEntityType.Area, X4_4, -1, X0_4);
    WaitFixedTimeSeconds(0.1);
    
    EndUnconditionally(EventEndType.Restart)
});

//----------------------------------------------
// Estus Pot
// <object id>, <area entity id>, <ffx id>, <ffx drink id>, <speffect id>
//----------------------------------------------
Event(20040000, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    SetNetworkSyncState(Disabled);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventIDSlotNumber, 0);
    CreateObjectfollowingSFX(X0_4, 200, X8_4);
    CreateObjectfollowingSFX(X0_4, 200, 60);
    IfActionButtonInArea(MAIN, 9600, X4_4);
    ForceAnimationPlayback(10000, 60070, false, false, false, 0, 1); // Drink
    WaitFixedTimeSeconds(0.2);
    SpawnOneshotSFX(TargetEntityType.Character, 10000, 220, X12_4);
    PlaySE(10000, SoundType.c_CharacterMotion, 999999988);
    SetSpeffect(10000, X16_4);
    DeleteObjectfollowingSFX(X0_4, true);
});

//----------------------------------------------
// Read Engraving
//----------------------------------------------
Event(20050010, Restart, function(X0_4, X4_4, X8_4) {
    SetNetworkSyncState(Disabled);
    IfActionButtonInArea(MAIN, X8_4, X4_4);
    DisplayEpitaphMessage(X0_4);
    WaitFixedTimeSeconds(3);
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Check Player Death for Firelink Return
//----------------------------------------------
Event(20060001, Restart, function() {
    IfCharacterHPRatio(MAIN, 10000, ComparisonType.LessOrEqual, 0, ComparisonType.Equal, 1);
    SetMapCeremony(40, 0, 0);
});

//----------------------------------------------
// Summon Setup
// <summon flag, <dismiss flag>, <entity id>, <spawn point id>
//----------------------------------------------
Event(20070000, Default, function(X0_4, X4_4, X8_4, X12_4) {
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    SetNetworkUpdateAuthority(X8_4, AuthorityLevel.Forced);
    
    IfPlayerIsNotInOwnWorldExcludesArena(AND_01, false);
    IfCharacterHasSpeffect(AND_01, 10000, 490, true, ComparisonType.Equal, 1);
    IfCharacterBackreadStatus(AND_01, X8_4, true, ComparisonType.Equal, 1);
    IfEntityInoutsideRadiusOfEntity(AND_01, InsideOutsideState.Inside, X8_4, 10000, 10, 1);
    IfConditionGroup(MAIN, PASS, AND_01);
    
    PlaceNPCSummonSign(SummonSignType.WhiteSign, X8_4, X12_4, X0_4, X4_4);
});

//----------------------------------------------
// Summon Setup - Apperance
// <summon flag, <dismiss flag>, <trigger flag>, <entity id>
//----------------------------------------------
Event(20070001, Default, function(X0_4, X4_4, X8_4) {
    ChangeCharacterEnableState(X8_4, Disabled);
    SetCharacterAnimationState(X8_4, Disabled);
    SetCharacterAIState(X8_4, Disabled);
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X4_4);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(MAIN, PASS, OR_01);
    ChangeCharacterEnableState(X8_4, Enabled);
    SetCharacterAnimationState(X8_4, Enabled);
    SetCharacterAIState(X8_4, Enabled);
    SetCharacterDefaultBackreadState(X8_4, Enabled);
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X4_4);
    SetCharacterDefaultBackreadState(X8_4, Disabled);
});

//----------------------------------------------
// Summon Setup - Player Check (If Dead)
// 
//----------------------------------------------
Event(20070002, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X4_4);
    IfCharacterType(AND_01, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X12_4, 1);
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X0_4);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, AND_01);
    IfCharacterType(AND_02, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfInoutsideArea(AND_02, InsideOutsideState.Inside, 10000, X12_4, 1);
    IfEventFlag(AND_02, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(MAIN, PASS, AND_02);
    RequestCharacterAICommand(X8_4, 10, 0);
    RequestCharacterAIReplan(X8_4);
    EndUnconditionally(EventEndType.Restart);
    Label0();
    IfCharacterType(AND_03, 10000, TargetType.Alive, ComparisonType.Equal, 1);
    IfInoutsideArea(AND_03, InsideOutsideState.Outside, 10000, X12_4, 1);
    IfEventFlag(AND_04, ON, TargetEventFlagType.EventFlag, X4_4);
    IfEventFlag(AND_05, ON, TargetEventFlagType.EventFlag, X0_4);
    IfConditionGroup(OR_01, PASS, AND_03);
    IfConditionGroup(OR_01, PASS, AND_04);
    IfConditionGroup(AND_06, PASS, OR_01);
    IfConditionGroup(AND_06, PASS, AND_05);
    IfConditionGroup(MAIN, PASS, AND_06);
    IfEventFlag(AND_07, ON, TargetEventFlagType.EventFlag, X4_4);
    EndIfConditionGroupStateUncompiled(EventEndType.End, PASS, AND_07);
    RequestCharacterAICommand(X8_4, -1, 0);
    RequestCharacterAIReplan(X8_4);
    WaitFixedTimeFrames(1);
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Curse - Curse of Attraction
// <entity id>, <trigger flag>
//----------------------------------------------
Event(20081000, Restart, function(X0_4, X4_4) {
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X4_4);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, OR_01);
    ChangeCharacterEnableState(X0_4, Disabled);
    SetCharacterAnimationState(X0_4, Disabled);
    GotoUnconditionally(Label.LABEL1)
    
    Label0();
    ChangeCharacterEnableState(X0_4, Enabled);
    SetCharacterAnimationState(X0_4, Enabled);
    SetCharacterAIState(X0_4, Enabled);
    SetNetworkUpdateRate(X0_4, true, CharacterUpdateFrequency.AlwaysUpdate);

    GotoUnconditionally(Label.LABEL1)
    
    Label1();
    IfDamageType(MAIN, X0_4, 10000, DamageType.Unspecified);
    WaitFixedTimeSeconds(0.1);
    RequestCharacterAIReplan(X0_4);
});

//----------------------------------------------
// Curse - Disabled Enemies
// <entity id>, <trigger flag>
//----------------------------------------------
Event(20081001, Restart, function(X0_4, X4_4) {
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X4_4);
    ChangeCharacterEnableState(X0_4, Disabled);
    SetCharacterAnimationState(X0_4, Disabled);
    SetCharacterBackreadState(X0_4, true);
});

//----------------------------------------------
// Curse - Add SpEffect
// <entity id>, <speffect id>, <trigger flag>
//----------------------------------------------
Event(20081010, Restart, function(X0_4, X4_4, X8_4) {
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X8_4);
    SetSpeffect(X0_4, X4_4);
    
    IfEventFlag(MAIN, OFF, TargetEventFlagType.EventFlag, X8_4);
    ClearSpeffect(X0_4, X4_4);
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Curse - Add Random SpEffect
// <entity id>, <speffect id>, <trigger flag>
//----------------------------------------------
Event(20081011, Restart, function(X0_4, X4_4, X8_4) {
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X8_4);
    SetSpeffect(X0_4, X4_4);
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Company of Champions - Add SpEffect
// <entity id>, <speffect id>, <trigger flag>
//----------------------------------------------
Event(20081020, Restart, function(X0_4, X4_4, X8_4) {
    IfCharacterHasSpeffect(AND_01, 10000, X4_4, true, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, PASS, AND_01);
    SetSpeffect(X0_4, X8_4);
    
    IfCharacterHasSpeffect(AND_02, 10000, X4_4, true, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, FAIL, AND_02);
    ClearSpeffect(X0_4, X8_4);
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Enemy - Award Itemlot - Special Boss Case
// <entity id>, <itemlot id>, <speffect id>
//----------------------------------------------
Event(20005352, Restart, function(X0_4, X4_4, X8_4) {
    IfCharacterHPRatio(MAIN, X0_4, ComparisonType.LessOrEqual, 0, ComparisonType.Equal, 1);
    
    WaitFixedTimeSeconds(5);
    
    AwardItemLot(X4_4);
    SetSpeffect(10000, X8_4);
    
    EndUnconditionally(EventEndType.End);
});

//----------------------------------------------
// Boss - Warp System
// <boss defeat flag>, <player>, <entity>, <trap zone>, <player zone>, <warp spot>
//----------------------------------------------
Event(20005353, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, X4_4, X16_4, 1); // Player is in player zone
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, X8_4, X12_4, 1); // Entity is in trap zone
    IfConditionGroup(MAIN, PASS, AND_01);
    
    // Allow a grace period
    WaitFixedTimeSeconds(3.0);
    
    // If player/boss has moved, reset loop
    IfInoutsideArea(OR_01, InsideOutsideState.Outside, X4_4, X16_4, 1); // Player is in player zone
    IfInoutsideArea(OR_01, InsideOutsideState.Outside, X8_4, X12_4, 1); // Entity is in trap zone
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, PASS, OR_01);
    
    // Otherwise, warp boss to spot
    SpawnOneshotSFX(TargetEntityType.Character, X8_4, X24_4, X28_4);
    WaitFixedTimeSeconds(0.1);
    
    WarpCharacterAndCopyFloor(X8_4, TargetEntityType.Area, X20_4, -1, X20_4);
    
    WaitFixedTimeSeconds(0.1);
    SpawnOneshotSFX(TargetEntityType.Character, X8_4, X24_4, X28_4);
    
    Label0();
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Talk Menu - Setup
// <entity id>
//----------------------------------------------
Event(20081030, Default, function(X0_4) {
    SetCharacterAIState(X0_4, Disabled);
    SetCharacterGravity(X0_4, Disabled);
    ChangeCharacterDispmask(X0_4, 0, OFF);
    ChangeCharacterDispmask(X0_4, 1, OFF);
    ChangeCharacterDispmask(X0_4, 2, OFF);
    ChangeCharacterDispmask(X0_4, 3, OFF);
    ChangeCharacterDispmask(X0_4, 4, OFF);
    ChangeCharacterDispmask(X0_4, 5, OFF);
    ChangeCharacterDispmask(X0_4, 6, OFF);
    ChangeCharacterDispmask(X0_4, 7, OFF);
    ChangeCharacterDispmask(X0_4, 8, OFF);
    ChangeCharacterDispmask(X0_4, 9, OFF);
    ChangeCharacterDispmask(X0_4, 10, OFF);
    ChangeCharacterDispmask(X0_4, 11, OFF);
    ChangeCharacterDispmask(X0_4, 12, OFF);
    ChangeCharacterDispmask(X0_4, 13, OFF);
    ChangeCharacterDispmask(X0_4, 14, OFF);
    ChangeCharacterDispmask(X0_4, 15, OFF);
    ChangeCharacterDispmask(X0_4, 16, OFF);
    ChangeCharacterDispmask(X0_4, 17, OFF);
    ChangeCharacterDispmask(X0_4, 18, OFF);
});

//----------------------------------------------
// Primordial Drops - Guaranteed, Hard, Med, Easy
// <itemlot id>, <itemlot id>, <itemlot id>, <itemlot id>
//----------------------------------------------
Event(20081100, Default, function(X0_4, X4_4, X8_4, X12_4) {
    // Curse of Obscurity
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25000001);
    AwardItemLot(X4_4);
    
    // Curse of Vitality
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25000002);
    AwardItemLot(X4_4);
    
    // Curse of Pride
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25000004);
    AwardItemLot(X4_4);
    
    // Curse of Fortitude
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25000006);
    AwardItemLot(X4_4);
    
    // Curse of Wrath
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25000003);
    AwardItemLot(X8_4);

    // Curse of Gluttony
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25000007);
    AwardItemLot(X8_4);
    
    // Curse of Frailty
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25000008);
    AwardItemLot(X8_4);
    
    // Curse of Simplicity
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25000005);
    AwardItemLot(X12_4);

    // Curse of Enfeeblement
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25000009);
    AwardItemLot(X4_4);
    
    // Curse of Impermanence
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25000020);
    AwardItemLot(X12_4);
});

//----------------------------------------------
// Merchant - Idle Pose
// <disabled flag>, <entity id>, <anim id>
//----------------------------------------------
Event(20081200, Default, function(X0_4, X4_4, X8_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    ForceAnimationPlayback(X4_4, X8_4, false, false, false, 0, 1);
    EndUnconditionally(EventEndType.End);
});

//----------------------------------------------
// Merchant - Hostility
// <disabled flag>, <entity id>, <anim id>
//----------------------------------------------
Event(20081210, Default, function(X0_4, X4_4) {
    SetCharacterAIState(X4_4, Disabled);
    
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    IfCharacterDamagedBy(AND_01, X4_4, 10000);
    IfConditionGroup(MAIN, PASS, AND_01);

    SpawnOneshotSFX(TargetEntityType.Character, X4_4, 100, 105);

    // Disable
    ChangeCharacterEnableState(X4_4, Disabled);
    SetCharacterAnimationState(X4_4, Disabled);
    
    WaitFixedTimeSeconds(5.0);
    
    SpawnOneshotSFX(TargetEntityType.Character, X4_4, 100, 105);
    
    ChangeCharacterEnableState(X4_4, Enabled);
    SetCharacterAnimationState(X4_4, Enabled);
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Merchant - Disable based on flag
// <sent flag>, <entity id>
//----------------------------------------------
Event(20081220, Restart, function(X0_4, X4_4, X8_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X8_4);
    
    SetCharacterAIState(X4_4, Disabled);
    ChangeCharacterEnableState(X4_4, Disabled);
    SetCharacterAnimationState(X4_4, Disabled);
});

//----------------------------------------------
// Merchant - Enable based on flag
// <sent flag>, <entity id>
//----------------------------------------------
Event(20081230, Restart, function(X0_4, X4_4, X8_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    
    SetCharacterAIState(X4_4, Disabled);
    ChangeCharacterEnableState(X4_4, Disabled);
    SetCharacterAnimationState(X4_4, Disabled);
    
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X8_4);
    
    SetCharacterAIState(X4_4, Enabled);
    ChangeCharacterEnableState(X4_4, Enabled);
    SetCharacterAnimationState(X4_4, Enabled);
});

//----------------------------------------------
// Merchant - Benjin - Enable based on flag
// <sent flag>, <entity id>
//----------------------------------------------
Event(20081231, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X0_4);
    
    SetCharacterAIState(X4_4, Disabled);
    ChangeCharacterEnableState(X4_4, Disabled);
    SetCharacterAnimationState(X4_4, Disabled);
    
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X8_4);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, X12_4);
    IfConditionGroup(MAIN, PASS, OR_01);
    
    SetCharacterAIState(X4_4, Enabled);
    ChangeCharacterEnableState(X4_4, Enabled);
    SetCharacterAnimationState(X4_4, Enabled);
});

//----------------------------------------------
// Intruder - Setup
// <entity id>, <trigger area id>, <ffx id>, <anim id>, <itemlot id>, <spawn msg id>, <death msg id>, <killed flag>
//----------------------------------------------
Event(20090010, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4) {
    ChangeCharacterEnableState(X0_4, Disabled);
    SetCharacterAnimationState(X0_4, Disabled);
    
    // End if X has been killed once already
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X28_4);
    
    // Trigger Invader if in region
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X4_4, 1); // Is in Region
    IfCharacterHasSpeffect(AND_01, 10000, 490, true, ComparisonType.Equal, 1); // Player is embered
    IfConditionGroup(MAIN, PASS, AND_01);
    WaitRandomTimeSeconds(1, 3);
    
    DisplayMessage(X20_4, 1);
    
    // Spawn
    SpawnOneshotSFX(TargetEntityType.Character, X0_4, 236, X8_4);
    ChangeCharacterEnableState(X0_4, Enabled);
    SetCharacterAnimationState(X0_4, Enabled);
    SetCharacterDefaultBackreadState(X0_4, Enabled);
    ForceAnimationPlayback(X0_4, X12_4, false, false, false, 0, 1);
    
    // Killed
    IfCharacterDeadalive(AND_01, X0_4, DeathState.Dead, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, PASS, AND_01);
    
    DisplayMessage(X24_4, 1);
    
    AwardItemLot(X16_4);
    SetCharacterDefaultBackreadState(X0_4, Disabled);
    
    SetEventFlag(X28_4, ON);
});

//----------------------------------------------
// Intruder - Setup - Conditional
// <entity id>, <trigger area id>, <ffx id>, <anim id>, <itemlot id>, <spawn msg id>, <death msg id>, <killed flag>, <conditional flag>
//----------------------------------------------
Event(20090011, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4, X32_4) {
    ChangeCharacterEnableState(X0_4, Disabled);
    SetCharacterAnimationState(X0_4, Disabled);
    
    // End if X has been killed once already
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X28_4);
    
    // Trigger Invader if in region
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X32_4); // Has conditional flag
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X4_4, 1); // Is in Region
    IfCharacterHasSpeffect(AND_01, 10000, 490, true, ComparisonType.Equal, 1); // Player is embered
    IfConditionGroup(MAIN, PASS, AND_01);
    WaitRandomTimeSeconds(1, 3);
    
    DisplayMessage(X20_4, 1);
    
    // Spawn
    SpawnOneshotSFX(TargetEntityType.Character, X0_4, 236, X8_4);
    ChangeCharacterEnableState(X0_4, Enabled);
    SetCharacterAnimationState(X0_4, Enabled);
    SetCharacterDefaultBackreadState(X0_4, Enabled);
    ForceAnimationPlayback(X0_4, X12_4, false, false, false, 0, 1);
    
    // Killed
    IfCharacterDeadalive(AND_01, X0_4, DeathState.Dead, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, PASS, AND_01);
    
    DisplayMessage(X24_4, 1);
    
    AwardItemLot(X16_4);
    SetCharacterDefaultBackreadState(X0_4, Disabled);
    
    SetEventFlag(X28_4, ON);
});

//----------------------------------------------
// Intruder - Kill Emote
// <entity id>, <animation id>
//----------------------------------------------
Event(20090020, Default, function(X0_4, X4_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    
    IfCharacterDeadalive(MAIN, 10000, DeathState.Dead, ComparisonType.Equal, 1);
    ForceAnimationPlayback(X0_4, X4_4, false, false, false, 0, 1);
    
    WaitFixedTimeSeconds(5);
    
    ForceAnimationPlayback(X0_4, 0, false, false, false, 0, 1);
});

//-------------------------------------------
// Phantom - Setup Summon
// <obj id>, <summoned flag>, <boss flag>, <action param>
//-------------------------------------------
Event(20090100, Default, function(X0_4, X4_4, X8_4, X12_4) {
    SetNetworkSyncState(Disabled);
    
    // Reset summoned flag
    SetEventFlag(X4_4, OFF);
    
    // Skip boss check if -1
    SkipIfComparison(1, ComparisonType.Equal, X8_4, -1);
    // End function if boss has already been killed
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X8_4);
    
    // End if not in own world
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, 25009850); // End if in Gauntlet Mode
    
    // Player is embered
    IfCharacterHasSpeffect(MAIN, 10000, 490, true, ComparisonType.Equal, 1);
    
    CreateObjectfollowingSFX(X0_4, 1, 30020);
    
    // Player has used prompt
    IfActionButtonInArea(MAIN, X12_4, X0_4);
    
    DeleteObjectfollowingSFX(X0_4, true);
    DeactivateObject(X4_4, Disabled);
    
    SetEventFlag(X4_4, ON);
});

//-------------------------------------------
// Phantom - Setup Phantom
// <entity id>, <summoned flag>, <gesture>, <msg>
//-------------------------------------------
Event(20090101, Default, function(X0_4, X4_4, X8_4, X12_4) {
    SetNetworkSyncState(Disabled);
    // Disable by default
    ChangeCharacterEnableState(X0_4, Disabled);
    SetCharacterAnimationState(X0_4, Disabled);
    SetCharacterAIState(X0_4, Disabled);
    // Skip if no invaders are present
    SkipIfNumberOfClientsOfType(1, ClientType.Invader, ComparisonType.Equal, 0);
    SetNetworkUpdateAuthority(X0_4, AuthorityLevel.Forced);
    
    // End if not in own world
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, 25009850); // End if in Gauntlet Mode
    
    // Delay the following checks so the summoned flag is reset before they are checked
    WaitFixedTimeSeconds(1.0);
    
    // Player is embered
    IfCharacterHasSpeffect(MAIN, 10000, 490, true, ComparisonType.Equal, 1);

    // Show illusion form
    //ChangeCharacterEnableState(X0_4, Disabled);
    //SetSpEffect(X0_4, 160803000);
    
    // Phantom is summoned
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, X4_4);

    // Spawn Phantom
    SpawnOneshotSFX(TargetEntityType.Character, X0_4, 236, 30320);
    ChangeCharacterEnableState(X0_4, Enabled);
    SetCharacterAnimationState(X0_4, Enabled);
    SetCharacterDefaultBackreadState(X0_4, Enabled);
    ForceAnimationPlayback(X0_4, 63010, false, false, false, 0, 1);
    
    ClearSpEffect(X0_4, 160803000);
    SetSpEffect(X0_4, 160803010);
    
    SkipIfComparison(1, ComparisonType.Equal, X12_4, -1);
    SetSpEffect(X0_4, X12_4);
    
    WaitFixedTimeSeconds(5.3);
    
    //ForceAnimationPlayback(X0_4, 80600, false, false, false, 0, 1);
    
    //WaitFixedTimeSeconds(3.7);
    
    ForceAnimationPlayback(X0_4, 0, false, false, false, 0, 1);
    
    SetCharacterAIState(X0_4, Enabled);
    
    IfCharacterHPRatio(MAIN, X0_4, ComparisonType.LessOrEqual, 0.0, ComparisonType.Equal, 1);
    
    DisplayMessage(X8_4, 1);
});

//-------------------------------------------
// Phantom - Boss Warp
// <summon flag>, <boss in battle flag>, <entity id>, <point id>
//-------------------------------------------
Event(20090102, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true); // End if player is a client
    
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, 25009850); // End if in Gauntlet Mode
    
    WaitFixedTimeSeconds(1.0);
    
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X0_4); // Summon is active
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X4_4); // Boss fight is in progress
    IfConditionGroup(MAIN, PASS, AND_01);
    
    WaitFixedTimeSeconds(2.0);
    
    WarpCharacterAndCopyFloor(X8_4, TargetEntityType.Area, X12_4, 0, X12_4);
});

//-------------------------------------------
// Phantom - Collision Transition Warp
// <summon flag>, <entity id>, <region id>, <point id>
//-------------------------------------------
Event(20090103, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true); // End if player is a client
    
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, 25009850); // End if in Gauntlet Mode
    
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X0_4); // Summon is active
    IfConditionGroup(MAIN, PASS, AND_01);
    
    IfInoutsideArea(MAIN, InsideOutsideState.Inside, X4_4, X8_4, 1);
    
    WarpCharacterAndCopyFloor(X4_4, TargetEntityType.Area, X12_4, 0, X12_4);
    
    WaitFixedTimeSeconds(2.0);
    
    EndUnconditionally(EventEndType.Restart);
});

//-------------------------------------------
// Phantom - Betray Player
// <summon flag>, <entity id>, <betrayer entity id>, <hp value>, 
//-------------------------------------------
Event(20090104, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    ChangeCharacterEnableState(X8_4, Disabled);
    SetCharacterAnimationState(X8_4, Disabled);
    SetCharacterAIState(X8_4, Disabled);
    
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true); // End if player is a client
    
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, 25009850); // End if in Gauntlet Mode
    
    IfEventFlag(AND_01, ON, TargetEventFlagType.EventFlag, X0_4); // Summon is active
    IfConditionGroup(MAIN, PASS, AND_01);
    
    // Player is below 50% HP
    IfCharacterHPRatio(MAIN, 10000, ComparisonType.LessOrEqual, 0.3, ComparisonType.Equal, 1);
    
    DisplayMessage(X12_4, 1);
    
    ChangeCharacterEnableState(X4_4, Disabled);
    SetCharacterAnimationState(X4_4, Disabled);
    SetCharacterAIState(X4_4, Disabled);
    
    ChangeCharacterEnableState(X8_4, Enabled);
    SetCharacterAnimationState(X8_4, Enabled);
    SetCharacterDefaultBackreadState(X8_4, Enabled);
    
    SetSpEffect(X8_4, 160803020);
    SetCharacterAIState(X8_4, Enabled);
    
    // Play FFX on player
    SpawnOneshotSFX(TargetEntityType.Character, 10000, 233, 527006);
    
    WarpCharacterAndCopyFloor(X8_4, TargetEntityType.Character, 10000, 271, 10000);
});

//----------------------------------------------
// NPC - Talk Toggle
//----------------------------------------------
Event(20090300, Default, function(X0_4, X4_4) {
    IfCharacterDamagedBy(AND_01, X0_4, 10000);
    IfConditionGroup(MAIN, PASS, AND_01);
    
    ChangeCharacterEnableState(X4_4, Disabled);
});

// ----------------------------------------
// Gesture - Item Treasure
// <gesture speffect>, <trigger ID>, <itemlot>, <item flag>
// ----------------------------------------
Event(20090400, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    EndIfEventFlag(EventEndType.End, ON, TargetEventFlagType.EventFlag, X12_4);
    
    IfInoutsideArea(AND_01, InsideOutsideState.Inside, 10000, X4_4, 1);
    IfCharacterHasSpeffect(AND_01, 10000, X0_4, true, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, PASS, AND_01);
    
    AwardItemLot(X8_4);
    
    EndUnconditionally(EventEndType.End);
});

// ----------------------------------------
// Trigger Zone - Apply SpEffect
// <trigger zone id>, <SpEffect ID>
// ----------------------------------------
Event(20090500, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    IfInoutsideArea(MAIN, InsideOutsideState.Inside, 10000, X0_4, 1);
    SetSpeffect(10000, X4_4);
    WaitFixedTimeSeconds(0.8);
    EndUnconditionally(EventEndType.Restart);
});

// ----------------------------------------
// Hop Point
// <mantle obj id>
// ----------------------------------------
Event(20090600, Restart, function(X0_4) {
    SetNetworkSyncState(Disabled);
    IfActionButtonInArea(MAIN, 20000, X0_4);
    SetSpEffect(10000, 112410);
    EndUnconditionally(EventEndType.Restart);
});

// ----------------------------------------
// Leap Point
// <mantle obj id>
// ----------------------------------------
Event(20090601, Restart, function(X0_4) {
    SetNetworkSyncState(Disabled);
    IfActionButtonInArea(MAIN, 20001, X0_4);
    SetSpEffect(10000, 112411);
    EndUnconditionally(EventEndType.Restart);
});

// ----------------------------------------
// Gauntlet - Return Zone
// <id>
// ----------------------------------------
Event(20090800, Restart, function(X0_4) {
    var flag_GauntletMode = 25009850;
   
    EndIfEventFlag(EventEndType.End, OFF, TargetEventFlagType.EventFlag, flag_GauntletMode);
    
    IfInoutsideArea(MAIN, InsideOutsideState.Inside, 10000, X0_4, 1);
    
    SetMapCeremony(40, 0, 0);
    WarpPlayer(40, 0, 4000970); // Firelink Shrine
});

// ----------------------------------------
// Gauntlet - Firelink Setup
// <id>
// ----------------------------------------
Event(20090810, Restart, function(X0_4, X4_4, X8_4, X12_4) {
    var flag_GauntletMode = 25009850;
    
    // Disable Gauntlet fogwalls
    DeactivateObject(X0_4, Disabled);
    DeleteObjectfollowingSFX(X0_4, true);
    DeactivateObject(X4_4, Disabled);
    DeleteObjectfollowingSFX(X4_4, true);
    DeactivateObject(X8_4, Disabled);
    DeleteObjectfollowingSFX(X8_4, true);
    DeactivateObject(X12_4, Disabled);
    DeleteObjectfollowingSFX(X12_4, true);
    
    EndIfEventFlag(EventEndType.End, OFF, TargetEventFlagType.EventFlag, flag_GauntletMode);
    
    SetPlayerRespawnPoint(4002950);
    
    // Enable Gauntlet fogwalls
    DeactivateObject(X0_4, Enabled);
    DeleteObjectfollowingSFX(X0_4, true);
    CreateObjectfollowingSFX(X0_4, 101, 3);
    DeactivateObject(X4_4, Enabled);
    DeleteObjectfollowingSFX(X4_4, true);
    CreateObjectfollowingSFX(X4_4, 101, 3);
    DeactivateObject(X8_4, Enabled);
    DeleteObjectfollowingSFX(X8_4, true);
    CreateObjectfollowingSFX(X8_4, 101, 3);
    DeactivateObject(X12_4, Enabled);
    DeleteObjectfollowingSFX(X12_4, true);
    CreateObjectfollowingSFX(X12_4, 101, 3);
});

//----------------------------------------------
// Spell Summon - Appearance Monitor
// <entity id>
// This handles forced desummoning for a spell summon
//----------------------------------------------
Event(20080000, Restart, function(X0_4) {
    // Check if the companion has none of the activity timers
    IfCharacterHasSpeffect(AND_01, X0_4, 160761600, false, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, PASS, AND_01);

    // Disable companion
    ChangeCharacterEnableState(X0_4, Disabled);
    SetCharacterAnimationState(X0_4, Disabled);
    SetCharacterAIState(X0_4, Disabled);
    
    //SpawnOneshotSFX(TargetEntityType.Character, X0_4, 203, 524023); // Spawn FFX
    
    // Wait until timer is reapplied
    IfCharacterHasSpeffect(AND_02, X0_4, 160761600, true, ComparisonType.Equal, 1);
    IfConditionGroup(MAIN, PASS, AND_02);
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Bonfire Rest
//----------------------------------------------
Event(20080001, Restart, function(X0_4) {
    // Reset activity timers if the player rests at a bonfire
    ClearSpeffect(X0_4, 160761600);
});

//----------------------------------------------
// Spell Summon - Summoning
// <entity id>, <trigger speffect>, <level scaling speffect>, <map id>, <block id>
//----------------------------------------------
Event(20080004, Restart, function(X0_4, X4_4, X8_4, X12_1, X16_1) {
    EndIfPlayerIsNotInOwnWorldExcludesArena(EventEndType.End, true);
    
    IfPlayerInoutMap(AND_01, true, X12_1, X16_1);
    IfCharacterHasSpeffect(AND_01, 10000, X4_4, true, ComparisonType.Equal, 1); // Item used
    WaitForConditionGroupState(PASS, AND_01);
    
    // Conjurator's Pact boost
    SkipIfCharacterHasSpeffect(2, 10000, 160101702, false, ComparisonType.Equal, 1);
    SetSpeffect(X0_4, 160761100);
    GotoUnconditionally(Label.LABEL2);
    
    SkipIfCharacterHasSpeffect(2, 10000, 160101712, false, ComparisonType.Equal, 1);
    SetSpeffect(X0_4, 160761101);
    GotoUnconditionally(Label.LABEL2);
    
    SkipIfCharacterHasSpeffect(2, 10000, 160101722, false, ComparisonType.Equal, 1);
    SetSpeffect(X0_4, 160761102);
    GotoUnconditionally(Label.LABEL2);
    
    SkipIfCharacterHasSpeffect(2, 10000, 160101732, false, ComparisonType.Equal, 1);
    SetSpeffect(X0_4, 160761103);
    GotoUnconditionally(Label.LABEL2);
    
    SkipIfCharacterHasSpeffect(2, 10000, 160101742, false, ComparisonType.Equal, 1);
    SetSpeffect(X0_4, 160761104);
    GotoUnconditionally(Label.LABEL2);

    Label2();
    
    // Disabled at 0% HP
    IfCharacterHPRatio(AND_02, X0_4, ComparisonType.LessOrEqual, 0.0, ComparisonType.Equal, 1);
    SkipIfConditionGroupStateUncompiled(2, FAIL, AND_02);
    DisplayEpitaphMessage(99030020);
    GotoUnconditionally(Label.LABEL1); // Skip setup if at 0 HP

    WaitFixedTimeSeconds(0.1);

    // Duration - Normal
    IfCharacterHasSpeffect(OR_02, 10000, 160603700, true, ComparisonType.Equal, 1);
    SkipIfConditionGroupStateUncompiled(2, PASS, OR_02);
    
    // Duration - Baseline
    SetSpEffect(X0_4, 160761600); // Activity Timer
    SetSpEffect(10000, 160761700); // Player - Spell Summon Active
    
    // Summon
    SetCharacterAIState(X0_4, Enabled);
    ChangeCharacterEnableState(X0_4, Enabled);
    SetCharacterAnimationState(X0_4, Enabled);
    
    SetSpeffect(X0_4, X8_4);        // Damage scaling
    SetSpeffect(X0_4, 160761000);   // Summon effect
    SetSpeffect(10000, 113010);     // FP Pause
    
    // Warp companion to player location
    WarpCharacterAndCopyFloor(X0_4, TargetEntityType.Character, 10000, 271, 10000);
    
    WaitFixedTimeSeconds(0.1);
    
    //SpawnOneshotSFX(TargetEntityType.Character, X0_4, 203, 524023); // Spawn FFX
    //PlaySE(10000, SoundType.v_Voice, 444444442); // Thud Shwing
    
    Label1();
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Spell Effects
// <entity id>
// This handles the interaction spells have with a spell summon
//----------------------------------------------
Event(20080002, Restart, function(X0_4) {
    // If Spell Summon isn't active, just jump to loop restart.
    IfCharacterHasSpeffect(OR_01, X0_4, 160761600, true, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, FAIL, OR_01);
    
    // Ferverous Ritual 
    IfCharacterHasSpeffect(AND_02, 10000, 160762010, true, ComparisonType.Equal, 1);
    SkipIfConditionGroupStateUncompiled(2, FAIL, AND_02);
    SetSpeffect(X0_4, 160762110);
    SetSpeffect(10000, 113010); // FP Pause
    
    // Major Restoration Ritual
    IfCharacterHasSpeffect(AND_03, 10000, 160762020, true, ComparisonType.Equal, 1);
    SkipIfConditionGroupStateUncompiled(2, FAIL, AND_03);
    SetSpeffect(X0_4, 160762120);
    SetSpeffect(10000, 113010); // FP Pause
    
    // Minor Restoration Ritual
    IfCharacterHasSpeffect(AND_04, 10000, 160762030, true, ComparisonType.Equal, 1);
    SkipIfConditionGroupStateUncompiled(2, FAIL, AND_04);
    SetSpeffect(X0_4, 160762130);
    SetSpeffect(10000, 113003); // FP Pause
    
    // Sacrificial Ritual
    IfCharacterHasSpeffect(AND_05, 10000, 160762040, true, ComparisonType.Equal, 1);
    SkipIfConditionGroupStateUncompiled(3, FAIL, AND_05);
    SetSpeffect(X0_4, 160762140);
    SetSpeffect(10000, 160762141);
    SetSpeffect(10000, 113005); // FP Pause
    
    // Banishing Ritual
    IfCharacterHasSpeffect(AND_06, 10000, 160762050, true, ComparisonType.Equal, 1);
    SkipIfConditionGroupStateUncompiled(2, FAIL, AND_06);
    ClearSpeffect(X0_4, 160761600);
    SetSpeffect(10000, 113003); // FP Pause
    
    Label0();
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Item Effects
// <entity id>
// This handles the ring effects that boost a Spell Summon
//----------------------------------------------
Event(20080003, Restart, function(X0_4) {
    // If Spell Summon isn't active, just jump to loop restart.
    IfCharacterHasSpeffect(OR_01, X0_4, 160761600, true, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, FAIL, OR_01);
    
    // Ring of Conjuration - ON
    SkipIfCharacterHasSpeffect(1, 10000, 160603710, false, ComparisonType.Equal, 1); // Skip if missing
    SetSpeffect(X0_4, 160764000);
    
    SkipIfCharacterHasSpeffect(1, 10000, 160603711, false, ComparisonType.Equal, 1); // Skip if missing
    SetSpeffect(X0_4, 160764001);
    
    SkipIfCharacterHasSpeffect(1, 10000, 160603712, false, ComparisonType.Equal, 1); // Skip if missing
    SetSpeffect(X0_4, 160764002);
    
    SkipIfCharacterHasSpeffect(1, 10000, 160603713, false, ComparisonType.Equal, 1); // Skip if missing
    SetSpeffect(X0_4, 160764003);
    
    SkipIfCharacterHasSpeffect(1, 10000, 160603714, false, ComparisonType.Equal, 1); // Skip if missing
    SetSpeffect(X0_4, 160764004);
    
    SkipIfCharacterHasSpeffect(1, 10000, 160603715, false, ComparisonType.Equal, 1); // Skip if missing
    SetSpeffect(X0_4, 160764005);
    
    // Ring of Conjuration - OFF
    SkipIfCharacterHasSpeffect(1, 10000, 160603710, true, ComparisonType.Equal, 1); // Skip if present
    ClearSpeffect(X0_4, 160764000);
    
    SkipIfCharacterHasSpeffect(1, 10000, 160603711, true, ComparisonType.Equal, 1); // Skip if present
    ClearSpeffect(X0_4, 160764001);
    
    SkipIfCharacterHasSpeffect(1, 10000, 160603712, true, ComparisonType.Equal, 1); // Skip if present
    ClearSpeffect(X0_4, 160764002);
    
    SkipIfCharacterHasSpeffect(1, 10000, 160603713, true, ComparisonType.Equal, 1); // Skip if present
    ClearSpeffect(X0_4, 160764003);
    
    SkipIfCharacterHasSpeffect(1, 10000, 160603714, true, ComparisonType.Equal, 1); // Skip if present
    ClearSpeffect(X0_4, 160764004);
    
    SkipIfCharacterHasSpeffect(1, 10000, 160603715, true, ComparisonType.Equal, 1); // Skip if present
    ClearSpeffect(X0_4, 160764005);

    Label0();
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Skeleton
//----------------------------------------------
Event(20080010, Restart, function(X0_4) {
    // If Spell Summon isn't active, just jump to loop restart.
    IfCharacterHasSpeffect(OR_01, X0_4, 160761600, true, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, FAIL, OR_01);
    
    // Mark of Attraction - Force Replan
    SkipIfCharacterHasSpEffect(1, 10000, 160762151, false, ComparisonType.Equal, 1);
    RequestCharacterAIReplan(X0_4);
    
    Label0();
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Skeleton - Visual Emission/Visual Arua
//----------------------------------------------
Event(20080011, Restart, function(X0_4) {
    // If Spell Summon isn't active, just jump to loop restart.
    IfCharacterHasSpeffect(OR_01, X0_4, 160761600, true, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, FAIL, OR_01);
    
    // Visual Emission: Fire
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007700);
    SetSpEffect(X0_4, 160760400);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007701);
    SetSpEffect(X0_4, 160760401);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007702);
    SetSpEffect(X0_4, 160760402);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007703);
    SetSpEffect(X0_4, 160760403);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007704);
    SetSpEffect(X0_4, 160760404);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007705);
    SetSpEffect(X0_4, 160760405);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007706);
    SetSpEffect(X0_4, 160760406);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007707);
    SetSpEffect(X0_4, 160760407);
    
    // Visual Emission:
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007708);
    SetSpEffect(X0_4, 160760408);
    
    // Visual Aura: Red
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007710);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007709); // Toggle OFF
    SetSpEffect(X0_4, 160760450);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007709); // Toggle ON
    SetSpEffect(X0_4, 160760520);
    
    // Visual Aura: Orange
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007711);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007709); // Toggle OFF
    SetSpEffect(X0_4, 160760451);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007709); // Toggle ON
    SetSpEffect(X0_4, 160760521);
    
    // Visual Aura: Yellow
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007712);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007709); // Toggle OFF
    SetSpEffect(X0_4, 160760452);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007709); // Toggle ON
    SetSpEffect(X0_4, 160760522);
    
    // Visual Aura: Green
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007713);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007709); // Toggle OFF
    SetSpEffect(X0_4, 160760453);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007709); // Toggle ON
    SetSpEffect(X0_4, 160760523);
    
    // Visual Aura: Cyan
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007714);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007709); // Toggle OFF
    SetSpEffect(X0_4, 160760454);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007709); // Toggle ON
    SetSpEffect(X0_4, 160760524);
    
    // Visual Aura: Blue
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007715);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007709); // Toggle OFF
    SetSpEffect(X0_4, 160760455);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007709); // Toggle ON
    SetSpEffect(X0_4, 160760525);
    
    // Visual Aura: Indigo
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007716);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007709); // Toggle OFF
    SetSpEffect(X0_4, 160760456);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007709); // Toggle ON
    SetSpEffect(X0_4, 160760526);
    
    // Visual Aura: Violet
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007717);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007709); // Toggle OFF
    SetSpEffect(X0_4, 160760457);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007709); // Toggle ON
    SetSpEffect(X0_4, 160760527);
    
    // Visual Aura: Pink
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007718);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007709); // Toggle OFF
    SetSpEffect(X0_4, 160760458);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007709); // Toggle ON
    SetSpEffect(X0_4, 160760528);
    
    Label0();
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Skeleton - Rainbow Visual Aura
//----------------------------------------------
Event(20080012, Restart, function(X0_4) {
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, 25007719);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007709); // Toggle OFF
    SetSpEffect(X0_4, 160760470);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007709); // Toggle ON
    SetSpEffect(X0_4, 160760520);

    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007709); // Toggle OFF
    SetSpEffect(X0_4, 160760471);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007709); // Toggle ON
    SetSpEffect(X0_4, 160760521);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007709); // Toggle OFF
    SetSpEffect(X0_4, 160760472);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007709); // Toggle ON
    SetSpEffect(X0_4, 160760522);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007709); // Toggle OFF
    SetSpEffect(X0_4, 160760473);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007709); // Toggle ON
    SetSpEffect(X0_4, 160760523);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007709); // Toggle OFF
    SetSpEffect(X0_4, 160760474);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007709); // Toggle ON
    SetSpEffect(X0_4, 160760524);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007709); // Toggle OFF
    SetSpEffect(X0_4, 160760475);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007709); // Toggle ON
    SetSpEffect(X0_4, 160760525);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007709); // Toggle OFF
    SetSpEffect(X0_4, 160760476);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007709); // Toggle ON
    SetSpEffect(X0_4, 160760526);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007709); // Toggle OFF
    SetSpEffect(X0_4, 160760477);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007709); // Toggle ON
    SetSpEffect(X0_4, 160760527);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007709); // Toggle OFF
    SetSpEffect(X0_4, 160760478);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007709); // Toggle ON
    SetSpEffect(X0_4, 160760528);
    
    WaitFixedTimeSeconds(0.6);
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Hollow
//----------------------------------------------
Event(20080020, Restart, function(X0_4) {
    // If Spell Summon isn't active, just jump to loop restart.
    IfCharacterHasSpeffect(OR_01, X0_4, 160761600, true, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, FAIL, OR_01);
    
    // Mark of Attraction - Force Replan
    SkipIfCharacterHasSpEffect(1, 10000, 160762151, false, ComparisonType.Equal, 1);
    RequestCharacterAIReplan(X0_4);
    
    Label0();
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Hollow - Visual Emission/Visual Arua
//----------------------------------------------
Event(20080021, Restart, function(X0_4) {
    // If Spell Summon isn't active, just jump to loop restart.
    IfCharacterHasSpeffect(OR_01, X0_4, 160761600, true, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, FAIL, OR_01);
    
    // Visual Emission: Fire
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007720);
    SetSpEffect(X0_4, 160760400);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007721);
    SetSpEffect(X0_4, 160760401);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007722);
    SetSpEffect(X0_4, 160760402);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007723);
    SetSpEffect(X0_4, 160760403);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007724);
    SetSpEffect(X0_4, 160760404);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007725);
    SetSpEffect(X0_4, 160760405);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007726);
    SetSpEffect(X0_4, 160760406);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007727);
    SetSpEffect(X0_4, 160760407);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007728);
    SetSpEffect(X0_4, 160760408);
    
    // Visual Aura: Red
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007730);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007729); // Toggle OFF
    SetSpEffect(X0_4, 160760450);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007729); // Toggle ON
    SetSpEffect(X0_4, 160760500);
    
    // Visual Aura: Orange
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007731);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007729); // Toggle OFF
    SetSpEffect(X0_4, 160760451);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007729); // Toggle ON
    SetSpEffect(X0_4, 160760501);
    
    // Visual Aura: Yellow
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007732);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007729); // Toggle OFF
    SetSpEffect(X0_4, 160760452);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007729); // Toggle ON
    SetSpEffect(X0_4, 160760502);
    
    // Visual Aura: Green
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007733);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007729); // Toggle OFF
    SetSpEffect(X0_4, 160760453);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007729); // Toggle ON
    SetSpEffect(X0_4, 160760503);
    
    // Visual Aura: Cyan
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007734);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007729); // Toggle OFF
    SetSpEffect(X0_4, 160760454);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007729); // Toggle ON
    SetSpEffect(X0_4, 160760504);
    
    // Visual Aura: Blue
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007735);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007729); // Toggle OFF
    SetSpEffect(X0_4, 160760455);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007729); // Toggle ON
    SetSpEffect(X0_4, 160760505);
    
    // Visual Aura: Indigo
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007736);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007729); // Toggle OFF
    SetSpEffect(X0_4, 160760456);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007729); // Toggle ON
    SetSpEffect(X0_4, 160760506);
    
    // Visual Aura: Violet
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007737);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007729); // Toggle OFF
    SetSpEffect(X0_4, 160760457);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007729); // Toggle ON
    SetSpEffect(X0_4, 160760507);
    
    // Visual Aura: Pink
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007738);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007729); // Toggle OFF
    SetSpEffect(X0_4, 160760458);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007729); // Toggle ON
    SetSpEffect(X0_4, 160760508);
    
    Label0();
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Hollow - Rainbow Visual Aura
//----------------------------------------------
Event(20080022, Restart, function(X0_4) {
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, 25007739);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007729); // Toggle OFF
    SetSpEffect(X0_4, 160760470);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007729); // Toggle ON
    SetSpEffect(X0_4, 160760520);

    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007729); // Toggle OFF
    SetSpEffect(X0_4, 160760471);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007729); // Toggle ON
    SetSpEffect(X0_4, 160760521);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007729); // Toggle OFF
    SetSpEffect(X0_4, 160760472);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007729); // Toggle ON
    SetSpEffect(X0_4, 160760522);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007729); // Toggle OFF
    SetSpEffect(X0_4, 160760473);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007729); // Toggle ON
    SetSpEffect(X0_4, 160760523);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007729); // Toggle OFF
    SetSpEffect(X0_4, 160760474);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007729); // Toggle ON
    SetSpEffect(X0_4, 160760524);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007729); // Toggle OFF
    SetSpEffect(X0_4, 160760475);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007729); // Toggle ON
    SetSpEffect(X0_4, 160760525);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007729); // Toggle OFF
    SetSpEffect(X0_4, 160760476);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007729); // Toggle ON
    SetSpEffect(X0_4, 160760526);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007729); // Toggle OFF
    SetSpEffect(X0_4, 160760477);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007729); // Toggle ON
    SetSpEffect(X0_4, 160760527);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007729); // Toggle OFF
    SetSpEffect(X0_4, 160760478);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007729); // Toggle ON
    SetSpEffect(X0_4, 160760528);
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Hound
//----------------------------------------------
Event(20080030, Restart, function(X0_4) {
    // If Spell Summon isn't active, just jump to loop restart.
    IfCharacterHasSpeffect(OR_01, X0_4, 160761600, true, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, FAIL, OR_01);
    
    // Mark of Attraction - Force Replan
    SkipIfCharacterHasSpEffect(1, 10000, 160762151, false, ComparisonType.Equal, 1);
    RequestCharacterAIReplan(X0_4);
    
    Label0();
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Hound - Visual Emission/Visual Arua
//----------------------------------------------
Event(20080031, Restart, function(X0_4) {
    // If Spell Summon isn't active, just jump to loop restart.
    IfCharacterHasSpeffect(OR_01, X0_4, 160761600, true, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, FAIL, OR_01);
    
    // Visual Emission: Fire
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007740);
    SetSpEffect(X0_4, 160760400);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007741);
    SetSpEffect(X0_4, 160760401);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007742);
    SetSpEffect(X0_4, 160760402);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007743);
    SetSpEffect(X0_4, 160760403);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007744);
    SetSpEffect(X0_4, 160760404);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007745);
    SetSpEffect(X0_4, 160760405);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007746);
    SetSpEffect(X0_4, 160760406);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007747);
    SetSpEffect(X0_4, 160760407);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007748);
    SetSpEffect(X0_4, 160760408);
    
    // Visual Aura: Red
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007750);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007749); // Toggle OFF
    SetSpEffect(X0_4, 160760450);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007749); // Toggle ON
    SetSpEffect(X0_4, 160760500);
    
    // Visual Aura: Orange
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007751);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007749); // Toggle OFF
    SetSpEffect(X0_4, 160760451);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007749); // Toggle ON
    SetSpEffect(X0_4, 160760501);
    
    // Visual Aura: Yellow
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007752);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007749); // Toggle OFF
    SetSpEffect(X0_4, 160760452);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007749); // Toggle ON
    SetSpEffect(X0_4, 160760502);
    
    // Visual Aura: Green
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007753);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007749); // Toggle OFF
    SetSpEffect(X0_4, 160760453);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007749); // Toggle ON
    SetSpEffect(X0_4, 160760503);
    
    // Visual Aura: Cyan
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007754);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007749); // Toggle OFF
    SetSpEffect(X0_4, 160760454);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007749); // Toggle ON
    SetSpEffect(X0_4, 160760504);
    
    // Visual Aura: Blue
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007755);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007749); // Toggle OFF
    SetSpEffect(X0_4, 160760455);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007749); // Toggle ON
    SetSpEffect(X0_4, 160760505);
    
    // Visual Aura: Indigo
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007756);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007749); // Toggle OFF
    SetSpEffect(X0_4, 160760456);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007749); // Toggle ON
    SetSpEffect(X0_4, 160760506);
    
    // Visual Aura: Violet
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007757);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007749); // Toggle OFF
    SetSpEffect(X0_4, 160760457);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007749); // Toggle ON
    SetSpEffect(X0_4, 160760507);
    
    // Visual Aura: Pink
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007758);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007749); // Toggle OFF
    SetSpEffect(X0_4, 160760458);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007749); // Toggle ON
    SetSpEffect(X0_4, 160760508);
    
    Label0();
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Hound - Rainbow Visual Aura
//----------------------------------------------
Event(20080032, Restart, function(X0_4) {
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, 25007759);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007749); // Toggle OFF
    SetSpEffect(X0_4, 160760470);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007749); // Toggle ON
    SetSpEffect(X0_4, 160760520);

    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007749); // Toggle OFF
    SetSpEffect(X0_4, 160760471);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007749); // Toggle ON
    SetSpEffect(X0_4, 160760521);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007749); // Toggle OFF
    SetSpEffect(X0_4, 160760472);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007749); // Toggle ON
    SetSpEffect(X0_4, 160760522);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007749); // Toggle OFF
    SetSpEffect(X0_4, 160760473);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007749); // Toggle ON
    SetSpEffect(X0_4, 160760523);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007749); // Toggle OFF
    SetSpEffect(X0_4, 160760474);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007749); // Toggle ON
    SetSpEffect(X0_4, 160760524);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007749); // Toggle OFF
    SetSpEffect(X0_4, 160760475);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007749); // Toggle ON
    SetSpEffect(X0_4, 160760525);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007749); // Toggle OFF
    SetSpEffect(X0_4, 160760476);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007749); // Toggle ON
    SetSpEffect(X0_4, 160760526);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007749); // Toggle OFF
    SetSpEffect(X0_4, 160760477);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007749); // Toggle ON
    SetSpEffect(X0_4, 160760527);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007749); // Toggle OFF
    SetSpEffect(X0_4, 160760478);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007749); // Toggle ON
    SetSpEffect(X0_4, 160760528);
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Warrior
//----------------------------------------------
Event(20080040, Restart, function(X0_4) {
    // If Spell Summon isn't active, just jump to loop restart.
    IfCharacterHasSpeffect(OR_01, X0_4, 160761600, true, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, FAIL, OR_01);
    
    // Mark of Attraction - Force Replan
    SkipIfCharacterHasSpEffect(1, 10000, 160762151, false, ComparisonType.Equal, 1);
    RequestCharacterAIReplan(X0_4);
    
    Label0();
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Warrior - Visual Emission/Visual Arua
//----------------------------------------------
Event(20080041, Restart, function(X0_4) {
    // If Spell Summon isn't active, just jump to loop restart.
    IfCharacterHasSpeffect(OR_01, X0_4, 160761600, true, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, FAIL, OR_01);
    
    // Visual Emission: Fire
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007760);
    SetSpEffect(X0_4, 160760400);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007761);
    SetSpEffect(X0_4, 160760401);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007762);
    SetSpEffect(X0_4, 160760402);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007763);
    SetSpEffect(X0_4, 160760403);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007764);
    SetSpEffect(X0_4, 160760404);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007765);
    SetSpEffect(X0_4, 160760405);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007766);
    SetSpEffect(X0_4, 160760406);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007767);
    SetSpEffect(X0_4, 160760407);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007768);
    SetSpEffect(X0_4, 160760408);
    
    // Visual Aura: Red
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007770);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007769); // Toggle OFF
    SetSpEffect(X0_4, 160760450);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007769); // Toggle ON
    SetSpEffect(X0_4, 160760500);
    
    // Visual Aura: Orange
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007771);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007769); // Toggle OFF
    SetSpEffect(X0_4, 160760451);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007769); // Toggle ON
    SetSpEffect(X0_4, 160760501);
    
    // Visual Aura: Yellow
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007772);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007769); // Toggle OFF
    SetSpEffect(X0_4, 160760452);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007769); // Toggle ON
    SetSpEffect(X0_4, 160760502);
    
    // Visual Aura: Green
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007773);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007769); // Toggle OFF
    SetSpEffect(X0_4, 160760453);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007769); // Toggle ON
    SetSpEffect(X0_4, 160760503);
    
    // Visual Aura: Cyan
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007774);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007769); // Toggle OFF
    SetSpEffect(X0_4, 160760454);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007769); // Toggle ON
    SetSpEffect(X0_4, 160760504);
    
    // Visual Aura: Blue
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007775);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007769); // Toggle OFF
    SetSpEffect(X0_4, 160760455);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007769); // Toggle ON
    SetSpEffect(X0_4, 160760505);
    
    // Visual Aura: Indigo
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007776);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007769); // Toggle OFF
    SetSpEffect(X0_4, 160760456);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007769); // Toggle ON
    SetSpEffect(X0_4, 160760506);
    
    // Visual Aura: Violet
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007777);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007769); // Toggle OFF
    SetSpEffect(X0_4, 160760457);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007769); // Toggle ON
    SetSpEffect(X0_4, 160760507);
    
    // Visual Aura: Pink
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007778);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007769); // Toggle OFF
    SetSpEffect(X0_4, 160760458);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007769); // Toggle ON
    SetSpEffect(X0_4, 160760508);
    
    Label0();
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Warrior - Rainbow Visual Aura
//----------------------------------------------
Event(20080042, Restart, function(X0_4) {
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, 25007779);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007769); // Toggle OFF
    SetSpEffect(X0_4, 160760470);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007769); // Toggle ON
    SetSpEffect(X0_4, 160760520);

    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007769); // Toggle OFF
    SetSpEffect(X0_4, 160760471);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007769); // Toggle ON
    SetSpEffect(X0_4, 160760521);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007769); // Toggle OFF
    SetSpEffect(X0_4, 160760472);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007769); // Toggle ON
    SetSpEffect(X0_4, 160760522);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007769); // Toggle OFF
    SetSpEffect(X0_4, 160760473);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007769); // Toggle ON
    SetSpEffect(X0_4, 160760523);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007769); // Toggle OFF
    SetSpEffect(X0_4, 160760474);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007769); // Toggle ON
    SetSpEffect(X0_4, 160760524);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007769); // Toggle OFF
    SetSpEffect(X0_4, 160760475);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007769); // Toggle ON
    SetSpEffect(X0_4, 160760525);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007769); // Toggle OFF
    SetSpEffect(X0_4, 160760476);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007769); // Toggle ON
    SetSpEffect(X0_4, 160760526);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007769); // Toggle OFF
    SetSpEffect(X0_4, 160760477);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007769); // Toggle ON
    SetSpEffect(X0_4, 160760527);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007769); // Toggle OFF
    SetSpEffect(X0_4, 160760478);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007769); // Toggle ON
    SetSpEffect(X0_4, 160760528);
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Sentinel
//----------------------------------------------
Event(20080050, Restart, function(X0_4) {
    // If Spell Summon isn't active, just jump to loop restart.
    IfCharacterHasSpeffect(OR_01, X0_4, 160761600, true, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, FAIL, OR_01);
    
    // Mark of Attraction - Force Replan
    SkipIfCharacterHasSpEffect(1, 10000, 160762151, false, ComparisonType.Equal, 1);
    RequestCharacterAIReplan(X0_4);
    
    Label0();
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Sentinel - Visual Emission/Visual Arua
//----------------------------------------------
Event(20080051, Restart, function(X0_4) {
    // If Spell Summon isn't active, just jump to loop restart.
    IfCharacterHasSpeffect(OR_01, X0_4, 160761600, true, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, FAIL, OR_01);
    
    // Visual Emission: Fire
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007780);
    SetSpEffect(X0_4, 160760400);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007781);
    SetSpEffect(X0_4, 160760401);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007782);
    SetSpEffect(X0_4, 160760402);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007783);
    SetSpEffect(X0_4, 160760403);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007784);
    SetSpEffect(X0_4, 160760404);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007785);
    SetSpEffect(X0_4, 160760405);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007786);
    SetSpEffect(X0_4, 160760406);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007787);
    SetSpEffect(X0_4, 160760407);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007788);
    SetSpEffect(X0_4, 160760408);
    
    // Visual Aura: Red
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007790);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007789); // Toggle OFF
    SetSpEffect(X0_4, 160760450);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007789); // Toggle ON
    SetSpEffect(X0_4, 160760500);
    
    // Visual Aura: Orange
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007791);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007789); // Toggle OFF
    SetSpEffect(X0_4, 160760451);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007789); // Toggle ON
    SetSpEffect(X0_4, 160760501);
    
    // Visual Aura: Yellow
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007792);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007789); // Toggle OFF
    SetSpEffect(X0_4, 160760452);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007789); // Toggle ON
    SetSpEffect(X0_4, 160760502);
    
    // Visual Aura: Green
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007793);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007789); // Toggle OFF
    SetSpEffect(X0_4, 160760453);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007789); // Toggle ON
    SetSpEffect(X0_4, 160760503);
    
    // Visual Aura: Cyan
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007794);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007789); // Toggle OFF
    SetSpEffect(X0_4, 160760454);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007789); // Toggle ON
    SetSpEffect(X0_4, 160760504);
    
    // Visual Aura: Blue
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007795);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007789); // Toggle OFF
    SetSpEffect(X0_4, 160760455);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007789); // Toggle ON
    SetSpEffect(X0_4, 160760505);
    
    // Visual Aura: Indigo
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007796);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007789); // Toggle OFF
    SetSpEffect(X0_4, 160760456);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007789); // Toggle ON
    SetSpEffect(X0_4, 160760506);
    
    // Visual Aura: Violet
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007797);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007789); // Toggle OFF
    SetSpEffect(X0_4, 160760457);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007789); // Toggle ON
    SetSpEffect(X0_4, 160760507);
    
    // Visual Aura: Pink
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007798);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007789); // Toggle OFF
    SetSpEffect(X0_4, 160760458);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007789); // Toggle ON
    SetSpEffect(X0_4, 160760508);
    
    Label0();
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Sentinel - Rainbow Visual Aura
//----------------------------------------------
Event(20080052, Restart, function(X0_4) {
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, 25007799);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007789); // Toggle OFF
    SetSpEffect(X0_4, 160760470);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007789); // Toggle ON
    SetSpEffect(X0_4, 160760520);

    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007789); // Toggle OFF
    SetSpEffect(X0_4, 160760471);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007789); // Toggle ON
    SetSpEffect(X0_4, 160760521);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007789); // Toggle OFF
    SetSpEffect(X0_4, 160760472);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007789); // Toggle ON
    SetSpEffect(X0_4, 160760522);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007789); // Toggle OFF
    SetSpEffect(X0_4, 160760473);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007789); // Toggle ON
    SetSpEffect(X0_4, 160760523);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007789); // Toggle OFF
    SetSpEffect(X0_4, 160760474);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007789); // Toggle ON
    SetSpEffect(X0_4, 160760524);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007789); // Toggle OFF
    SetSpEffect(X0_4, 160760475);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007789); // Toggle ON
    SetSpEffect(X0_4, 160760525);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007789); // Toggle OFF
    SetSpEffect(X0_4, 160760476);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007789); // Toggle ON
    SetSpEffect(X0_4, 160760526);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007789); // Toggle OFF
    SetSpEffect(X0_4, 160760477);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007789); // Toggle ON
    SetSpEffect(X0_4, 160760527);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007789); // Toggle OFF
    SetSpEffect(X0_4, 160760478);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007789); // Toggle ON
    SetSpEffect(X0_4, 160760528);
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Lycanthrope
//----------------------------------------------
Event(20080060, Restart, function(X0_4) {
    // If Spell Summon isn't active, just jump to loop restart.
    IfCharacterHasSpeffect(OR_01, X0_4, 160761600, true, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, FAIL, OR_01);
    
    // Mark of Attraction - Force Replan
    SkipIfCharacterHasSpEffect(1, 10000, 160762151, false, ComparisonType.Equal, 1);
    RequestCharacterAIReplan(X0_4);
    
    Label0();
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Lycanthrope - Visual Emission/Visual Arua
//----------------------------------------------
Event(20080061, Restart, function(X0_4) {
    // If Spell Summon isn't active, just jump to loop restart.
    IfCharacterHasSpeffect(OR_01, X0_4, 160761600, true, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, FAIL, OR_01);
    
    // Visual Emission: Fire
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007800);
    SetSpEffect(X0_4, 160760400);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007801);
    SetSpEffect(X0_4, 160760401);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007802);
    SetSpEffect(X0_4, 160760402);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007803);
    SetSpEffect(X0_4, 160760403);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007804);
    SetSpEffect(X0_4, 160760404);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007805);
    SetSpEffect(X0_4, 160760405);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007806);
    SetSpEffect(X0_4, 160760406);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007807);
    SetSpEffect(X0_4, 160760407);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007808);
    SetSpEffect(X0_4, 160760408);
    
    // Visual Aura: Red
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007810);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007809); // Toggle OFF
    SetSpEffect(X0_4, 160760450);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007809); // Toggle ON
    SetSpEffect(X0_4, 160760500);
    
    // Visual Aura: Orange
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007811);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007809); // Toggle OFF
    SetSpEffect(X0_4, 160760451);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007809); // Toggle ON
    SetSpEffect(X0_4, 160760501);
    
    // Visual Aura: Yellow
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007812);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007809); // Toggle OFF
    SetSpEffect(X0_4, 160760452);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007809); // Toggle ON
    SetSpEffect(X0_4, 160760502);
    
    // Visual Aura: Green
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007813);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007809); // Toggle OFF
    SetSpEffect(X0_4, 160760453);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007809); // Toggle ON
    SetSpEffect(X0_4, 160760503);
    
    // Visual Aura: Cyan
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007814);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007809); // Toggle OFF
    SetSpEffect(X0_4, 160760454);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007809); // Toggle ON
    SetSpEffect(X0_4, 160760504);
    
    // Visual Aura: Blue
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007815);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007809); // Toggle OFF
    SetSpEffect(X0_4, 160760455);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007809); // Toggle ON
    SetSpEffect(X0_4, 160760505);
    
    // Visual Aura: Indigo
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007816);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007809); // Toggle OFF
    SetSpEffect(X0_4, 160760456);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007809); // Toggle ON
    SetSpEffect(X0_4, 160760506);
    
    // Visual Aura: Violet
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007817);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007809); // Toggle OFF
    SetSpEffect(X0_4, 160760457);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007809); // Toggle ON
    SetSpEffect(X0_4, 160760507);
    
    // Visual Aura: Pink
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007818);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007809); // Toggle OFF
    SetSpEffect(X0_4, 160760458);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007809); // Toggle ON
    SetSpEffect(X0_4, 160760508);
    
    Label0();
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Lycanthrope - Rainbow Visual Aura
//----------------------------------------------
Event(20080062, Restart, function(X0_4) {
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, 25007819);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007809); // Toggle OFF
    SetSpEffect(X0_4, 160760470);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007809); // Toggle ON
    SetSpEffect(X0_4, 160760520);

    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007809); // Toggle OFF
    SetSpEffect(X0_4, 160760471);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007809); // Toggle ON
    SetSpEffect(X0_4, 160760521);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007809); // Toggle OFF
    SetSpEffect(X0_4, 160760472);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007809); // Toggle ON
    SetSpEffect(X0_4, 160760522);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007809); // Toggle OFF
    SetSpEffect(X0_4, 160760473);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007809); // Toggle ON
    SetSpEffect(X0_4, 160760523);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007809); // Toggle OFF
    SetSpEffect(X0_4, 160760474);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007809); // Toggle ON
    SetSpEffect(X0_4, 160760524);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007809); // Toggle OFF
    SetSpEffect(X0_4, 160760475);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007809); // Toggle ON
    SetSpEffect(X0_4, 160760525);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007809); // Toggle OFF
    SetSpEffect(X0_4, 160760476);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007809); // Toggle ON
    SetSpEffect(X0_4, 160760526);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007809); // Toggle OFF
    SetSpEffect(X0_4, 160760477);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007809); // Toggle ON
    SetSpEffect(X0_4, 160760527);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007809); // Toggle OFF
    SetSpEffect(X0_4, 160760478);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007809); // Toggle ON
    SetSpEffect(X0_4, 160760528);
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Knight
//----------------------------------------------
Event(20080070, Restart, function(X0_4) {
    // If Spell Summon isn't active, just jump to loop restart.
    IfCharacterHasSpeffect(OR_01, X0_4, 160761600, true, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, FAIL, OR_01);
    
    // Mark of Attraction - Force Replan
    SkipIfCharacterHasSpEffect(1, 10000, 160762151, false, ComparisonType.Equal, 1);
    RequestCharacterAIReplan(X0_4);
    
    Label0();
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Knight - Visual Emission/Visual Arua
//----------------------------------------------
Event(20080071, Restart, function(X0_4) {
    // If Spell Summon isn't active, just jump to loop restart.
    IfCharacterHasSpeffect(OR_01, X0_4, 160761600, true, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, FAIL, OR_01);
    
    // Visual Emission: Fire
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007820);
    SetSpEffect(X0_4, 160760400);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007821);
    SetSpEffect(X0_4, 160760401);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007822);
    SetSpEffect(X0_4, 160760402);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007823);
    SetSpEffect(X0_4, 160760403);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007824);
    SetSpEffect(X0_4, 160760404);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007825);
    SetSpEffect(X0_4, 160760405);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007826);
    SetSpEffect(X0_4, 160760406);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007827);
    SetSpEffect(X0_4, 160760407);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007828);
    SetSpEffect(X0_4, 160760408);
    
    // Visual Aura: Red
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007830);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007829); // Toggle OFF
    SetSpEffect(X0_4, 160760450);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007829); // Toggle ON
    SetSpEffect(X0_4, 160760500);
    
    // Visual Aura: Orange
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007831);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007829); // Toggle OFF
    SetSpEffect(X0_4, 160760451);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007829); // Toggle ON
    SetSpEffect(X0_4, 160760501);
    
    // Visual Aura: Yellow
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007832);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007829); // Toggle OFF
    SetSpEffect(X0_4, 160760452);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007829); // Toggle ON
    SetSpEffect(X0_4, 160760502);
    
    // Visual Aura: Green
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007833);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007829); // Toggle OFF
    SetSpEffect(X0_4, 160760453);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007829); // Toggle ON
    SetSpEffect(X0_4, 160760503);
    
    // Visual Aura: Cyan
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007834);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007829); // Toggle OFF
    SetSpEffect(X0_4, 160760454);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007829); // Toggle ON
    SetSpEffect(X0_4, 160760504);
    
    // Visual Aura: Blue
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007835);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007829); // Toggle OFF
    SetSpEffect(X0_4, 160760455);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007829); // Toggle ON
    SetSpEffect(X0_4, 160760505);
    
    // Visual Aura: Indigo
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007836);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007829); // Toggle OFF
    SetSpEffect(X0_4, 160760456);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007829); // Toggle ON
    SetSpEffect(X0_4, 160760506);
    
    // Visual Aura: Violet
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007837);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007829); // Toggle OFF
    SetSpEffect(X0_4, 160760457);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007829); // Toggle ON
    SetSpEffect(X0_4, 160760507);
    
    // Visual Aura: Pink
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007838);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007829); // Toggle OFF
    SetSpEffect(X0_4, 160760458);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007829); // Toggle ON
    SetSpEffect(X0_4, 160760508);
    
    Label0();
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Knight - Rainbow Visual Aura
//----------------------------------------------
Event(20080072, Restart, function(X0_4) {
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, 25007839);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007829); // Toggle OFF
    SetSpEffect(X0_4, 160760470);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007829); // Toggle ON
    SetSpEffect(X0_4, 160760520);

    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007829); // Toggle OFF
    SetSpEffect(X0_4, 160760471);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007829); // Toggle ON
    SetSpEffect(X0_4, 160760521);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007829); // Toggle OFF
    SetSpEffect(X0_4, 160760472);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007829); // Toggle ON
    SetSpEffect(X0_4, 160760522);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007829); // Toggle OFF
    SetSpEffect(X0_4, 160760473);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007829); // Toggle ON
    SetSpEffect(X0_4, 160760523);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007829); // Toggle OFF
    SetSpEffect(X0_4, 160760474);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007829); // Toggle ON
    SetSpEffect(X0_4, 160760524);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007829); // Toggle OFF
    SetSpEffect(X0_4, 160760475);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007829); // Toggle ON
    SetSpEffect(X0_4, 160760525);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007829); // Toggle OFF
    SetSpEffect(X0_4, 160760476);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007829); // Toggle ON
    SetSpEffect(X0_4, 160760526);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007829); // Toggle OFF
    SetSpEffect(X0_4, 160760477);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007829); // Toggle ON
    SetSpEffect(X0_4, 160760527);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007829); // Toggle OFF
    SetSpEffect(X0_4, 160760478);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007829); // Toggle ON
    SetSpEffect(X0_4, 160760528);
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Watcher
//----------------------------------------------
Event(20080080, Restart, function(X0_4) {
    // If Spell Summon isn't active, just jump to loop restart.
    IfCharacterHasSpeffect(OR_01, X0_4, 160761600, true, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, FAIL, OR_01);
    
    // Mark of Attraction - Force Replan
    SkipIfCharacterHasSpEffect(1, 10000, 160762151, false, ComparisonType.Equal, 1);
    RequestCharacterAIReplan(X0_4);
    
    Label0();
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Watcher - Visual Emission/Visual Arua
//----------------------------------------------
Event(20080081, Restart, function(X0_4) {
    // If Spell Summon isn't active, just jump to loop restart.
    IfCharacterHasSpeffect(OR_01, X0_4, 160761600, true, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, FAIL, OR_01);
    
    // Visual Emission: Fire
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007840);
    SetSpEffect(X0_4, 160760400);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007841);
    SetSpEffect(X0_4, 160760401);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007842);
    SetSpEffect(X0_4, 160760402);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007843);
    SetSpEffect(X0_4, 160760403);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007844);
    SetSpEffect(X0_4, 160760404);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007845);
    SetSpEffect(X0_4, 160760405);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007846);
    SetSpEffect(X0_4, 160760406);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007847);
    SetSpEffect(X0_4, 160760407);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007848);
    SetSpEffect(X0_4, 160760408);
    
    // Visual Aura: Red
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007850);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007849); // Toggle OFF
    SetSpEffect(X0_4, 160760450);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007849); // Toggle ON
    SetSpEffect(X0_4, 160760500);
    
    // Visual Aura: Orange
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007851);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007849); // Toggle OFF
    SetSpEffect(X0_4, 160760451);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007849); // Toggle ON
    SetSpEffect(X0_4, 160760501);
    
    // Visual Aura: Yellow
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007852);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007849); // Toggle OFF
    SetSpEffect(X0_4, 160760452);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007849); // Toggle ON
    SetSpEffect(X0_4, 160760502);
    
    // Visual Aura: Green
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007853);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007849); // Toggle OFF
    SetSpEffect(X0_4, 160760453);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007849); // Toggle ON
    SetSpEffect(X0_4, 160760503);
    
    // Visual Aura: Cyan
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007854);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007849); // Toggle OFF
    SetSpEffect(X0_4, 160760454);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007849); // Toggle ON
    SetSpEffect(X0_4, 160760504);
    
    // Visual Aura: Blue
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007855);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007849); // Toggle OFF
    SetSpEffect(X0_4, 160760455);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007849); // Toggle ON
    SetSpEffect(X0_4, 160760505);
    
    // Visual Aura: Indigo
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007856);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007849); // Toggle OFF
    SetSpEffect(X0_4, 160760456);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007849); // Toggle ON
    SetSpEffect(X0_4, 160760506);
    
    // Visual Aura: Violet
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007857);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007849); // Toggle OFF
    SetSpEffect(X0_4, 160760457);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007849); // Toggle ON
    SetSpEffect(X0_4, 160760507);
    
    // Visual Aura: Pink
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007858);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007849); // Toggle OFF
    SetSpEffect(X0_4, 160760458);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007849); // Toggle ON
    SetSpEffect(X0_4, 160760508);
    
    Label0();
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Watcher - Rainbow Visual Aura
//----------------------------------------------
Event(20080082, Restart, function(X0_4) {
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, 25007859);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007849); // Toggle OFF
    SetSpEffect(X0_4, 160760470);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007849); // Toggle ON
    SetSpEffect(X0_4, 160760520);

    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007849); // Toggle OFF
    SetSpEffect(X0_4, 160760471);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007849); // Toggle ON
    SetSpEffect(X0_4, 160760521);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007849); // Toggle OFF
    SetSpEffect(X0_4, 160760472);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007849); // Toggle ON
    SetSpEffect(X0_4, 160760522);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007849); // Toggle OFF
    SetSpEffect(X0_4, 160760473);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007849); // Toggle ON
    SetSpEffect(X0_4, 160760523);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007849); // Toggle OFF
    SetSpEffect(X0_4, 160760474);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007849); // Toggle ON
    SetSpEffect(X0_4, 160760524);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007849); // Toggle OFF
    SetSpEffect(X0_4, 160760475);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007849); // Toggle ON
    SetSpEffect(X0_4, 160760525);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007849); // Toggle OFF
    SetSpEffect(X0_4, 160760476);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007849); // Toggle ON
    SetSpEffect(X0_4, 160760526);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007849); // Toggle OFF
    SetSpEffect(X0_4, 160760477);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007849); // Toggle ON
    SetSpEffect(X0_4, 160760527);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007849); // Toggle OFF
    SetSpEffect(X0_4, 160760478);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007849); // Toggle ON
    SetSpEffect(X0_4, 160760528);
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Gargoyle
//----------------------------------------------
Event(20080090, Restart, function(X0_4) {
    // If Spell Summon isn't active, just jump to loop restart.
    IfCharacterHasSpeffect(OR_01, X0_4, 160761600, true, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, FAIL, OR_01);
    
    // Mark of Attraction - Force Replan
    SkipIfCharacterHasSpEffect(1, 10000, 160762151, false, ComparisonType.Equal, 1);
    RequestCharacterAIReplan(X0_4);
    
    Label0();
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Gargoyle - Visual Emission/Visual Arua
//----------------------------------------------
Event(20080091, Restart, function(X0_4) {
    // If Spell Summon isn't active, just jump to loop restart.
    IfCharacterHasSpeffect(OR_01, X0_4, 160761600, true, ComparisonType.Equal, 1);
    GotoIfConditionGroupStateUncompiled(Label.LABEL0, FAIL, OR_01);
    
    // Visual Emission: Fire
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007860);
    SetSpEffect(X0_4, 160760400);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007861);
    SetSpEffect(X0_4, 160760401);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007862);
    SetSpEffect(X0_4, 160760402);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007863);
    SetSpEffect(X0_4, 160760403);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007864);
    SetSpEffect(X0_4, 160760404);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007865);
    SetSpEffect(X0_4, 160760405);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007866);
    SetSpEffect(X0_4, 160760406);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007867);
    SetSpEffect(X0_4, 160760407);
    
    // Visual Emission: 
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007868);
    SetSpEffect(X0_4, 160760408);
    
    // Visual Aura: Red
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007870);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007869); // Toggle OFF
    SetSpEffect(X0_4, 160760450);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007869); // Toggle ON
    SetSpEffect(X0_4, 160760500);
    
    // Visual Aura: Orange
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007871);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007869); // Toggle OFF
    SetSpEffect(X0_4, 160760451);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007869); // Toggle ON
    SetSpEffect(X0_4, 160760501);
    
    // Visual Aura: Yellow
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007872);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007869); // Toggle OFF
    SetSpEffect(X0_4, 160760452);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007869); // Toggle ON
    SetSpEffect(X0_4, 160760502);
    
    // Visual Aura: Green
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007873);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007869); // Toggle OFF
    SetSpEffect(X0_4, 160760453);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007869); // Toggle ON
    SetSpEffect(X0_4, 160760503);
    
    // Visual Aura: Cyan
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007874);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007869); // Toggle OFF
    SetSpEffect(X0_4, 160760454);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007869); // Toggle ON
    SetSpEffect(X0_4, 160760504);
    
    // Visual Aura: Blue
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007875);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007869); // Toggle OFF
    SetSpEffect(X0_4, 160760455);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007869); // Toggle ON
    SetSpEffect(X0_4, 160760505);
    
    // Visual Aura: Indigo
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007876);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007869); // Toggle OFF
    SetSpEffect(X0_4, 160760456);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007869); // Toggle ON
    SetSpEffect(X0_4, 160760506);
    
    // Visual Aura: Violet
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007877);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007869); // Toggle OFF
    SetSpEffect(X0_4, 160760457);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007869); // Toggle ON
    SetSpEffect(X0_4, 160760507);
    
    // Visual Aura: Pink
    SkipIfEventFlag(4, OFF, TargetEventFlagType.EventFlag, 25007878);
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007869); // Toggle OFF
    SetSpEffect(X0_4, 160760458);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007869); // Toggle ON
    SetSpEffect(X0_4, 160760508);
    
    Label0();
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Spell Summon - Gargoyle - Rainbow Visual Aura
//----------------------------------------------
Event(20080092, Restart, function(X0_4) {
    IfEventFlag(MAIN, ON, TargetEventFlagType.EventFlag, 25007879);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007869); // Toggle OFF
    SetSpEffect(X0_4, 160760470);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007869); // Toggle ON
    SetSpEffect(X0_4, 160760520);

    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007869); // Toggle OFF
    SetSpEffect(X0_4, 160760471);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007869); // Toggle ON
    SetSpEffect(X0_4, 160760521);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007869); // Toggle OFF
    SetSpEffect(X0_4, 160760472);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007869); // Toggle ON
    SetSpEffect(X0_4, 160760522);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007869); // Toggle OFF
    SetSpEffect(X0_4, 160760473);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007869); // Toggle ON
    SetSpEffect(X0_4, 160760523);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007869); // Toggle OFF
    SetSpEffect(X0_4, 160760474);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007869); // Toggle ON
    SetSpEffect(X0_4, 160760524);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007869); // Toggle OFF
    SetSpEffect(X0_4, 160760475);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007869); // Toggle ON
    SetSpEffect(X0_4, 160760525);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007869); // Toggle OFF
    SetSpEffect(X0_4, 160760476);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007869); // Toggle ON
    SetSpEffect(X0_4, 160760526);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007869); // Toggle OFF
    SetSpEffect(X0_4, 160760477);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007869); // Toggle ON
    SetSpEffect(X0_4, 160760527);
    
    WaitFixedTimeSeconds(0.6);
    
    SkipIfEventFlag(1, ON, TargetEventFlagType.EventFlag, 25007869); // Toggle OFF
    SetSpEffect(X0_4, 160760478);
    SkipIfEventFlag(1, OFF, TargetEventFlagType.EventFlag, 25007869); // Toggle ON
    SetSpEffect(X0_4, 160760528);
    
    EndUnconditionally(EventEndType.Restart);
});

//----------------------------------------------
// Interaction Point - Guaranteed Action
// <entity id>, <action id>, <sfx id>, <buff id>, <buff msg>
//----------------------------------------------
Event(20085000, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    // Skip FFX if -1 is arg
    SkipIfComparison(1, ComparisonType.Equal, X8_4, -1);
    SpawnOneshotSFX(TargetEntityType.Object, X0_4, -1, X8_4);
    
    IfActionButtonInArea(MAIN, X4_4, X0_4);
    
    SetSpEffect(10000, X12_4);
    DisplayEpitaphMessage(X16_4);
});

//----------------------------------------------
// Interaction Point - Random A/B
// <entity id>, <action id>, <sfx id>, <buff id>, <buff msg>, <debuff id>, <debuff msg>
//----------------------------------------------
Event(20085001, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4) {
    // Skip FFX if -1 is arg
    SkipIfComparison(1, ComparisonType.Equal, X8_4, -1);
    SpawnOneshotSFX(TargetEntityType.Object, X0_4, -1, X8_4);
    
    IfActionButtonInArea(MAIN, X4_4, X0_4);
    
    BatchSetEventFlags(25009000, 25009009, OFF);
    RandomlySetEventFlagInRange(25009000, 25009009, ON);
    
    // Good - 50%
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, 25009000);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, 25009001);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, 25009002);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, 25009003);
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, 25009004);
    SkipIfConditionGroupStateUncompiled(2, FAIL, OR_01);
    SetSpEffect(10000, X12_4);
    DisplayEpitaphMessage(X16_4);
    
    // Bad - 50%
    IfEventFlag(OR_02, ON, TargetEventFlagType.EventFlag, 25009005);
    IfEventFlag(OR_02, ON, TargetEventFlagType.EventFlag, 25009006);
    IfEventFlag(OR_02, ON, TargetEventFlagType.EventFlag, 25009007);
    IfEventFlag(OR_02, ON, TargetEventFlagType.EventFlag, 25009008);
    IfEventFlag(OR_02, ON, TargetEventFlagType.EventFlag, 25009009);
    SkipIfConditionGroupStateUncompiled(2, FAIL, OR_02);
    SetSpEffect(10000, X20_4);
    DisplayEpitaphMessage(X24_4);
});
    
//----------------------------------------------
// Interaction Point - Random Pool
// <entity id>, <action id>, <sfx id>
//----------------------------------------------
Event(20085002, Restart, function(X0_4, X4_4, X8_4) {
    // Skip FFX if -1 is arg
    SkipIfComparison(1, ComparisonType.Equal, X8_4, -1);
    SpawnOneshotSFX(TargetEntityType.Object, X0_4, -1, X8_4);
    
    IfActionButtonInArea(MAIN, X4_4, X0_4);
    
    BatchSetEventFlags(25009000, 25009005, OFF);
    RandomlySetEventFlagInRange(25009000, 25009005, ON);
    
    // Buff - HP
    IfEventFlag(OR_01, ON, TargetEventFlagType.EventFlag, 25009000);
    SkipIfConditionGroupStateUncompiled(2, FAIL, OR_01);
    SetSpEffect(10000, 160751000);
    DisplayEpitaphMessage(99070100);
    
    // Buff - FP
    IfEventFlag(OR_02, ON, TargetEventFlagType.EventFlag, 25009001);
    SkipIfConditionGroupStateUncompiled(2, FAIL, OR_02);
    SetSpEffect(10000, 160751001);
    DisplayEpitaphMessage(99070101);
    
    // Buff - Stamina
    IfEventFlag(OR_03, ON, TargetEventFlagType.EventFlag, 25009002);
    SkipIfConditionGroupStateUncompiled(2, FAIL, OR_03);
    SetSpEffect(10000, 160751002);
    DisplayEpitaphMessage(99070102);
    
    // Buff - Damage
    IfEventFlag(OR_04, ON, TargetEventFlagType.EventFlag, 25009003);
    SkipIfConditionGroupStateUncompiled(2, FAIL, OR_04);
    SetSpEffect(10000, 160751003);
    DisplayEpitaphMessage(99070103);
    
    // Buff - Absorption
    IfEventFlag(OR_05, ON, TargetEventFlagType.EventFlag, 25009004);
    SkipIfConditionGroupStateUncompiled(2, FAIL, OR_05);
    SetSpEffect(10000, 160751004);
    DisplayEpitaphMessage(99070104);
    
    // Buff - Stamina Recovery
    IfEventFlag(OR_06, ON, TargetEventFlagType.EventFlag, 25009005);
    SkipIfConditionGroupStateUncompiled(2, FAIL, OR_06);
    SetSpEffect(10000, 160751005);
    DisplayEpitaphMessage(99070105);
});

//----------------------------------------------
// Interaction Point - Covenant Specific
// <entity id>, <action id>, <sfx id>, <buff id>, <buff msg>, <debuff id>, <debuff msg>, <covenant speffect>
//----------------------------------------------
Event(20085003, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4) {
    // Skip FFX if -1 is arg
    SkipIfComparison(1, ComparisonType.Equal, X8_4, -1);
    SpawnOneshotSFX(TargetEntityType.Object, X0_4, -1, X8_4);
    
    IfActionButtonInArea(MAIN, X4_4, X0_4);
    
    // Has correct covenant accessory equipped
    SkipIfCharacterHasSpEffect(2, 10000, X28_4, false, ComparisonType.Equal, 1);
    SetSpEffect(10000, X12_4);
    DisplayEpitaphMessage(X16_4);
    
    // Has wrong covenant accessory equipped
    SkipIfCharacterHasSpEffect(2, 10000, X28_4, true, ComparisonType.Equal, 1);
    SetSpEffect(10000, X20_4);
    DisplayEpitaphMessage(X24_4);
});

//------------------------
// Trapped Chest - Spawn Bullet
// <used flag>, <object id>, <ObjAct id>, <bullet spawner id>, <behavior id>
// InitializeCommonEvent(20086000, 14001620, 4001620, 4004620, 4000620, 280002020); // Poison Cloud
//------------------------
Event(20086000, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4) {
    GotoIfEventFlag(Label.LABEL0, OFF, TargetEventFlagType.EventFlag, X0_4); // Goto Label 0 if previously used
    
    // Used chest
    ReproduceObjectAnimation(X4_4, 1); // Open the chest
    SetObjactState(X4_4, -1, Disabled); // Disable interaction
    SetObjectTreasureState(X4_4, Enabled); // Enable treasure
    EndUnconditionally(EventEndType.End);
    
    // Unused chest
    Label0();
    SetObjectTreasureState(X4_4, Disabled); // Disable treasure
    IfObjactEventFlag(MAIN, X8_4); // Wait for object activation flag
    WaitFixedTimeFrames(10);
    SetObjectTreasureState(X4_4, Enabled); // Enable treasure
    SetEventFlag(X0_4, ON);
    PlaySE(10000, SoundType.v_Voice, 444444442); // Thud Shwing
    WaitFixedTimeSeconds(2.0);
    ShootBullet(X12_4, X12_4, -1, X16_4, 0, 0, 0);
});

//------------------------
// Trapped Chest - Spawn Enemies
// <used flag>, <object id>, <ObjAct id>, <enemy 1 id>, <enemy 2 id>, <enemy 3 id>, 
//------------------------
Event(20086001, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4) {
    SkipIfComparison(3, ComparisonType.Equal, X12_4, -1);
    ChangeCharacterEnableState(X12_4, Disabled);
    SetCharacterAnimationState(X12_4, Disabled);
    SetCharacterAIState(X12_4, Disabled);
    
    SkipIfComparison(3, ComparisonType.Equal, X16_4, -1);
    ChangeCharacterEnableState(X16_4, Disabled);
    SetCharacterAnimationState(X16_4, Disabled);
    SetCharacterAIState(X16_4, Disabled);
    
    SkipIfComparison(3, ComparisonType.Equal, X20_4, -1);
    ChangeCharacterEnableState(X20_4, Disabled);
    SetCharacterAnimationState(X20_4, Disabled);
    SetCharacterAIState(X20_4, Disabled);
    
    GotoIfEventFlag(Label.LABEL0, OFF, TargetEventFlagType.EventFlag, X0_4); // Goto Label 0 if previously used
    
    // Used chest
    ReproduceObjectAnimation(X4_4, 1); // Open the chest
    SetObjactState(X4_4, -1, Disabled); // Disable interaction
    SetObjectTreasureState(X4_4, Enabled); // Enable treasure
    EndUnconditionally(EventEndType.End);
    
    // Unused chest
    Label0();
    SetObjectTreasureState(X4_4, Disabled); // Disable treasure
    IfObjactEventFlag(MAIN, X8_4); // Wait for object activation flag
    WaitFixedTimeFrames(10);
    
    // Spawn enemies
    SkipIfComparison(3, ComparisonType.Equal, X12_4, -1);
    ChangeCharacterEnableState(X12_4, Enabled);
    SetCharacterAnimationState(X12_4, Enabled);
    SetCharacterAIState(X12_4, Enabled);
    
    SkipIfComparison(3, ComparisonType.Equal, X16_4, -1);
    ChangeCharacterEnableState(X16_4, Enabled);
    SetCharacterAnimationState(X16_4, Enabled);
    SetCharacterAIState(X16_4, Enabled);
    
    SkipIfComparison(3, ComparisonType.Equal, X20_4, -1);
    ChangeCharacterEnableState(X20_4, Enabled);
    SetCharacterAnimationState(X20_4, Enabled);
    SetCharacterAIState(X20_4, Enabled);
    
    SetObjectTreasureState(X4_4, Enabled); // Enable treasure
    SetEventFlag(X0_4, ON);
});

//------------------------
// Trapped Chest - Activate Enemies
// <used flag>, <object id>, <ObjAct id>, <enemy 1 id>, <enemy 2 id>, <enemy 3 id>, <inactive anim>, <wakeup anim>
// 700, 1700 for skeletons
// InitializeCommonEvent(20086002, 14001620, 4001620, 4004620, 4000621, 4000622, 4000623, 700, 1700); // Skeletons
//------------------------
Event(20086002, Restart, function(X0_4, X4_4, X8_4, X12_4, X16_4, X20_4, X24_4, X28_4) {
    SetCharacterAnimationState(X12_4, Disabled);
    SetCharacterAIState(X12_4, Disabled);
    ForceAnimationPlayback(X12_4, X24_4, true, false, false, 0, 1);
    
    SetCharacterAnimationState(X16_4, Disabled);
    SetCharacterAIState(X16_4, Disabled);
    ForceAnimationPlayback(X16_4, X24_4, true, false, false, 0, 1);
    
    SetCharacterAnimationState(X20_4, Disabled);
    SetCharacterAIState(X20_4, Disabled);
    ForceAnimationPlayback(X20_4, X24_4, true, false, false, 0, 1);
    
    GotoIfEventFlag(Label.LABEL0, OFF, TargetEventFlagType.EventFlag, X0_4); // Goto Label 0 if previously used
    
    // Used chest
    ReproduceObjectAnimation(X4_4, 1); // Open the chest
    SetObjactState(X4_4, -1, Disabled); // Disable interaction
    SetObjectTreasureState(X4_4, Enabled); // Enable treasure
    EndUnconditionally(EventEndType.End);
    
    // Unused chest
    Label0();
    SetObjectTreasureState(X4_4, Disabled); // Disable treasure
    IfObjactEventFlag(MAIN, X8_4); // Wait for object activation flag
    WaitFixedTimeFrames(10);
    
    // Spawn enemies
    SetCharacterAnimationState(X12_4, Enabled);
    SetCharacterAIState(X12_4, Enabled);
    ForceAnimationPlayback(X12_4, X28_4, true, false, false, 0, 1);
    
    SetCharacterAnimationState(X16_4, Enabled);
    SetCharacterAIState(X16_4, Enabled);
    ForceAnimationPlayback(X16_4, X28_4, true, false, false, 0, 1);
    
    SetCharacterAnimationState(X20_4, Enabled);
    SetCharacterAIState(X20_4, Enabled);
    ForceAnimationPlayback(X20_4, X28_4, true, false, false, 0, 1);
    
    SetObjectTreasureState(X4_4, Enabled); // Enable treasure
    SetEventFlag(X0_4, ON);
});

//------------------------
// Enable Wave Enemy
//------------------------
Event(20087100, Restart, function(X0_4) {
    ChangeCharacterEnableState(X0_4, Enabled);
    SetCharacterAnimationState(X0_4, Enabled);
    SetCharacterAIState(X0_4, Enabled);
    
    // Spawn FFX
    SpawnOneshotSFX(TargetEntityType.Character, X0_4, 203, 1060);
});
